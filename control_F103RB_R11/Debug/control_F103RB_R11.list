
control_F103RB_R11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a420  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800a52c  0800a52c  0001a52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9c8  0800a9c8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9c8  0800a9c8  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9c8  0800a9c8  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9c8  0800a9c8  0001a9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9cc  0800a9cc  0001a9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a9d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e4  200001fc  0800abcc  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e0  0800abcc  000215e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad61  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c46  00000000  00000000  0003af86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003ebd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003ff30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bde7  00000000  00000000  000410e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001699a  00000000  00000000  0005cecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c7a  00000000  00000000  00073869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001044e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c84  00000000  00000000  00104538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001fc 	.word	0x200001fc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a514 	.word	0x0800a514

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000200 	.word	0x20000200
 8000148:	0800a514 	.word	0x0800a514

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <_write>:
static void MX_TIM3_Init(void);

/* USER CODE BEGIN PFP */

#ifdef DEBUGPORT
	int _write(int file, char *ptr, int len) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]
		HAL_UART_Transmit(&DEBUGPORT, (uint8_t*) ptr, (uint16_t) len, 0xFFFFFFFF);
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	b29a      	uxth	r2, r3
 8000180:	f04f 33ff 	mov.w	r3, #4294967295
 8000184:	68b9      	ldr	r1, [r7, #8]
 8000186:	4804      	ldr	r0, [pc, #16]	; (8000198 <_write+0x28>)
 8000188:	f004 f9a1 	bl	80044ce <HAL_UART_Transmit>
		return len;
 800018c:	687b      	ldr	r3, [r7, #4]
	}
 800018e:	4618      	mov	r0, r3
 8000190:	3710      	adds	r7, #16
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	200005cc 	.word	0x200005cc

0800019c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a2:	f001 f8dd 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a6:	f000 f889 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001aa:	f000 f9d7 	bl	800055c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001ae:	f000 f981 	bl	80004b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001b2:	f000 f9a9 	bl	8000508 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80001b6:	f008 f997 	bl	80084e8 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80001ba:	f000 f92d 	bl	8000418 <MX_TIM4_Init>
  MX_TIM3_Init();
 80001be:	f000 f8dd 	bl	800037c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&COMMPORT, &COMMDATA, 1);
 80001c2:	2201      	movs	r2, #1
 80001c4:	492d      	ldr	r1, [pc, #180]	; (800027c <main+0xe0>)
 80001c6:	482e      	ldr	r0, [pc, #184]	; (8000280 <main+0xe4>)
 80001c8:	f004 fa13 	bl	80045f2 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80001cc:	482d      	ldr	r0, [pc, #180]	; (8000284 <main+0xe8>)
 80001ce:	f003 fd87 	bl	8003ce0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80001d2:	482d      	ldr	r0, [pc, #180]	; (8000288 <main+0xec>)
 80001d4:	f003 fd84 	bl	8003ce0 <HAL_TIM_Base_Start_IT>
	// 2020.07.28 psh - EM lock
		HAL_GPIO_WritePin(SOL_LOCK1_GPIO_Port, SOL_LOCK1_Pin, GPIO_PIN_SET); // unlock SOL_LOCK1 --> LOCK of EM Lock
		HAL_GPIO_WritePin(SOL_LOCK2_GPIO_Port, SOL_LOCK2_Pin, GPIO_PIN_SET); // unlock SOL_LOCK2 --> LOCK of EM Lock
	#endif

	HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_SET);	// CW direction
 80001d8:	2201      	movs	r2, #1
 80001da:	2102      	movs	r1, #2
 80001dc:	482b      	ldr	r0, [pc, #172]	; (800028c <main+0xf0>)
 80001de:	f001 fc64 	bl	8001aaa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);  // AC Motor Power off
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4829      	ldr	r0, [pc, #164]	; (800028c <main+0xf0>)
 80001e8:	f001 fc5f 	bl	8001aaa <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
		char *str_ptr = NULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	607b      	str	r3, [r7, #4]

		printf(" hello? \r\n");
 80001f0:	4827      	ldr	r0, [pc, #156]	; (8000290 <main+0xf4>)
 80001f2:	f008 fefd 	bl	8008ff0 <puts>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);		// SCAN LED Off
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fc:	4825      	ldr	r0, [pc, #148]	; (8000294 <main+0xf8>)
 80001fe:	f001 fc54 	bl	8001aaa <HAL_GPIO_WritePin>

		while (1) {

			if (CDC_flag == 1) {
 8000202:	4b25      	ldr	r3, [pc, #148]	; (8000298 <main+0xfc>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d116      	bne.n	8000238 <main+0x9c>
				printf(" Received CDC data: %s\r\n", CDCbuffer);
 800020a:	4924      	ldr	r1, [pc, #144]	; (800029c <main+0x100>)
 800020c:	4824      	ldr	r0, [pc, #144]	; (80002a0 <main+0x104>)
 800020e:	f008 fe69 	bl	8008ee4 <iprintf>
				if (CDCbuffer[0] != '\0') {
 8000212:	4b22      	ldr	r3, [pc, #136]	; (800029c <main+0x100>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d00b      	beq.n	8000232 <main+0x96>
					str_ptr = strtok(CDCbuffer, ",");
 800021a:	4922      	ldr	r1, [pc, #136]	; (80002a4 <main+0x108>)
 800021c:	481f      	ldr	r0, [pc, #124]	; (800029c <main+0x100>)
 800021e:	f008 ff0f 	bl	8009040 <strtok>
 8000222:	6078      	str	r0, [r7, #4]
					printf(" command: %s\r\n", str_ptr);
 8000224:	6879      	ldr	r1, [r7, #4]
 8000226:	4820      	ldr	r0, [pc, #128]	; (80002a8 <main+0x10c>)
 8000228:	f008 fe5c 	bl	8008ee4 <iprintf>
					command_parsing(str_ptr);
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	f000 fa7b 	bl	8000728 <command_parsing>
				}
				CDC_flag = 0;
 8000232:	4b19      	ldr	r3, [pc, #100]	; (8000298 <main+0xfc>)
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]
			}

			if (Rxcplt_flag == 1) {
 8000238:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <main+0x110>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d116      	bne.n	800026e <main+0xd2>
				printf(" Received data: %s\r\n", Rxbuffer);
 8000240:	491b      	ldr	r1, [pc, #108]	; (80002b0 <main+0x114>)
 8000242:	481c      	ldr	r0, [pc, #112]	; (80002b4 <main+0x118>)
 8000244:	f008 fe4e 	bl	8008ee4 <iprintf>

				if (Rxbuffer[0] != '\0') {
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <main+0x114>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d00b      	beq.n	8000268 <main+0xcc>
					str_ptr = strtok(Rxbuffer, ",");
 8000250:	4914      	ldr	r1, [pc, #80]	; (80002a4 <main+0x108>)
 8000252:	4817      	ldr	r0, [pc, #92]	; (80002b0 <main+0x114>)
 8000254:	f008 fef4 	bl	8009040 <strtok>
 8000258:	6078      	str	r0, [r7, #4]
					printf(" command: %s\r\n", str_ptr);
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	4812      	ldr	r0, [pc, #72]	; (80002a8 <main+0x10c>)
 800025e:	f008 fe41 	bl	8008ee4 <iprintf>
					command_parsing(str_ptr);
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f000 fa60 	bl	8000728 <command_parsing>
				}   // end if(Rxbuffer[0] != '\0')
				// buf_index = 0;	move to  void HAL_UART_RxCpltCallback
				Rxcplt_flag = 0;
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <main+0x110>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
			}   // end if(Rxcplt_flag == 1)

	/*		if (time_second >= ALIVE_PRIOD)
				check_tablet_alive(3);
	*/
			if (door_check_enable == 1)
 800026e:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <main+0x11c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d1c5      	bne.n	8000202 <main+0x66>
				check_door();
 8000276:	f000 fb2b 	bl	80008d0 <check_door>
			if (CDC_flag == 1) {
 800027a:	e7c2      	b.n	8000202 <main+0x66>
 800027c:	20000580 	.word	0x20000580
 8000280:	2000060c 	.word	0x2000060c
 8000284:	20000584 	.word	0x20000584
 8000288:	20000538 	.word	0x20000538
 800028c:	40010800 	.word	0x40010800
 8000290:	0800a52c 	.word	0x0800a52c
 8000294:	40011000 	.word	0x40011000
 8000298:	2000021a 	.word	0x2000021a
 800029c:	2000021c 	.word	0x2000021c
 80002a0:	0800a538 	.word	0x0800a538
 80002a4:	0800a554 	.word	0x0800a554
 80002a8:	0800a558 	.word	0x0800a558
 80002ac:	20000219 	.word	0x20000219
 80002b0:	20000280 	.word	0x20000280
 80002b4:	0800a568 	.word	0x0800a568
 80002b8:	20000304 	.word	0x20000304

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b094      	sub	sp, #80	; 0x50
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f008 fe02 	bl	8008ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ec:	2301      	movs	r3, #1
 80002ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000306:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000308:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800030c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000312:	4618      	mov	r0, r3
 8000314:	f002 ff8c 	bl	8003230 <HAL_RCC_OscConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800031e:	f000 fdd9 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	230f      	movs	r3, #15
 8000324:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	2302      	movs	r3, #2
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000332:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f003 f9f6 	bl	8003730 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800034a:	f000 fdc3 	bl	8000ed4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800034e:	2310      	movs	r3, #16
 8000350:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000352:	2300      	movs	r3, #0
 8000354:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f003 fbbb 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000364:	f000 fdb6 	bl	8000ed4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8000368:	2200      	movs	r2, #0
 800036a:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 800036e:	2000      	movs	r0, #0
 8000370:	f003 fac8 	bl	8003904 <HAL_RCC_MCOConfig>
}
 8000374:	bf00      	nop
 8000376:	3750      	adds	r7, #80	; 0x50
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000390:	463b      	mov	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000398:	4b1d      	ldr	r3, [pc, #116]	; (8000410 <MX_TIM3_Init+0x94>)
 800039a:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <MX_TIM3_Init+0x98>)
 800039c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800039e:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <MX_TIM3_Init+0x94>)
 80003a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80003a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <MX_TIM3_Init+0x94>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 719;
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_TIM3_Init+0x94>)
 80003ae:	f240 22cf 	movw	r2, #719	; 0x2cf
 80003b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b4:	4b16      	ldr	r3, [pc, #88]	; (8000410 <MX_TIM3_Init+0x94>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <MX_TIM3_Init+0x94>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003c0:	4813      	ldr	r0, [pc, #76]	; (8000410 <MX_TIM3_Init+0x94>)
 80003c2:	f003 fc3d 	bl	8003c40 <HAL_TIM_Base_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80003cc:	f000 fd82 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003d6:	f107 0308 	add.w	r3, r7, #8
 80003da:	4619      	mov	r1, r3
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <MX_TIM3_Init+0x94>)
 80003de:	f003 fdd9 	bl	8003f94 <HAL_TIM_ConfigClockSource>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80003e8:	f000 fd74 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ec:	2300      	movs	r3, #0
 80003ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003f4:	463b      	mov	r3, r7
 80003f6:	4619      	mov	r1, r3
 80003f8:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_TIM3_Init+0x94>)
 80003fa:	f003 ffab 	bl	8004354 <HAL_TIMEx_MasterConfigSynchronization>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000404:	f000 fd66 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000584 	.word	0x20000584
 8000414:	40000400 	.word	0x40000400

08000418 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042c:	463b      	mov	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000434:	4b1d      	ldr	r3, [pc, #116]	; (80004ac <MX_TIM4_Init+0x94>)
 8000436:	4a1e      	ldr	r2, [pc, #120]	; (80004b0 <MX_TIM4_Init+0x98>)
 8000438:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 800043a:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <MX_TIM4_Init+0x94>)
 800043c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000440:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <MX_TIM4_Init+0x94>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <MX_TIM4_Init+0x94>)
 800044a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800044e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000450:	4b16      	ldr	r3, [pc, #88]	; (80004ac <MX_TIM4_Init+0x94>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <MX_TIM4_Init+0x94>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800045c:	4813      	ldr	r0, [pc, #76]	; (80004ac <MX_TIM4_Init+0x94>)
 800045e:	f003 fbef 	bl	8003c40 <HAL_TIM_Base_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000468:	f000 fd34 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800046c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	4619      	mov	r1, r3
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <MX_TIM4_Init+0x94>)
 800047a:	f003 fd8b 	bl	8003f94 <HAL_TIM_ConfigClockSource>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000484:	f000 fd26 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000488:	2300      	movs	r3, #0
 800048a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048c:	2300      	movs	r3, #0
 800048e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000490:	463b      	mov	r3, r7
 8000492:	4619      	mov	r1, r3
 8000494:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_TIM4_Init+0x94>)
 8000496:	f003 ff5d 	bl	8004354 <HAL_TIMEx_MasterConfigSynchronization>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80004a0:	f000 fd18 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80004a4:	bf00      	nop
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000538 	.word	0x20000538
 80004b0:	40000800 	.word	0x40000800

080004b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004ba:	4a12      	ldr	r2, [pc, #72]	; (8000504 <MX_USART1_UART_Init+0x50>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004be:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004ec:	f003 ffa2 	bl	8004434 <HAL_UART_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004f6:	f000 fced 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200005cc 	.word	0x200005cc
 8000504:	40013800 	.word	0x40013800

08000508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800050e:	4a12      	ldr	r2, [pc, #72]	; (8000558 <MX_USART2_UART_Init+0x50>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_USART2_UART_Init+0x4c>)
 8000540:	f003 ff78 	bl	8004434 <HAL_UART_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800054a:	f000 fcc3 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000060c 	.word	0x2000060c
 8000558:	40004400 	.word	0x40004400

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 0310 	add.w	r3, r7, #16
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	4b68      	ldr	r3, [pc, #416]	; (8000714 <MX_GPIO_Init+0x1b8>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a67      	ldr	r2, [pc, #412]	; (8000714 <MX_GPIO_Init+0x1b8>)
 8000576:	f043 0310 	orr.w	r3, r3, #16
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b65      	ldr	r3, [pc, #404]	; (8000714 <MX_GPIO_Init+0x1b8>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000588:	4b62      	ldr	r3, [pc, #392]	; (8000714 <MX_GPIO_Init+0x1b8>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a61      	ldr	r2, [pc, #388]	; (8000714 <MX_GPIO_Init+0x1b8>)
 800058e:	f043 0320 	orr.w	r3, r3, #32
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b5f      	ldr	r3, [pc, #380]	; (8000714 <MX_GPIO_Init+0x1b8>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0320 	and.w	r3, r3, #32
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b5c      	ldr	r3, [pc, #368]	; (8000714 <MX_GPIO_Init+0x1b8>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a5b      	ldr	r2, [pc, #364]	; (8000714 <MX_GPIO_Init+0x1b8>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b59      	ldr	r3, [pc, #356]	; (8000714 <MX_GPIO_Init+0x1b8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b8:	4b56      	ldr	r3, [pc, #344]	; (8000714 <MX_GPIO_Init+0x1b8>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a55      	ldr	r2, [pc, #340]	; (8000714 <MX_GPIO_Init+0x1b8>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b53      	ldr	r3, [pc, #332]	; (8000714 <MX_GPIO_Init+0x1b8>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0308 	and.w	r3, r3, #8
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|CUT_12VOUT_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5162 	mov.w	r1, #14464	; 0x3880
 80005d6:	4850      	ldr	r0, [pc, #320]	; (8000718 <MX_GPIO_Init+0x1bc>)
 80005d8:	f001 fa67 	bl	8001aaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AC_M_ON_Pin|AC_M_FWD_Pin|EN2_Pin|DIR2_Pin
 80005dc:	2200      	movs	r2, #0
 80005de:	21e3      	movs	r1, #227	; 0xe3
 80005e0:	484e      	ldr	r0, [pc, #312]	; (800071c <MX_GPIO_Init+0x1c0>)
 80005e2:	f001 fa62 	bl	8001aaa <HAL_GPIO_WritePin>
                          |PUL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR1_Pin|PUL1_Pin|SOL_LOCK1_Pin|SOL_LOCK2_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80005ec:	484c      	ldr	r0, [pc, #304]	; (8000720 <MX_GPIO_Init+0x1c4>)
 80005ee:	f001 fa5c 	bl	8001aaa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin CUT_12VOUT_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|CUT_12VOUT_Pin|LED3_Pin|LED2_Pin;
 80005f2:	f44f 5362 	mov.w	r3, #14464	; 0x3880
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2302      	movs	r3, #2
 8000602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	4843      	ldr	r0, [pc, #268]	; (8000718 <MX_GPIO_Init+0x1bc>)
 800060c:	f001 f8b2 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_M_ON_Pin AC_M_FWD_Pin */
  GPIO_InitStruct.Pin = AC_M_ON_Pin|AC_M_FWD_Pin;
 8000610:	2303      	movs	r3, #3
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000618:	2301      	movs	r3, #1
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2302      	movs	r3, #2
 800061e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	483d      	ldr	r0, [pc, #244]	; (800071c <MX_GPIO_Init+0x1c0>)
 8000628:	f001 f8a4 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN2_Pin */
  GPIO_InitStruct.Pin = EN2_Pin;
 800062c:	2320      	movs	r3, #32
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000630:	2311      	movs	r3, #17
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN2_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4836      	ldr	r0, [pc, #216]	; (800071c <MX_GPIO_Init+0x1c0>)
 8000644:	f001 f896 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin PUL2_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|PUL2_Pin;
 8000648:	23c0      	movs	r3, #192	; 0xc0
 800064a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800064c:	2311      	movs	r3, #17
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000654:	2303      	movs	r3, #3
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4619      	mov	r1, r3
 800065e:	482f      	ldr	r0, [pc, #188]	; (800071c <MX_GPIO_Init+0x1c0>)
 8000660:	f001 f888 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin PUL1_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|PUL1_Pin;
 8000664:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800066a:	2311      	movs	r3, #17
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	4828      	ldr	r0, [pc, #160]	; (8000720 <MX_GPIO_Init+0x1c4>)
 800067e:	f001 f879 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4821      	ldr	r0, [pc, #132]	; (800071c <MX_GPIO_Init+0x1c0>)
 8000698:	f001 f86c 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : EI3_BLIMIT_Pin EI5_TLIMIT_Pin */
  GPIO_InitStruct.Pin = EI3_BLIMIT_Pin|EI5_TLIMIT_Pin;
 800069c:	2328      	movs	r3, #40	; 0x28
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <MX_GPIO_Init+0x1c8>)
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	481c      	ldr	r0, [pc, #112]	; (8000720 <MX_GPIO_Init+0x1c4>)
 80006b0:	f001 f860 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOOR_Pin */
  GPIO_InitStruct.Pin = DOOR_Pin;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DOOR_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	4816      	ldr	r0, [pc, #88]	; (8000720 <MX_GPIO_Init+0x1c4>)
 80006c8:	f001 f854 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOL_LOCK1_Pin SOL_LOCK2_Pin */
  GPIO_InitStruct.Pin = SOL_LOCK1_Pin|SOL_LOCK2_Pin;
 80006cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2302      	movs	r3, #2
 80006dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	480e      	ldr	r0, [pc, #56]	; (8000720 <MX_GPIO_Init+0x1c4>)
 80006e6:	f001 f845 	bl	8001774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	2009      	movs	r0, #9
 80006f0:	f000 ff93 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006f4:	2009      	movs	r0, #9
 80006f6:	f000 ffac 	bl	8001652 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2017      	movs	r0, #23
 8000700:	f000 ff8b 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000704:	2017      	movs	r0, #23
 8000706:	f000 ffa4 	bl	8001652 <HAL_NVIC_EnableIRQ>

}
 800070a:	bf00      	nop
 800070c:	3720      	adds	r7, #32
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	40011000 	.word	0x40011000
 800071c:	40010800 	.word	0x40010800
 8000720:	40010c00 	.word	0x40010c00
 8000724:	10210000 	.word	0x10210000

08000728 <command_parsing>:

/* USER CODE BEGIN 4 */
void command_parsing(char *str_ptr) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

	if (!strcmp(str_ptr, "OK")) {
 8000730:	4953      	ldr	r1, [pc, #332]	; (8000880 <command_parsing+0x158>)
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff fd0a 	bl	800014c <strcmp>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d10e      	bne.n	800075c <command_parsing+0x34>
		printf(" OK signal received\r\n");
 800073e:	4851      	ldr	r0, [pc, #324]	; (8000884 <command_parsing+0x15c>)
 8000740:	f008 fc56 	bl	8008ff0 <puts>
		str_ptr = strtok(NULL, ",");
 8000744:	4950      	ldr	r1, [pc, #320]	; (8000888 <command_parsing+0x160>)
 8000746:	2000      	movs	r0, #0
 8000748:	f008 fc7a 	bl	8009040 <strtok>
 800074c:	6078      	str	r0, [r7, #4]
		PAD_boot_flag = 1;
 800074e:	4b4f      	ldr	r3, [pc, #316]	; (800088c <command_parsing+0x164>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
		alive_call_fail = 0;
 8000754:	4b4e      	ldr	r3, [pc, #312]	; (8000890 <command_parsing+0x168>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
			Rfid_Scanning(atoi(str_ptr));

			Report_to_Server(REPORT_CMD);
		}
	}
}
 800075a:	e08c      	b.n	8000876 <command_parsing+0x14e>
	} else if (!strcmp(str_ptr, "BR")) {
 800075c:	494d      	ldr	r1, [pc, #308]	; (8000894 <command_parsing+0x16c>)
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff fcf4 	bl	800014c <strcmp>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10b      	bne.n	8000782 <command_parsing+0x5a>
		printf(" Board Read\r\n");
 800076a:	484b      	ldr	r0, [pc, #300]	; (8000898 <command_parsing+0x170>)
 800076c:	f008 fc40 	bl	8008ff0 <puts>
		str_ptr = strtok(NULL, ",");
 8000770:	4945      	ldr	r1, [pc, #276]	; (8000888 <command_parsing+0x160>)
 8000772:	2000      	movs	r0, #0
 8000774:	f008 fc64 	bl	8009040 <strtok>
 8000778:	6078      	str	r0, [r7, #4]
		Report_to_Server(REPORT_CMD);
 800077a:	2000      	movs	r0, #0
 800077c:	f000 f924 	bl	80009c8 <Report_to_Server>
}
 8000780:	e079      	b.n	8000876 <command_parsing+0x14e>
	} else if (!strcmp(str_ptr, "UD")) {
 8000782:	4946      	ldr	r1, [pc, #280]	; (800089c <command_parsing+0x174>)
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fce1 	bl	800014c <strcmp>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d123      	bne.n	80007d8 <command_parsing+0xb0>
		printf(" Unlock Door\r\n");
 8000790:	4843      	ldr	r0, [pc, #268]	; (80008a0 <command_parsing+0x178>)
 8000792:	f008 fc2d 	bl	8008ff0 <puts>
		str_ptr = strtok(NULL, ",");
 8000796:	493c      	ldr	r1, [pc, #240]	; (8000888 <command_parsing+0x160>)
 8000798:	2000      	movs	r0, #0
 800079a:	f008 fc51 	bl	8009040 <strtok>
 800079e:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(SOL_LOCK1_GPIO_Port, SOL_LOCK1_Pin, GPIO_PIN_SET);  // unlock SOL_LOCK1
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a6:	483f      	ldr	r0, [pc, #252]	; (80008a4 <command_parsing+0x17c>)
 80007a8:	f001 f97f 	bl	8001aaa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SOL_LOCK2_GPIO_Port, SOL_LOCK2_Pin, GPIO_PIN_SET);  // unlock SOL_LOCK2
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b2:	483c      	ldr	r0, [pc, #240]	; (80008a4 <command_parsing+0x17c>)
 80007b4:	f001 f979 	bl	8001aaa <HAL_GPIO_WritePin>
		strcpy(Bstate.lock, "0,");  // 占쏙옙占쏙옙 占쏙옙占쏙옙
 80007b8:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <command_parsing+0x180>)
 80007ba:	4a3c      	ldr	r2, [pc, #240]	; (80008ac <command_parsing+0x184>)
 80007bc:	8811      	ldrh	r1, [r2, #0]
 80007be:	7892      	ldrb	r2, [r2, #2]
 80007c0:	8019      	strh	r1, [r3, #0]
 80007c2:	709a      	strb	r2, [r3, #2]
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);  // LED2 Off
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ca:	4839      	ldr	r0, [pc, #228]	; (80008b0 <command_parsing+0x188>)
 80007cc:	f001 f96d 	bl	8001aaa <HAL_GPIO_WritePin>
		Report_to_Server(REPORT_CMD);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 f8f9 	bl	80009c8 <Report_to_Server>
}
 80007d6:	e04e      	b.n	8000876 <command_parsing+0x14e>
	} else if (!strcmp(str_ptr, "LD")) {
 80007d8:	4936      	ldr	r1, [pc, #216]	; (80008b4 <command_parsing+0x18c>)
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff fcb6 	bl	800014c <strcmp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d123      	bne.n	800082e <command_parsing+0x106>
		printf(" Lock Door\r\n");
 80007e6:	4834      	ldr	r0, [pc, #208]	; (80008b8 <command_parsing+0x190>)
 80007e8:	f008 fc02 	bl	8008ff0 <puts>
		str_ptr = strtok(NULL, ",");
 80007ec:	4926      	ldr	r1, [pc, #152]	; (8000888 <command_parsing+0x160>)
 80007ee:	2000      	movs	r0, #0
 80007f0:	f008 fc26 	bl	8009040 <strtok>
 80007f4:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin(SOL_LOCK1_GPIO_Port, SOL_LOCK1_Pin, GPIO_PIN_RESET);  // lock SOL_LOCK1
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fc:	4829      	ldr	r0, [pc, #164]	; (80008a4 <command_parsing+0x17c>)
 80007fe:	f001 f954 	bl	8001aaa <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SOL_LOCK2_GPIO_Port, SOL_LOCK2_Pin, GPIO_PIN_RESET);  // lock SOL_LOCK2
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000808:	4826      	ldr	r0, [pc, #152]	; (80008a4 <command_parsing+0x17c>)
 800080a:	f001 f94e 	bl	8001aaa <HAL_GPIO_WritePin>
		strcpy(Bstate.lock, "1,");  // 占쏙옙占쏙옙 占쏙옙占쏙옙
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <command_parsing+0x180>)
 8000810:	4a2a      	ldr	r2, [pc, #168]	; (80008bc <command_parsing+0x194>)
 8000812:	8811      	ldrh	r1, [r2, #0]
 8000814:	7892      	ldrb	r2, [r2, #2]
 8000816:	8019      	strh	r1, [r3, #0]
 8000818:	709a      	strb	r2, [r3, #2]
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);	// LED2 On
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000820:	4823      	ldr	r0, [pc, #140]	; (80008b0 <command_parsing+0x188>)
 8000822:	f001 f942 	bl	8001aaa <HAL_GPIO_WritePin>
		Report_to_Server(REPORT_CMD);
 8000826:	2000      	movs	r0, #0
 8000828:	f000 f8ce 	bl	80009c8 <Report_to_Server>
}
 800082c:	e023      	b.n	8000876 <command_parsing+0x14e>
	} else if (!strcmp(str_ptr, "RS")) {
 800082e:	4924      	ldr	r1, [pc, #144]	; (80008c0 <command_parsing+0x198>)
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff fc8b 	bl	800014c <strcmp>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d11c      	bne.n	8000876 <command_parsing+0x14e>
		printf(" RFID Scanning\r\n");
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <command_parsing+0x19c>)
 800083e:	f008 fbd7 	bl	8008ff0 <puts>
		str_ptr = strtok(NULL, ",");
 8000842:	4911      	ldr	r1, [pc, #68]	; (8000888 <command_parsing+0x160>)
 8000844:	2000      	movs	r0, #0
 8000846:	f008 fbfb 	bl	8009040 <strtok>
 800084a:	6078      	str	r0, [r7, #4]
		if (str_ptr == '\0') {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d103      	bne.n	800085a <command_parsing+0x132>
			printf(" need more parameter!\r\n");
 8000852:	481d      	ldr	r0, [pc, #116]	; (80008c8 <command_parsing+0x1a0>)
 8000854:	f008 fbcc 	bl	8008ff0 <puts>
}
 8000858:	e00d      	b.n	8000876 <command_parsing+0x14e>
			printf(" speed:%s\r\n", str_ptr);
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	481b      	ldr	r0, [pc, #108]	; (80008cc <command_parsing+0x1a4>)
 800085e:	f008 fb41 	bl	8008ee4 <iprintf>
			Rfid_Scanning(atoi(str_ptr));
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f008 fb08 	bl	8008e78 <atoi>
 8000868:	4603      	mov	r3, r0
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f95e 	bl	8000b2c <Rfid_Scanning>
			Report_to_Server(REPORT_CMD);
 8000870:	2000      	movs	r0, #0
 8000872:	f000 f8a9 	bl	80009c8 <Report_to_Server>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	0800a580 	.word	0x0800a580
 8000884:	0800a584 	.word	0x0800a584
 8000888:	0800a554 	.word	0x0800a554
 800088c:	2000021b 	.word	0x2000021b
 8000890:	200002f4 	.word	0x200002f4
 8000894:	0800a59c 	.word	0x0800a59c
 8000898:	0800a5a0 	.word	0x0800a5a0
 800089c:	0800a5b0 	.word	0x0800a5b0
 80008a0:	0800a5b4 	.word	0x0800a5b4
 80008a4:	40010c00 	.word	0x40010c00
 80008a8:	2000000a 	.word	0x2000000a
 80008ac:	0800a5c4 	.word	0x0800a5c4
 80008b0:	40011000 	.word	0x40011000
 80008b4:	0800a5c8 	.word	0x0800a5c8
 80008b8:	0800a5cc 	.word	0x0800a5cc
 80008bc:	0800a5d8 	.word	0x0800a5d8
 80008c0:	0800a5dc 	.word	0x0800a5dc
 80008c4:	0800a5e0 	.word	0x0800a5e0
 80008c8:	0800a5f0 	.word	0x0800a5f0
 80008cc:	0800a608 	.word	0x0800a608

080008d0 <check_door>:

void check_door(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	door_check_enable = 0;
 80008d4:	4b31      	ldr	r3, [pc, #196]	; (800099c <check_door+0xcc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]

	if (HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin) == GPIO_PIN_SET)
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	4830      	ldr	r0, [pc, #192]	; (80009a0 <check_door+0xd0>)
 80008de:	f001 f8cd 	bl	8001a7c <HAL_GPIO_ReadPin>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d105      	bne.n	80008f4 <check_door+0x24>
		open_check++;   // open
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <check_door+0xd4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	4a2d      	ldr	r2, [pc, #180]	; (80009a4 <check_door+0xd4>)
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	e004      	b.n	80008fe <check_door+0x2e>
	else
		close_check++;  // close
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <check_door+0xd8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <check_door+0xd8>)
 80008fc:	6013      	str	r3, [r2, #0]

	if (door_check > 3) {  // 5 times when door_check is 0,1,2,3,4
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <check_door+0xdc>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b03      	cmp	r3, #3
 8000904:	dd43      	ble.n	800098e <check_door+0xbe>
		if (open_check > 3) { // open
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <check_door+0xd4>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b03      	cmp	r3, #3
 800090c:	dd18      	ble.n	8000940 <check_door+0x70>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000914:	4826      	ldr	r0, [pc, #152]	; (80009b0 <check_door+0xe0>)
 8000916:	f001 f8c8 	bl	8001aaa <HAL_GPIO_WritePin>
			if (!strcmp(Bstate.door, "1,")) {    // "1," == closed
 800091a:	4926      	ldr	r1, [pc, #152]	; (80009b4 <check_door+0xe4>)
 800091c:	4826      	ldr	r0, [pc, #152]	; (80009b8 <check_door+0xe8>)
 800091e:	f7ff fc15 	bl	800014c <strcmp>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d10b      	bne.n	8000940 <check_door+0x70>
				strcpy(Bstate.door, "0,");
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <check_door+0xe8>)
 800092a:	4a24      	ldr	r2, [pc, #144]	; (80009bc <check_door+0xec>)
 800092c:	8811      	ldrh	r1, [r2, #0]
 800092e:	7892      	ldrb	r2, [r2, #2]
 8000930:	8019      	strh	r1, [r3, #0]
 8000932:	709a      	strb	r2, [r3, #2]
				Report_to_Server(REPORT_DOOR);
 8000934:	2001      	movs	r0, #1
 8000936:	f000 f847 	bl	80009c8 <Report_to_Server>
				printf(" Door is opened!\r\n");
 800093a:	4821      	ldr	r0, [pc, #132]	; (80009c0 <check_door+0xf0>)
 800093c:	f008 fb58 	bl	8008ff0 <puts>
			}
		}
		if (close_check > 3) {  //close
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <check_door+0xd8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b03      	cmp	r3, #3
 8000946:	dd18      	ble.n	800097a <check_door+0xaa>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094e:	4818      	ldr	r0, [pc, #96]	; (80009b0 <check_door+0xe0>)
 8000950:	f001 f8ab 	bl	8001aaa <HAL_GPIO_WritePin>
			if (!strcmp(Bstate.door, "0,")) {	// "0," == opened
 8000954:	4919      	ldr	r1, [pc, #100]	; (80009bc <check_door+0xec>)
 8000956:	4818      	ldr	r0, [pc, #96]	; (80009b8 <check_door+0xe8>)
 8000958:	f7ff fbf8 	bl	800014c <strcmp>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10b      	bne.n	800097a <check_door+0xaa>
				strcpy(Bstate.door, "1,");
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <check_door+0xe8>)
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <check_door+0xe4>)
 8000966:	8811      	ldrh	r1, [r2, #0]
 8000968:	7892      	ldrb	r2, [r2, #2]
 800096a:	8019      	strh	r1, [r3, #0]
 800096c:	709a      	strb	r2, [r3, #2]
				Report_to_Server(REPORT_DOOR);
 800096e:	2001      	movs	r0, #1
 8000970:	f000 f82a 	bl	80009c8 <Report_to_Server>
				printf(" Door is closed!\r\n");
 8000974:	4813      	ldr	r0, [pc, #76]	; (80009c4 <check_door+0xf4>)
 8000976:	f008 fb3b 	bl	8008ff0 <puts>
			}
		}
		door_check = 0;
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <check_door+0xdc>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
		open_check = 0;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <check_door+0xd4>)
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
		close_check = 0;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <check_door+0xd8>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]

	} else
		door_check++;

}
 800098c:	e004      	b.n	8000998 <check_door+0xc8>
		door_check++;
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <check_door+0xdc>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a05      	ldr	r2, [pc, #20]	; (80009ac <check_door+0xdc>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000304 	.word	0x20000304
 80009a0:	40010c00 	.word	0x40010c00
 80009a4:	200002fc 	.word	0x200002fc
 80009a8:	200002f8 	.word	0x200002f8
 80009ac:	20000300 	.word	0x20000300
 80009b0:	40011000 	.word	0x40011000
 80009b4:	0800a5d8 	.word	0x0800a5d8
 80009b8:	20000005 	.word	0x20000005
 80009bc:	0800a5c4 	.word	0x0800a5c4
 80009c0:	0800a614 	.word	0x0800a614
 80009c4:	0800a628 	.word	0x0800a628

080009c8 <Report_to_Server>:
		PAD_boot_flag = 0;
	}
}
*/

void Report_to_Server(int report_path) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af04      	add	r7, sp, #16
 80009ce:	6078      	str	r0, [r7, #4]
	int total = 0, sum = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < 3; i++)
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	e00a      	b.n	80009f4 <Report_to_Server+0x2c>
		sum += Bstate.cmd[i];
 80009de:	4a48      	ldr	r2, [pc, #288]	; (8000b00 <Report_to_Server+0x138>)
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	4413      	add	r3, r2
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	4413      	add	r3, r2
 80009ec:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 3; i++)
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	3301      	adds	r3, #1
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	ddf1      	ble.n	80009de <Report_to_Server+0x16>

	for (int i = 0; i < 2; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	e01d      	b.n	8000a3c <Report_to_Server+0x74>
		sum += Bstate.door[i];
 8000a00:	4a3f      	ldr	r2, [pc, #252]	; (8000b00 <Report_to_Server+0x138>)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4413      	add	r3, r2
 8000a06:	3305      	adds	r3, #5
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	4413      	add	r3, r2
 8000a10:	617b      	str	r3, [r7, #20]
		sum += Bstate.lock[i];
 8000a12:	4a3b      	ldr	r2, [pc, #236]	; (8000b00 <Report_to_Server+0x138>)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	330a      	adds	r3, #10
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	4413      	add	r3, r2
 8000a22:	617b      	str	r3, [r7, #20]
		sum += Bstate.scan[i];
 8000a24:	4a36      	ldr	r2, [pc, #216]	; (8000b00 <Report_to_Server+0x138>)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4413      	add	r3, r2
 8000a2a:	330f      	adds	r3, #15
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	4413      	add	r3, r2
 8000a34:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 2; i++) {
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	ddde      	ble.n	8000a00 <Report_to_Server+0x38>
	}
	sum += Bstate.end[0];
 8000a42:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <Report_to_Server+0x138>)
 8000a44:	7d1b      	ldrb	r3, [r3, #20]
 8000a46:	461a      	mov	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	617b      	str	r3, [r7, #20]
	total = sum;
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	60bb      	str	r3, [r7, #8]
	total = total & 0xff;
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	60bb      	str	r3, [r7, #8]
	total = ~total + 1;
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	425b      	negs	r3, r3
 8000a5c:	60bb      	str	r3, [r7, #8]

	sprintf(Txbuffer, "%s%s%s%s%s", Bstate.cmd, Bstate.door, Bstate.lock, Bstate.scan, Bstate.end);
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <Report_to_Server+0x13c>)
 8000a60:	9302      	str	r3, [sp, #8]
 8000a62:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <Report_to_Server+0x140>)
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <Report_to_Server+0x144>)
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <Report_to_Server+0x148>)
 8000a6c:	4a24      	ldr	r2, [pc, #144]	; (8000b00 <Report_to_Server+0x138>)
 8000a6e:	4929      	ldr	r1, [pc, #164]	; (8000b14 <Report_to_Server+0x14c>)
 8000a70:	4829      	ldr	r0, [pc, #164]	; (8000b18 <Report_to_Server+0x150>)
 8000a72:	f008 fac5 	bl	8009000 <siprintf>
	printf(" Txbuffer: %s\r\n", Txbuffer);
 8000a76:	4928      	ldr	r1, [pc, #160]	; (8000b18 <Report_to_Server+0x150>)
 8000a78:	4828      	ldr	r0, [pc, #160]	; (8000b1c <Report_to_Server+0x154>)
 8000a7a:	f008 fa33 	bl	8008ee4 <iprintf>

	Txbuffer[10] = total;	//checksum by psh
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <Report_to_Server+0x150>)
 8000a84:	729a      	strb	r2, [r3, #10]


	if (report_path == REPORT_CMD) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d11d      	bne.n	8000ac8 <Report_to_Server+0x100>
		if (Rxcplt_flag == 1) {
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <Report_to_Server+0x158>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d10b      	bne.n	8000aac <Report_to_Server+0xe4>
			HAL_UART_Transmit(&COMMPORT, (uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer), 0xFFFFFFFF);
 8000a94:	4820      	ldr	r0, [pc, #128]	; (8000b18 <Report_to_Server+0x150>)
 8000a96:	f7ff fb63 	bl	8000160 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	491d      	ldr	r1, [pc, #116]	; (8000b18 <Report_to_Server+0x150>)
 8000aa4:	481f      	ldr	r0, [pc, #124]	; (8000b24 <Report_to_Server+0x15c>)
 8000aa6:	f003 fd12 	bl	80044ce <HAL_UART_Transmit>
	 } else if(report_path == REPORT_DOOR) {
	 CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t)strlen(Txbuffer));
	 HAL_UART_Transmit(&COMMPORT, (uint8_t *)Txbuffer, (uint16_t)strlen(Txbuffer), 0xFFFFFFFF);
	 }
	 */
}
 8000aaa:	e024      	b.n	8000af6 <Report_to_Server+0x12e>
		} else if (CDC_flag == 1) {
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <Report_to_Server+0x160>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d120      	bne.n	8000af6 <Report_to_Server+0x12e>
			CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer));
 8000ab4:	4818      	ldr	r0, [pc, #96]	; (8000b18 <Report_to_Server+0x150>)
 8000ab6:	f7ff fb53 	bl	8000160 <strlen>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4815      	ldr	r0, [pc, #84]	; (8000b18 <Report_to_Server+0x150>)
 8000ac2:	f007 fdfb 	bl	80086bc <CDC_Transmit_FS>
}
 8000ac6:	e016      	b.n	8000af6 <Report_to_Server+0x12e>
	} else if (report_path == REPORT_DOOR) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d113      	bne.n	8000af6 <Report_to_Server+0x12e>
		CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer));
 8000ace:	4812      	ldr	r0, [pc, #72]	; (8000b18 <Report_to_Server+0x150>)
 8000ad0:	f7ff fb46 	bl	8000160 <strlen>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480f      	ldr	r0, [pc, #60]	; (8000b18 <Report_to_Server+0x150>)
 8000adc:	f007 fdee 	bl	80086bc <CDC_Transmit_FS>
		HAL_UART_Transmit(&COMMPORT, (uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer), 0xFFFFFFFF);
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <Report_to_Server+0x150>)
 8000ae2:	f7ff fb3d 	bl	8000160 <strlen>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	490a      	ldr	r1, [pc, #40]	; (8000b18 <Report_to_Server+0x150>)
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <Report_to_Server+0x15c>)
 8000af2:	f003 fcec 	bl	80044ce <HAL_UART_Transmit>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000014 	.word	0x20000014
 8000b08:	2000000f 	.word	0x2000000f
 8000b0c:	2000000a 	.word	0x2000000a
 8000b10:	20000005 	.word	0x20000005
 8000b14:	0800a63c 	.word	0x0800a63c
 8000b18:	200002e4 	.word	0x200002e4
 8000b1c:	0800a648 	.word	0x0800a648
 8000b20:	20000219 	.word	0x20000219
 8000b24:	2000060c 	.word	0x2000060c
 8000b28:	2000021a 	.word	0x2000021a

08000b2c <Rfid_Scanning>:

void Rfid_Scanning(int speed) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	// uint8_t i = 0;

	printf(" scanning...... \r\n");
 8000b34:	489b      	ldr	r0, [pc, #620]	; (8000da4 <Rfid_Scanning+0x278>)
 8000b36:	f008 fa5b 	bl	8008ff0 <puts>

	strcpy(Bstate.scan, "1,");
 8000b3a:	4b9b      	ldr	r3, [pc, #620]	; (8000da8 <Rfid_Scanning+0x27c>)
 8000b3c:	4a9b      	ldr	r2, [pc, #620]	; (8000dac <Rfid_Scanning+0x280>)
 8000b3e:	8811      	ldrh	r1, [r2, #0]
 8000b40:	7892      	ldrb	r2, [r2, #2]
 8000b42:	8019      	strh	r1, [r3, #0]
 8000b44:	709a      	strb	r2, [r3, #2]
	Report_to_Server(REPORT_CMD);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff ff3e 	bl	80009c8 <Report_to_Server>


	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);		// SCAN LED ON
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b52:	4897      	ldr	r0, [pc, #604]	; (8000db0 <Rfid_Scanning+0x284>)
 8000b54:	f000 ffa9 	bl	8001aaa <HAL_GPIO_WritePin>

	time_second = 0;
 8000b58:	4b96      	ldr	r3, [pc, #600]	; (8000db4 <Rfid_Scanning+0x288>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
	if(speed != 0) {  // first normal scanning
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d066      	beq.n	8000c32 <Rfid_Scanning+0x106>
		HAL_Delay(2000);		// wait 2s for operating RFID Reader
 8000b64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b68:	f000 fc5c 	bl	8001424 <HAL_Delay>
		HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_RESET);	// CW(UP) direction
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4891      	ldr	r0, [pc, #580]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000b72:	f000 ff9a 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000b76:	200a      	movs	r0, #10
 8000b78:	f000 fc54 	bl	8001424 <HAL_Delay>
		HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_RESET);  // AC Motor Power on
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2101      	movs	r1, #1
 8000b80:	488d      	ldr	r0, [pc, #564]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000b82:	f000 ff92 	bl	8001aaa <HAL_GPIO_WritePin>
		while((HAL_GPIO_ReadPin(EI5_TLIMIT_GPIO_Port, EI5_TLIMIT_Pin) == GPIO_PIN_SET) && time_second < 20);		// Top position?
 8000b86:	bf00      	nop
 8000b88:	2120      	movs	r1, #32
 8000b8a:	488c      	ldr	r0, [pc, #560]	; (8000dbc <Rfid_Scanning+0x290>)
 8000b8c:	f000 ff76 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d103      	bne.n	8000b9e <Rfid_Scanning+0x72>
 8000b96:	4b87      	ldr	r3, [pc, #540]	; (8000db4 <Rfid_Scanning+0x288>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b13      	cmp	r3, #19
 8000b9c:	ddf4      	ble.n	8000b88 <Rfid_Scanning+0x5c>


		HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);	// AC Motor Power off
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4885      	ldr	r0, [pc, #532]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000ba4:	f000 ff81 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000ba8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bac:	f000 fc3a 	bl	8001424 <HAL_Delay>
		HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_RESET);  // AC Motor Power on
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4880      	ldr	r0, [pc, #512]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000bb6:	f000 ff78 	bl	8001aaa <HAL_GPIO_WritePin>
		while((HAL_GPIO_ReadPin(EI5_TLIMIT_GPIO_Port, EI5_TLIMIT_Pin) == GPIO_PIN_SET) && time_second < 20);		// Top position?
 8000bba:	bf00      	nop
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	487f      	ldr	r0, [pc, #508]	; (8000dbc <Rfid_Scanning+0x290>)
 8000bc0:	f000 ff5c 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d103      	bne.n	8000bd2 <Rfid_Scanning+0xa6>
 8000bca:	4b7a      	ldr	r3, [pc, #488]	; (8000db4 <Rfid_Scanning+0x288>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b13      	cmp	r3, #19
 8000bd0:	ddf4      	ble.n	8000bbc <Rfid_Scanning+0x90>

		HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);	// AC Motor Power off
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4878      	ldr	r0, [pc, #480]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000bd8:	f000 ff67 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f000 fc21 	bl	8001424 <HAL_Delay>
		HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_SET);	// CCW(DOWN) direction
 8000be2:	2201      	movs	r2, #1
 8000be4:	2102      	movs	r1, #2
 8000be6:	4874      	ldr	r0, [pc, #464]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000be8:	f000 ff5f 	bl	8001aaa <HAL_GPIO_WritePin>
		HAL_Delay(1000);													// delay 3s --> 1.5s
 8000bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf0:	f000 fc18 	bl	8001424 <HAL_Delay>
		HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_RESET);  // AC Motor Power on
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	486f      	ldr	r0, [pc, #444]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000bfa:	f000 ff56 	bl	8001aaa <HAL_GPIO_WritePin>


		while((HAL_GPIO_ReadPin(EI3_BLIMIT_GPIO_Port, EI3_BLIMIT_Pin) == GPIO_PIN_SET) && time_second < 20);		// Bottom position
 8000bfe:	bf00      	nop
 8000c00:	2108      	movs	r1, #8
 8000c02:	486e      	ldr	r0, [pc, #440]	; (8000dbc <Rfid_Scanning+0x290>)
 8000c04:	f000 ff3a 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d103      	bne.n	8000c16 <Rfid_Scanning+0xea>
 8000c0e:	4b69      	ldr	r3, [pc, #420]	; (8000db4 <Rfid_Scanning+0x288>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b13      	cmp	r3, #19
 8000c14:	ddf4      	ble.n	8000c00 <Rfid_Scanning+0xd4>

		HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);	// AC Motor Power off
 8000c16:	2201      	movs	r2, #1
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4867      	ldr	r0, [pc, #412]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000c1c:	f000 ff45 	bl	8001aaa <HAL_GPIO_WritePin>


		HAL_Delay(10);
 8000c20:	200a      	movs	r0, #10
 8000c22:	f000 fbff 	bl	8001424 <HAL_Delay>
		HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_RESET);	// CW(UP) direction
 8000c26:	2200      	movs	r2, #0
 8000c28:	2102      	movs	r1, #2
 8000c2a:	4863      	ldr	r0, [pc, #396]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000c2c:	f000 ff3d 	bl	8001aaa <HAL_GPIO_WritePin>
 8000c30:	e09d      	b.n	8000d6e <Rfid_Scanning+0x242>

	} else {	// end of if(speed != 0)

			printf(" retrying scan in slow speed %d ...... \r\n", speed);		// retrying scan in slow speed
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	4862      	ldr	r0, [pc, #392]	; (8000dc0 <Rfid_Scanning+0x294>)
 8000c36:	f008 f955 	bl	8008ee4 <iprintf>
			HAL_Delay(3000);		// wait 3s for operating RFID Reader
 8000c3a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c3e:	f000 fbf1 	bl	8001424 <HAL_Delay>
			HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_RESET);	// CW(UP) direction
 8000c42:	2200      	movs	r2, #0
 8000c44:	2102      	movs	r1, #2
 8000c46:	485c      	ldr	r0, [pc, #368]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000c48:	f000 ff2f 	bl	8001aaa <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000c4c:	200a      	movs	r0, #10
 8000c4e:	f000 fbe9 	bl	8001424 <HAL_Delay>
			HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_RESET);  // AC Motor Power on
 8000c52:	2200      	movs	r2, #0
 8000c54:	2101      	movs	r1, #1
 8000c56:	4858      	ldr	r0, [pc, #352]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000c58:	f000 ff27 	bl	8001aaa <HAL_GPIO_WritePin>
			while((HAL_GPIO_ReadPin(EI5_TLIMIT_GPIO_Port, EI5_TLIMIT_Pin) == GPIO_PIN_SET) && time_second < 20);		// Top position?
 8000c5c:	bf00      	nop
 8000c5e:	2120      	movs	r1, #32
 8000c60:	4856      	ldr	r0, [pc, #344]	; (8000dbc <Rfid_Scanning+0x290>)
 8000c62:	f000 ff0b 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d103      	bne.n	8000c74 <Rfid_Scanning+0x148>
 8000c6c:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <Rfid_Scanning+0x288>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b13      	cmp	r3, #19
 8000c72:	ddf4      	ble.n	8000c5e <Rfid_Scanning+0x132>



			HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);	// AC Motor Power off
 8000c74:	2201      	movs	r2, #1
 8000c76:	2101      	movs	r1, #1
 8000c78:	484f      	ldr	r0, [pc, #316]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000c7a:	f000 ff16 	bl	8001aaa <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000c7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c82:	f000 fbcf 	bl	8001424 <HAL_Delay>
			HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_RESET);  // AC Motor Power on
 8000c86:	2200      	movs	r2, #0
 8000c88:	2101      	movs	r1, #1
 8000c8a:	484b      	ldr	r0, [pc, #300]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000c8c:	f000 ff0d 	bl	8001aaa <HAL_GPIO_WritePin>
			while((HAL_GPIO_ReadPin(EI5_TLIMIT_GPIO_Port, EI5_TLIMIT_Pin) == GPIO_PIN_SET) && time_second < 20);		// Top position?
 8000c90:	bf00      	nop
 8000c92:	2120      	movs	r1, #32
 8000c94:	4849      	ldr	r0, [pc, #292]	; (8000dbc <Rfid_Scanning+0x290>)
 8000c96:	f000 fef1 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d103      	bne.n	8000ca8 <Rfid_Scanning+0x17c>
 8000ca0:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <Rfid_Scanning+0x288>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b13      	cmp	r3, #19
 8000ca6:	ddf4      	ble.n	8000c92 <Rfid_Scanning+0x166>

			HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);	// AC Motor Power off
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2101      	movs	r1, #1
 8000cac:	4842      	ldr	r0, [pc, #264]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000cae:	f000 fefc 	bl	8001aaa <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb6:	f000 fbb5 	bl	8001424 <HAL_Delay>
			HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_RESET);  // AC Motor Power on
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	483e      	ldr	r0, [pc, #248]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000cc0:	f000 fef3 	bl	8001aaa <HAL_GPIO_WritePin>
			while((HAL_GPIO_ReadPin(EI5_TLIMIT_GPIO_Port, EI5_TLIMIT_Pin) == GPIO_PIN_SET) && time_second < 20);		// Top position?
 8000cc4:	bf00      	nop
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	483c      	ldr	r0, [pc, #240]	; (8000dbc <Rfid_Scanning+0x290>)
 8000cca:	f000 fed7 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d103      	bne.n	8000cdc <Rfid_Scanning+0x1b0>
 8000cd4:	4b37      	ldr	r3, [pc, #220]	; (8000db4 <Rfid_Scanning+0x288>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b13      	cmp	r3, #19
 8000cda:	ddf4      	ble.n	8000cc6 <Rfid_Scanning+0x19a>

			HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);	// AC Motor Power off
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2101      	movs	r1, #1
 8000ce0:	4835      	ldr	r0, [pc, #212]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000ce2:	f000 fee2 	bl	8001aaa <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8000ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cea:	f000 fb9b 	bl	8001424 <HAL_Delay>
			HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_RESET);  // AC Motor Power on
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4831      	ldr	r0, [pc, #196]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000cf4:	f000 fed9 	bl	8001aaa <HAL_GPIO_WritePin>
			while((HAL_GPIO_ReadPin(EI5_TLIMIT_GPIO_Port, EI5_TLIMIT_Pin) == GPIO_PIN_SET) && time_second < 20);		// Top position?
 8000cf8:	bf00      	nop
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	482f      	ldr	r0, [pc, #188]	; (8000dbc <Rfid_Scanning+0x290>)
 8000cfe:	f000 febd 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d103      	bne.n	8000d10 <Rfid_Scanning+0x1e4>
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <Rfid_Scanning+0x288>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b13      	cmp	r3, #19
 8000d0e:	ddf4      	ble.n	8000cfa <Rfid_Scanning+0x1ce>



			HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);	// AC Motor Power off
 8000d10:	2201      	movs	r2, #1
 8000d12:	2101      	movs	r1, #1
 8000d14:	4828      	ldr	r0, [pc, #160]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000d16:	f000 fec8 	bl	8001aaa <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8000d1a:	200a      	movs	r0, #10
 8000d1c:	f000 fb82 	bl	8001424 <HAL_Delay>
			HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_SET);	// CCW(DOWN) direction
 8000d20:	2201      	movs	r2, #1
 8000d22:	2102      	movs	r1, #2
 8000d24:	4824      	ldr	r0, [pc, #144]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000d26:	f000 fec0 	bl	8001aaa <HAL_GPIO_WritePin>
			HAL_Delay(1000);													// delay 1s
 8000d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2e:	f000 fb79 	bl	8001424 <HAL_Delay>
			HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_RESET);  // AC Motor Power on
 8000d32:	2200      	movs	r2, #0
 8000d34:	2101      	movs	r1, #1
 8000d36:	4820      	ldr	r0, [pc, #128]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000d38:	f000 feb7 	bl	8001aaa <HAL_GPIO_WritePin>


			while((HAL_GPIO_ReadPin(EI3_BLIMIT_GPIO_Port, EI3_BLIMIT_Pin) == GPIO_PIN_SET) && time_second < 20);		// Bottom position
 8000d3c:	bf00      	nop
 8000d3e:	2108      	movs	r1, #8
 8000d40:	481e      	ldr	r0, [pc, #120]	; (8000dbc <Rfid_Scanning+0x290>)
 8000d42:	f000 fe9b 	bl	8001a7c <HAL_GPIO_ReadPin>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d103      	bne.n	8000d54 <Rfid_Scanning+0x228>
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <Rfid_Scanning+0x288>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b13      	cmp	r3, #19
 8000d52:	ddf4      	ble.n	8000d3e <Rfid_Scanning+0x212>

			HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);	// AC Motor Power off
 8000d54:	2201      	movs	r2, #1
 8000d56:	2101      	movs	r1, #1
 8000d58:	4817      	ldr	r0, [pc, #92]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000d5a:	f000 fea6 	bl	8001aaa <HAL_GPIO_WritePin>


			HAL_Delay(10);
 8000d5e:	200a      	movs	r0, #10
 8000d60:	f000 fb60 	bl	8001424 <HAL_Delay>
			HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_RESET);	// CW(UP) direction
 8000d64:	2200      	movs	r2, #0
 8000d66:	2102      	movs	r1, #2
 8000d68:	4813      	ldr	r0, [pc, #76]	; (8000db8 <Rfid_Scanning+0x28c>)
 8000d6a:	f000 fe9e 	bl	8001aaa <HAL_GPIO_WritePin>

	}


	if(time_second <= 20 ) {
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <Rfid_Scanning+0x288>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b14      	cmp	r3, #20
 8000d74:	dc0f      	bgt.n	8000d96 <Rfid_Scanning+0x26a>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);		// SCAN LED Off
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <Rfid_Scanning+0x284>)
 8000d7e:	f000 fe94 	bl	8001aaa <HAL_GPIO_WritePin>
		strcpy(Bstate.scan, "0,");  // end of scan
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <Rfid_Scanning+0x27c>)
 8000d84:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <Rfid_Scanning+0x298>)
 8000d86:	8811      	ldrh	r1, [r2, #0]
 8000d88:	7892      	ldrb	r2, [r2, #2]
 8000d8a:	8019      	strh	r1, [r3, #0]
 8000d8c:	709a      	strb	r2, [r3, #2]
		printf(" scan is completed!!\r\n");
 8000d8e:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <Rfid_Scanning+0x29c>)
 8000d90:	f008 f92e 	bl	8008ff0 <puts>
	{
		// strcpy(Bstate.scan, "1,");  // Motor operation is fail
		printf(" Motor operation is fail!!\r\n");
		// while(1);
	}
}
 8000d94:	e002      	b.n	8000d9c <Rfid_Scanning+0x270>
		printf(" Motor operation is fail!!\r\n");
 8000d96:	480d      	ldr	r0, [pc, #52]	; (8000dcc <Rfid_Scanning+0x2a0>)
 8000d98:	f008 f92a 	bl	8008ff0 <puts>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	0800a658 	.word	0x0800a658
 8000da8:	2000000f 	.word	0x2000000f
 8000dac:	0800a5d8 	.word	0x0800a5d8
 8000db0:	40011000 	.word	0x40011000
 8000db4:	200002f0 	.word	0x200002f0
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	40010c00 	.word	0x40010c00
 8000dc0:	0800a66c 	.word	0x0800a66c
 8000dc4:	0800a5c4 	.word	0x0800a5c4
 8000dc8:	0800a698 	.word	0x0800a698
 8000dcc:	0800a6b0 	.word	0x0800a6b0

08000dd0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	// printf("RxINT_Routine");

	if (huart->Instance == COMMUART) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <HAL_UART_RxCpltCallback+0x64>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d124      	bne.n	8000e2c <HAL_UART_RxCpltCallback+0x5c>
		if (COMMDATA == EOT) {
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_RxCpltCallback+0x68>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b0d      	cmp	r3, #13
 8000de8:	d10c      	bne.n	8000e04 <HAL_UART_RxCpltCallback+0x34>
			Rxbuffer[buf_index] = '\0';
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_UART_RxCpltCallback+0x6c>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_UART_RxCpltCallback+0x70>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	5499      	strb	r1, [r3, r2]
			buf_index = 0;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_UART_RxCpltCallback+0x6c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
			Rxcplt_flag = 1;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_UART_RxCpltCallback+0x74>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e00e      	b.n	8000e22 <HAL_UART_RxCpltCallback+0x52>
		} else if (COMMDATA != 0x00) {			// except NULL(0x00)
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_UART_RxCpltCallback+0x68>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00a      	beq.n	8000e22 <HAL_UART_RxCpltCallback+0x52>
			Rxbuffer[buf_index++] = COMMDATA;
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_UART_RxCpltCallback+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	1c5a      	adds	r2, r3, #1
 8000e12:	b2d1      	uxtb	r1, r2
 8000e14:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <HAL_UART_RxCpltCallback+0x6c>)
 8000e16:	7011      	strb	r1, [r2, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_UART_RxCpltCallback+0x68>)
 8000e1c:	7819      	ldrb	r1, [r3, #0]
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_UART_RxCpltCallback+0x70>)
 8000e20:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&COMMPORT, &COMMDATA, 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	4904      	ldr	r1, [pc, #16]	; (8000e38 <HAL_UART_RxCpltCallback+0x68>)
 8000e26:	4808      	ldr	r0, [pc, #32]	; (8000e48 <HAL_UART_RxCpltCallback+0x78>)
 8000e28:	f003 fbe3 	bl	80045f2 <HAL_UART_Receive_IT>

	}
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40004400 	.word	0x40004400
 8000e38:	20000580 	.word	0x20000580
 8000e3c:	20000218 	.word	0x20000218
 8000e40:	20000280 	.word	0x20000280
 8000e44:	20000219 	.word	0x20000219
 8000e48:	2000060c 	.word	0x2000060c

08000e4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
		time_second++;
		// HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		// printf(" alive_call_fail: %d,  time: %d\r\n", alive_call_fail, time_second);
		// CDC_Transmit_FS("CDC_TX test...\r\n", sizeof("CDC_TX test...\r\n"));  // test only
	} */
	if (htim->Instance == TIM4) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10a      	bne.n	8000e74 <HAL_TIM_PeriodElapsedCallback+0x28>
		time_second++;
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e66:	6013      	str	r3, [r2, #0]
		printf(" current time: %d\r\n", time_second);
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e70:	f008 f838 	bl	8008ee4 <iprintf>

	}

	if (htim->Instance == TIM3) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d102      	bne.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x38>
		door_check_enable = 1;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
	}
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40000800 	.word	0x40000800
 8000e90:	200002f0 	.word	0x200002f0
 8000e94:	0800a6cc 	.word	0x0800a6cc
 8000e98:	40000400 	.word	0x40000400
 8000e9c:	20000304 	.word	0x20000304

08000ea0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EI5_TLIMIT_Pin) {
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	2b20      	cmp	r3, #32
 8000eae:	d102      	bne.n	8000eb6 <HAL_GPIO_EXTI_Callback+0x16>
		printf("TLIMIT click!!!\r\n");
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000eb2:	f008 f89d 	bl	8008ff0 <puts>
	 }

	if(GPIO_Pin == EI3_BLIMIT_Pin) {
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d102      	bne.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x22>
		printf("BLIMIT click!!!\r\n");
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x30>)
 8000ebe:	f008 f897 	bl	8008ff0 <puts>
	 }

}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	0800a6e0 	.word	0x0800a6e0
 8000ed0:	0800a6f4 	.word	0x0800a6f4

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_MspInit+0x5c>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_MspInit+0x5c>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6193      	str	r3, [r2, #24]
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_MspInit+0x5c>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_MspInit+0x5c>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_MspInit+0x5c>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	61d3      	str	r3, [r2, #28]
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_MspInit+0x5c>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_MspInit+0x60>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_MspInit+0x60>)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000

08000f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1a      	ldr	r2, [pc, #104]	; (8000fbc <HAL_TIM_Base_MspInit+0x78>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d114      	bne.n	8000f80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a19      	ldr	r2, [pc, #100]	; (8000fc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	201d      	movs	r0, #29
 8000f74:	f000 fb51 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f78:	201d      	movs	r0, #29
 8000f7a:	f000 fb6a 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f7e:	e018      	b.n	8000fb2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <HAL_TIM_Base_MspInit+0x80>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d113      	bne.n	8000fb2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_TIM_Base_MspInit+0x7c>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	201e      	movs	r0, #30
 8000fa8:	f000 fb37 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fac:	201e      	movs	r0, #30
 8000fae:	f000 fb50 	bl	8001652 <HAL_NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40000400 	.word	0x40000400
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40000800 	.word	0x40000800

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a3f      	ldr	r2, [pc, #252]	; (80010e0 <HAL_UART_MspInit+0x118>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d13a      	bne.n	800105e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe8:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a3d      	ldr	r2, [pc, #244]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a37      	ldr	r2, [pc, #220]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	4619      	mov	r1, r3
 800102c:	482e      	ldr	r0, [pc, #184]	; (80010e8 <HAL_UART_MspInit+0x120>)
 800102e:	f000 fba1 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4619      	mov	r1, r3
 8001046:	4828      	ldr	r0, [pc, #160]	; (80010e8 <HAL_UART_MspInit+0x120>)
 8001048:	f000 fb94 	bl	8001774 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2025      	movs	r0, #37	; 0x25
 8001052:	f000 fae2 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001056:	2025      	movs	r0, #37	; 0x25
 8001058:	f000 fafb 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800105c:	e03c      	b.n	80010d8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a22      	ldr	r2, [pc, #136]	; (80010ec <HAL_UART_MspInit+0x124>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d137      	bne.n	80010d8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 800106e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001072:	61d3      	str	r3, [r2, #28]
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_UART_MspInit+0x11c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001098:	2304      	movs	r3, #4
 800109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4619      	mov	r1, r3
 80010aa:	480f      	ldr	r0, [pc, #60]	; (80010e8 <HAL_UART_MspInit+0x120>)
 80010ac:	f000 fb62 	bl	8001774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010b0:	2308      	movs	r3, #8
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4809      	ldr	r0, [pc, #36]	; (80010e8 <HAL_UART_MspInit+0x120>)
 80010c4:	f000 fb56 	bl	8001774 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2026      	movs	r0, #38	; 0x26
 80010ce:	f000 faa4 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d2:	2026      	movs	r0, #38	; 0x26
 80010d4:	f000 fabd 	bl	8001652 <HAL_NVIC_EnableIRQ>
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40004400 	.word	0x40004400

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001136:	f000 f959 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}

0800113e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001142:	2008      	movs	r0, #8
 8001144:	f000 fcca 	bl	8001adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001152:	f000 fe0c 	bl	8001d6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200012e4 	.word	0x200012e4

08001160 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001164:	2020      	movs	r0, #32
 8001166:	f000 fcb9 	bl	8001adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <TIM3_IRQHandler+0x10>)
 8001176:	f002 fe05 	bl	8003d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000584 	.word	0x20000584

08001184 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM4_IRQHandler+0x10>)
 800118a:	f002 fdfb 	bl	8003d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000538 	.word	0x20000538

08001198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <USART1_IRQHandler+0x10>)
 800119e:	f003 fa7d 	bl	800469c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200005cc 	.word	0x200005cc

080011ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <USART2_IRQHandler+0x10>)
 80011b2:	f003 fa73 	bl	800469c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000060c 	.word	0x2000060c

080011c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	return 1;
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <_kill>:

int _kill(int pid, int sig)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011d8:	f007 fe52 	bl	8008e80 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	2216      	movs	r2, #22
 80011e0:	601a      	str	r2, [r3, #0]
	return -1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_exit>:

void _exit (int status)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011f6:	f04f 31ff 	mov.w	r1, #4294967295
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffe7 	bl	80011ce <_kill>
	while (1) {}		/* Make sure we hang here */
 8001200:	e7fe      	b.n	8001200 <_exit+0x12>

08001202 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	e00a      	b.n	800122a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001214:	f3af 8000 	nop.w
 8001218:	4601      	mov	r1, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	b2ca      	uxtb	r2, r1
 8001222:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbf0      	blt.n	8001214 <_read+0x12>
	}

return len;
 8001232:	687b      	ldr	r3, [r7, #4]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_close>:
	}
	return len;
}

int _close(int file)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	return -1;
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001262:	605a      	str	r2, [r3, #4]
	return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <_isatty>:

int _isatty(int file)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f007 fdd8 	bl	8008e80 <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20005000 	.word	0x20005000
 80012fc:	00000400 	.word	0x00000400
 8001300:	20000308 	.word	0x20000308
 8001304:	200015e0 	.word	0x200015e0

08001308 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001314:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001316:	e003      	b.n	8001320 <LoopCopyDataInit>

08001318 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800131a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800131c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800131e:	3104      	adds	r1, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001320:	480a      	ldr	r0, [pc, #40]	; (800134c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001324:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001326:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001328:	d3f6      	bcc.n	8001318 <CopyDataInit>
  ldr r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800132c:	e002      	b.n	8001334 <LoopFillZerobss>

0800132e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001330:	f842 3b04 	str.w	r3, [r2], #4

08001334 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001336:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001338:	d3f9      	bcc.n	800132e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800133a:	f7ff ffe5 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133e:	f007 fda5 	bl	8008e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001342:	f7fe ff2b 	bl	800019c <main>
  bx lr
 8001346:	4770      	bx	lr
  ldr r3, =_sidata
 8001348:	0800a9d0 	.word	0x0800a9d0
  ldr r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001350:	200001fc 	.word	0x200001fc
  ldr r2, =_sbss
 8001354:	200001fc 	.word	0x200001fc
  ldr r3, = _ebss
 8001358:	200015e0 	.word	0x200015e0

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_Init+0x28>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_Init+0x28>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f947 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	2000      	movs	r0, #0
 8001378:	f000 f808 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff fdb0 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_InitTick+0x54>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f95f 	bl	800166e <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 f927 	bl	800161a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <HAL_InitTick+0x5c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000001c 	.word	0x2000001c
 80013e4:	20000024 	.word	0x20000024
 80013e8:	20000020 	.word	0x20000020

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_IncTick+0x1c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x20>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_IncTick+0x20>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000024 	.word	0x20000024
 800140c:	2000064c 	.word	0x2000064c

08001410 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <HAL_GetTick+0x10>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	2000064c 	.word	0x2000064c

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff fff0 	bl	8001410 <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_Delay+0x44>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffe0 	bl	8001410 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000024 	.word	0x20000024

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4906      	ldr	r1, [pc, #24]	; (8001504 <__NVIC_EnableIRQ+0x34>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff90 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff2d 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff42 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff90 	bl	800155c <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5f 	bl	8001508 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff35 	bl	80014d0 <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa2 	bl	80015c0 <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800169a:	2b02      	cmp	r3, #2
 800169c:	d005      	beq.n	80016aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2204      	movs	r2, #4
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e051      	b.n	800174e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 020e 	bic.w	r2, r2, #14
 80016b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0201 	bic.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_DMA_Abort_IT+0xd0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d029      	beq.n	8001728 <HAL_DMA_Abort_IT+0xa0>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <HAL_DMA_Abort_IT+0xd4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d022      	beq.n	8001724 <HAL_DMA_Abort_IT+0x9c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_DMA_Abort_IT+0xd8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d01a      	beq.n	800171e <HAL_DMA_Abort_IT+0x96>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_DMA_Abort_IT+0xdc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d012      	beq.n	8001718 <HAL_DMA_Abort_IT+0x90>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_DMA_Abort_IT+0xe0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00a      	beq.n	8001712 <HAL_DMA_Abort_IT+0x8a>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1a      	ldr	r2, [pc, #104]	; (800176c <HAL_DMA_Abort_IT+0xe4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d102      	bne.n	800170c <HAL_DMA_Abort_IT+0x84>
 8001706:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800170a:	e00e      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 800170c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001710:	e00b      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001716:	e008      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171c:	e005      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 800171e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001722:	e002      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001724:	2310      	movs	r3, #16
 8001726:	e000      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001728:	2301      	movs	r3, #1
 800172a:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_DMA_Abort_IT+0xe8>)
 800172c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	4798      	blx	r3
    } 
  }
  return status;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020008 	.word	0x40020008
 800175c:	4002001c 	.word	0x4002001c
 8001760:	40020030 	.word	0x40020030
 8001764:	40020044 	.word	0x40020044
 8001768:	40020058 	.word	0x40020058
 800176c:	4002006c 	.word	0x4002006c
 8001770:	40020000 	.word	0x40020000

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b08b      	sub	sp, #44	; 0x2c
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	e169      	b.n	8001a5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001788:	2201      	movs	r2, #1
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8158 	bne.w	8001a56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4a9a      	ldr	r2, [pc, #616]	; (8001a14 <HAL_GPIO_Init+0x2a0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d05e      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017b0:	4a98      	ldr	r2, [pc, #608]	; (8001a14 <HAL_GPIO_Init+0x2a0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d875      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017b6:	4a98      	ldr	r2, [pc, #608]	; (8001a18 <HAL_GPIO_Init+0x2a4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d058      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017bc:	4a96      	ldr	r2, [pc, #600]	; (8001a18 <HAL_GPIO_Init+0x2a4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d86f      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017c2:	4a96      	ldr	r2, [pc, #600]	; (8001a1c <HAL_GPIO_Init+0x2a8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d052      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017c8:	4a94      	ldr	r2, [pc, #592]	; (8001a1c <HAL_GPIO_Init+0x2a8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d869      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017ce:	4a94      	ldr	r2, [pc, #592]	; (8001a20 <HAL_GPIO_Init+0x2ac>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d04c      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017d4:	4a92      	ldr	r2, [pc, #584]	; (8001a20 <HAL_GPIO_Init+0x2ac>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d863      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017da:	4a92      	ldr	r2, [pc, #584]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d046      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017e0:	4a90      	ldr	r2, [pc, #576]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d85d      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d82a      	bhi.n	8001840 <HAL_GPIO_Init+0xcc>
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d859      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017ee:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <HAL_GPIO_Init+0x80>)
 80017f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	08001849 	.word	0x08001849
 80017fc:	0800185b 	.word	0x0800185b
 8001800:	0800189d 	.word	0x0800189d
 8001804:	080018a3 	.word	0x080018a3
 8001808:	080018a3 	.word	0x080018a3
 800180c:	080018a3 	.word	0x080018a3
 8001810:	080018a3 	.word	0x080018a3
 8001814:	080018a3 	.word	0x080018a3
 8001818:	080018a3 	.word	0x080018a3
 800181c:	080018a3 	.word	0x080018a3
 8001820:	080018a3 	.word	0x080018a3
 8001824:	080018a3 	.word	0x080018a3
 8001828:	080018a3 	.word	0x080018a3
 800182c:	080018a3 	.word	0x080018a3
 8001830:	080018a3 	.word	0x080018a3
 8001834:	080018a3 	.word	0x080018a3
 8001838:	08001851 	.word	0x08001851
 800183c:	08001865 	.word	0x08001865
 8001840:	4a79      	ldr	r2, [pc, #484]	; (8001a28 <HAL_GPIO_Init+0x2b4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001846:	e02c      	b.n	80018a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	623b      	str	r3, [r7, #32]
          break;
 800184e:	e029      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	3304      	adds	r3, #4
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e024      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	3308      	adds	r3, #8
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e01f      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	330c      	adds	r3, #12
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e01a      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001876:	2304      	movs	r3, #4
 8001878:	623b      	str	r3, [r7, #32]
          break;
 800187a:	e013      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001884:	2308      	movs	r3, #8
 8001886:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	611a      	str	r2, [r3, #16]
          break;
 800188e:	e009      	b.n	80018a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001890:	2308      	movs	r3, #8
 8001892:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	615a      	str	r2, [r3, #20]
          break;
 800189a:	e003      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e000      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          break;
 80018a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d801      	bhi.n	80018ae <HAL_GPIO_Init+0x13a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	e001      	b.n	80018b2 <HAL_GPIO_Init+0x13e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3304      	adds	r3, #4
 80018b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2bff      	cmp	r3, #255	; 0xff
 80018b8:	d802      	bhi.n	80018c0 <HAL_GPIO_Init+0x14c>
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_Init+0x152>
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	3b08      	subs	r3, #8
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	210f      	movs	r1, #15
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	6a39      	ldr	r1, [r7, #32]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80b1 	beq.w	8001a56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f4:	4b4d      	ldr	r3, [pc, #308]	; (8001a2c <HAL_GPIO_Init+0x2b8>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <HAL_GPIO_Init+0x2b8>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_GPIO_Init+0x2b8>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800190c:	4a48      	ldr	r2, [pc, #288]	; (8001a30 <HAL_GPIO_Init+0x2bc>)
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a40      	ldr	r2, [pc, #256]	; (8001a34 <HAL_GPIO_Init+0x2c0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d013      	beq.n	8001960 <HAL_GPIO_Init+0x1ec>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3f      	ldr	r2, [pc, #252]	; (8001a38 <HAL_GPIO_Init+0x2c4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00d      	beq.n	800195c <HAL_GPIO_Init+0x1e8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3e      	ldr	r2, [pc, #248]	; (8001a3c <HAL_GPIO_Init+0x2c8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x1e4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <HAL_GPIO_Init+0x2cc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_GPIO_Init+0x1e0>
 8001950:	2303      	movs	r3, #3
 8001952:	e006      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 8001954:	2304      	movs	r3, #4
 8001956:	e004      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 8001958:	2302      	movs	r3, #2
 800195a:	e002      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 8001960:	2300      	movs	r3, #0
 8001962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001964:	f002 0203 	and.w	r2, r2, #3
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	4093      	lsls	r3, r2
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001972:	492f      	ldr	r1, [pc, #188]	; (8001a30 <HAL_GPIO_Init+0x2bc>)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	492c      	ldr	r1, [pc, #176]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4928      	ldr	r1, [pc, #160]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4922      	ldr	r1, [pc, #136]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	491e      	ldr	r1, [pc, #120]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	4918      	ldr	r1, [pc, #96]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4914      	ldr	r1, [pc, #80]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d021      	beq.n	8001a48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	60cb      	str	r3, [r1, #12]
 8001a10:	e021      	b.n	8001a56 <HAL_GPIO_Init+0x2e2>
 8001a12:	bf00      	nop
 8001a14:	10320000 	.word	0x10320000
 8001a18:	10310000 	.word	0x10310000
 8001a1c:	10220000 	.word	0x10220000
 8001a20:	10210000 	.word	0x10210000
 8001a24:	10120000 	.word	0x10120000
 8001a28:	10110000 	.word	0x10110000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	40010800 	.word	0x40010800
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	40011400 	.word	0x40011400
 8001a44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_GPIO_Init+0x304>)
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4909      	ldr	r1, [pc, #36]	; (8001a78 <HAL_GPIO_Init+0x304>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	3301      	adds	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f47f ae8e 	bne.w	8001788 <HAL_GPIO_Init+0x14>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	372c      	adds	r7, #44	; 0x2c
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	e001      	b.n	8001a9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	807b      	strh	r3, [r7, #2]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aba:	787b      	ldrb	r3, [r7, #1]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ac6:	e003      	b.n	8001ad0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	041a      	lsls	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	611a      	str	r2, [r3, #16]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff f9d0 	bl	8000ea0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40010400 	.word	0x40010400

08001b0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	b08b      	sub	sp, #44	; 0x2c
 8001b10:	af06      	add	r7, sp, #24
 8001b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0fd      	b.n	8001d1a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f006 fef6 	bl	8008924 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 f8d1 	bl	8004cec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	687e      	ldr	r6, [r7, #4]
 8001b52:	466d      	mov	r5, sp
 8001b54:	f106 0410 	add.w	r4, r6, #16
 8001b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	602b      	str	r3, [r5, #0]
 8001b60:	1d33      	adds	r3, r6, #4
 8001b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b64:	6838      	ldr	r0, [r7, #0]
 8001b66:	f003 f89b 	bl	8004ca0 <USB_CoreInit>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0ce      	b.n	8001d1a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 f8cc 	bl	8004d20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e04c      	b.n	8001c28 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	b298      	uxth	r0, r3
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	3336      	adds	r3, #54	; 0x36
 8001bcc:	4602      	mov	r2, r0
 8001bce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	3303      	adds	r3, #3
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3338      	adds	r3, #56	; 0x38
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	333c      	adds	r3, #60	; 0x3c
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3340      	adds	r3, #64	; 0x40
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	3301      	adds	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d3ad      	bcc.n	8001b8e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	e044      	b.n	8001cc2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d3b5      	bcc.n	8001c38 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	687e      	ldr	r6, [r7, #4]
 8001cd4:	466d      	mov	r5, sp
 8001cd6:	f106 0410 	add.w	r4, r6, #16
 8001cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	602b      	str	r3, [r5, #0]
 8001ce2:	1d33      	adds	r3, r6, #4
 8001ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce6:	6838      	ldr	r0, [r7, #0]
 8001ce8:	f003 f826 	bl	8004d38 <USB_DevInit>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00d      	b.n	8001d1a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 ffc0 	bl	8006c98 <USB_DevDisconnect>

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d22 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_PCD_Start+0x16>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e016      	b.n	8001d66 <HAL_PCD_Start+0x44>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 ffbb 	bl	8004cc0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f007 f85c 	bl	8008e0a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 ff94 	bl	8006c84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b088      	sub	sp, #32
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 ff96 	bl	8006cac <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d8a:	d102      	bne.n	8001d92 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fb61 	bl	8002454 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 ff88 	bl	8006cac <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da6:	d112      	bne.n	8001dce <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f006 fe2a 	bl	8008a1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f925 	bl	8002018 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 ff6a 	bl	8006cac <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001de2:	d10b      	bne.n	8001dfc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001df6:	b292      	uxth	r2, r2
 8001df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 ff53 	bl	8006cac <USB_ReadInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e10:	d10b      	bne.n	8001e2a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e24:	b292      	uxth	r2, r2
 8001e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 ff3c 	bl	8006cac <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3e:	d126      	bne.n	8001e8e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0204 	bic.w	r2, r2, #4
 8001e52:	b292      	uxth	r2, r2
 8001e54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0208 	bic.w	r2, r2, #8
 8001e6a:	b292      	uxth	r2, r2
 8001e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f006 fe0b 	bl	8008a8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 ff0a 	bl	8006cac <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ea2:	f040 8084 	bne.w	8001fae <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	77fb      	strb	r3, [r7, #31]
 8001eaa:	e011      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	441a      	add	r2, r3
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	8812      	ldrh	r2, [r2, #0]
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	f107 0120 	add.w	r1, r7, #32
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001eca:	7ffb      	ldrb	r3, [r7, #31]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	77fb      	strb	r3, [r7, #31]
 8001ed0:	7ffb      	ldrb	r3, [r7, #31]
 8001ed2:	2b07      	cmp	r3, #7
 8001ed4:	d9ea      	bls.n	8001eac <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	b292      	uxth	r2, r2
 8001f02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001f06:	bf00      	nop
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f6      	beq.n	8001f08 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	77fb      	strb	r3, [r7, #31]
 8001f36:	e010      	b.n	8001f5a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f38:	7ffb      	ldrb	r3, [r7, #31]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	7ffa      	ldrb	r2, [r7, #31]
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	440a      	add	r2, r1
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	f107 0120 	add.w	r1, r7, #32
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f52:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f54:	7ffb      	ldrb	r3, [r7, #31]
 8001f56:	3301      	adds	r3, #1
 8001f58:	77fb      	strb	r3, [r7, #31]
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	2b07      	cmp	r3, #7
 8001f5e:	d9eb      	bls.n	8001f38 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0208 	orr.w	r2, r2, #8
 8001f72:	b292      	uxth	r2, r2
 8001f74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0204 	orr.w	r2, r2, #4
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f006 fd55 	bl	8008a58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 fe7a 	bl	8006cac <USB_ReadInterrupts>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc2:	d10e      	bne.n	8001fe2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fd6:	b292      	uxth	r2, r2
 8001fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f006 fd0e 	bl	80089fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 fe60 	bl	8006cac <USB_ReadInterrupts>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff6:	d10b      	bne.n	8002010 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800200a:	b292      	uxth	r2, r2
 800200c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002010:	bf00      	nop
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_PCD_SetAddress+0x1a>
 800202e:	2302      	movs	r3, #2
 8002030:	e013      	b.n	800205a <HAL_PCD_SetAddress+0x42>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f004 fe07 	bl	8006c5e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	4608      	mov	r0, r1
 800206c:	4611      	mov	r1, r2
 800206e:	461a      	mov	r2, r3
 8002070:	4603      	mov	r3, r0
 8002072:	70fb      	strb	r3, [r7, #3]
 8002074:	460b      	mov	r3, r1
 8002076:	803b      	strh	r3, [r7, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da0e      	bge.n	80020a6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	705a      	strb	r2, [r3, #1]
 80020a4:	e00e      	b.n	80020c4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 0207 	and.w	r2, r3, #7
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020d0:	883a      	ldrh	r2, [r7, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	78ba      	ldrb	r2, [r7, #2]
 80020da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	785b      	ldrb	r3, [r3, #1]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020ee:	78bb      	ldrb	r3, [r7, #2]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d102      	bne.n	80020fa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_PCD_EP_Open+0xa6>
 8002104:	2302      	movs	r3, #2
 8002106:	e00e      	b.n	8002126 <HAL_PCD_EP_Open+0xc4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68f9      	ldr	r1, [r7, #12]
 8002116:	4618      	mov	r0, r3
 8002118:	f002 fe2e 	bl	8004d78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002124:	7afb      	ldrb	r3, [r7, #11]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800213a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213e:	2b00      	cmp	r3, #0
 8002140:	da0e      	bge.n	8002160 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	705a      	strb	r2, [r3, #1]
 800215e:	e00e      	b.n	800217e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 0207 	and.w	r2, r3, #7
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	b2da      	uxtb	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_PCD_EP_Close+0x6a>
 8002194:	2302      	movs	r3, #2
 8002196:	e00e      	b.n	80021b6 <HAL_PCD_EP_Close+0x88>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68f9      	ldr	r1, [r7, #12]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 f950 	bl	800544c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	460b      	mov	r3, r1
 80021cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	f003 0207 	and.w	r2, r3, #7
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2200      	movs	r2, #0
 80021f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2200      	movs	r2, #0
 80021fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	b2da      	uxtb	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	2b00      	cmp	r3, #0
 8002212:	d106      	bne.n	8002222 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6979      	ldr	r1, [r7, #20]
 800221a:	4618      	mov	r0, r3
 800221c:	f003 fb02 	bl	8005824 <USB_EPStartXfer>
 8002220:	e005      	b.n	800222e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6979      	ldr	r1, [r7, #20]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fafb 	bl	8005824 <USB_EPStartXfer>
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	f003 0207 	and.w	r2, r3, #7
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	460b      	mov	r3, r1
 8002274:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2200      	movs	r2, #0
 80022aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2201      	movs	r2, #1
 80022b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b2:	7afb      	ldrb	r3, [r7, #11]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d106      	bne.n	80022d6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6979      	ldr	r1, [r7, #20]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 faa8 	bl	8005824 <USB_EPStartXfer>
 80022d4:	e005      	b.n	80022e2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6979      	ldr	r1, [r7, #20]
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 faa1 	bl	8005824 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 0207 	and.w	r2, r3, #7
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d901      	bls.n	800230a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e04c      	b.n	80023a4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800230a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800230e:	2b00      	cmp	r3, #0
 8002310:	da0e      	bge.n	8002330 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	705a      	strb	r2, [r3, #1]
 800232e:	e00c      	b.n	800234a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	b2da      	uxtb	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_PCD_EP_SetStall+0x7e>
 8002366:	2302      	movs	r3, #2
 8002368:	e01c      	b.n	80023a4 <HAL_PCD_EP_SetStall+0xb8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68f9      	ldr	r1, [r7, #12]
 8002378:	4618      	mov	r0, r3
 800237a:	f004 fb73 	bl	8006a64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	2b00      	cmp	r3, #0
 8002386:	d108      	bne.n	800239a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002392:	4619      	mov	r1, r3
 8002394:	4610      	mov	r0, r2
 8002396:	f004 fc98 	bl	8006cca <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	f003 020f 	and.w	r2, r3, #15
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d901      	bls.n	80023ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e040      	b.n	800244c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	da0e      	bge.n	80023f0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	705a      	strb	r2, [r3, #1]
 80023ee:	e00e      	b.n	800240e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 0207 	and.w	r2, r3, #7
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	b2da      	uxtb	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_PCD_EP_ClrStall+0x82>
 800242a:	2302      	movs	r3, #2
 800242c:	e00e      	b.n	800244c <HAL_PCD_EP_ClrStall+0xa0>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	4618      	mov	r0, r3
 800243e:	f004 fb61 	bl	8006b04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08e      	sub	sp, #56	; 0x38
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800245c:	e2df      	b.n	8002a1e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002466:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002468:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002474:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 8158 	bne.w	800272e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800247e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d152      	bne.n	800252e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002498:	81fb      	strh	r3, [r7, #14]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	89fb      	ldrh	r3, [r7, #14]
 80024a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3328      	adds	r3, #40	; 0x28
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	3302      	adds	r3, #2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	441a      	add	r2, r3
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024ec:	2100      	movs	r1, #0
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f006 fa6b 	bl	80089ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 828e 	beq.w	8002a1e <PCD_EP_ISR_Handler+0x5ca>
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 8289 	bne.w	8002a1e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002518:	b2da      	uxtb	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b292      	uxth	r2, r2
 8002520:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800252c:	e277      	b.n	8002a1e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800253e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002544:	2b00      	cmp	r3, #0
 8002546:	d034      	beq.n	80025b2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002550:	b29b      	uxth	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	3306      	adds	r3, #6
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002586:	b29b      	uxth	r3, r3
 8002588:	f004 fbef 	bl	8006d6a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	b29a      	uxth	r2, r3
 8002594:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002598:	4013      	ands	r3, r2
 800259a:	823b      	strh	r3, [r7, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	8a3a      	ldrh	r2, [r7, #16]
 80025a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a6:	b292      	uxth	r2, r2
 80025a8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f006 f9e0 	bl	8008970 <HAL_PCD_SetupStageCallback>
 80025b0:	e235      	b.n	8002a1e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f280 8231 	bge.w	8002a1e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025c8:	4013      	ands	r3, r2
 80025ca:	83bb      	strh	r3, [r7, #28]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	8bba      	ldrh	r2, [r7, #28]
 80025d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025d6:	b292      	uxth	r2, r2
 80025d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	3306      	adds	r3, #6
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d019      	beq.n	8002642 <PCD_EP_ISR_Handler+0x1ee>
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	6959      	ldr	r1, [r3, #20]
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002626:	b29b      	uxth	r3, r3
 8002628:	f004 fb9f 	bl	8006d6a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	441a      	add	r2, r3
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800263a:	2100      	movs	r1, #0
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f006 f9a9 	bl	8008994 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002650:	b29b      	uxth	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d112      	bne.n	8002690 <PCD_EP_ISR_Handler+0x23c>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002674:	b29a      	uxth	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002688:	b29a      	uxth	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	801a      	strh	r2, [r3, #0]
 800268e:	e02f      	b.n	80026f0 <PCD_EP_ISR_Handler+0x29c>
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b3e      	cmp	r3, #62	; 0x3e
 8002696:	d813      	bhi.n	80026c0 <PCD_EP_ISR_Handler+0x26c>
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <PCD_EP_ISR_Handler+0x25e>
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	3301      	adds	r3, #1
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	029b      	lsls	r3, r3, #10
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	801a      	strh	r2, [r3, #0]
 80026be:	e017      	b.n	80026f0 <PCD_EP_ISR_Handler+0x29c>
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <PCD_EP_ISR_Handler+0x286>
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	3b01      	subs	r3, #1
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	b29b      	uxth	r3, r3
 80026de:	029b      	lsls	r3, r3, #10
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002700:	827b      	strh	r3, [r7, #18]
 8002702:	8a7b      	ldrh	r3, [r7, #18]
 8002704:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002708:	827b      	strh	r3, [r7, #18]
 800270a:	8a7b      	ldrh	r3, [r7, #18]
 800270c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002710:	827b      	strh	r3, [r7, #18]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	8a7b      	ldrh	r3, [r7, #18]
 8002718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800271c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002728:	b29b      	uxth	r3, r3
 800272a:	8013      	strh	r3, [r2, #0]
 800272c:	e177      	b.n	8002a1e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002740:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002744:	2b00      	cmp	r3, #0
 8002746:	f280 80ea 	bge.w	800291e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29a      	uxth	r2, r3
 800275c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002760:	4013      	ands	r3, r2
 8002762:	853b      	strh	r3, [r7, #40]	; 0x28
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002774:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002778:	b292      	uxth	r2, r2
 800277a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800277c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	7b1b      	ldrb	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d122      	bne.n	80027e0 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	3306      	adds	r3, #6
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80027c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8087 	beq.w	80028da <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	6959      	ldr	r1, [r3, #20]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	88da      	ldrh	r2, [r3, #6]
 80027d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027da:	f004 fac6 	bl	8006d6a <USB_ReadPMA>
 80027de:	e07c      	b.n	80028da <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	78db      	ldrb	r3, [r3, #3]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d108      	bne.n	80027fa <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027ea:	461a      	mov	r2, r3
 80027ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f923 	bl	8002a3a <HAL_PCD_EP_DB_Receive>
 80027f4:	4603      	mov	r3, r0
 80027f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027f8:	e06f      	b.n	80028da <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	847b      	strh	r3, [r7, #34]	; 0x22
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	441a      	add	r2, r3
 8002824:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800282a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800282e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002832:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002836:	b29b      	uxth	r3, r3
 8002838:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d021      	beq.n	8002898 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285c:	b29b      	uxth	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	3302      	adds	r3, #2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	4413      	add	r3, r2
 8002872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800287e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002880:	2b00      	cmp	r3, #0
 8002882:	d02a      	beq.n	80028da <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	6959      	ldr	r1, [r3, #20]
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	891a      	ldrh	r2, [r3, #8]
 8002890:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002892:	f004 fa6a 	bl	8006d6a <USB_ReadPMA>
 8002896:	e020      	b.n	80028da <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	3306      	adds	r3, #6
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	6959      	ldr	r1, [r3, #20]
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	895a      	ldrh	r2, [r3, #10]
 80028d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028d6:	f004 fa48 	bl	8006d6a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e0:	441a      	add	r2, r3
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ec:	441a      	add	r2, r3
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <PCD_EP_ISR_Handler+0x4b0>
 80028fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	429a      	cmp	r2, r3
 8002902:	d206      	bcs.n	8002912 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f006 f842 	bl	8008994 <HAL_PCD_DataOutStageCallback>
 8002910:	e005      	b.n	800291e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002918:	4618      	mov	r0, r3
 800291a:	f002 ff83 	bl	8005824 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800291e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	2b00      	cmp	r3, #0
 8002926:	d07a      	beq.n	8002a1e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002928:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002956:	843b      	strh	r3, [r7, #32]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	8c3b      	ldrh	r3, [r7, #32]
 8002968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800296c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002970:	b29b      	uxth	r3, r3
 8002972:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	78db      	ldrb	r3, [r3, #3]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d108      	bne.n	800298e <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002980:	2b02      	cmp	r3, #2
 8002982:	d146      	bne.n	8002a12 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002984:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d141      	bne.n	8002a12 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	3302      	adds	r3, #2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	8bfb      	ldrh	r3, [r7, #30]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d906      	bls.n	80029d0 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	8bfb      	ldrh	r3, [r7, #30]
 80029c8:	1ad2      	subs	r2, r2, r3
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	619a      	str	r2, [r3, #24]
 80029ce:	e002      	b.n	80029d6 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	2200      	movs	r2, #0
 80029d4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f005 fff0 	bl	80089ca <HAL_PCD_DataInStageCallback>
 80029ea:	e018      	b.n	8002a1e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	8bfb      	ldrh	r3, [r7, #30]
 80029f2:	441a      	add	r2, r3
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	8bfb      	ldrh	r3, [r7, #30]
 80029fe:	441a      	add	r2, r3
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 ff0a 	bl	8005824 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a10:	e005      	b.n	8002a1e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a14:	461a      	mov	r2, r3
 8002a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f91b 	bl	8002c54 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f6ff ad17 	blt.w	800245e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3738      	adds	r7, #56	; 0x38
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b088      	sub	sp, #32
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	4613      	mov	r3, r2
 8002a46:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d07e      	beq.n	8002b50 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	3302      	adds	r3, #2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	699a      	ldr	r2, [r3, #24]
 8002a80:	8b7b      	ldrh	r3, [r7, #26]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d306      	bcc.n	8002a94 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	8b7b      	ldrh	r3, [r7, #26]
 8002a8c:	1ad2      	subs	r2, r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	619a      	str	r2, [r3, #24]
 8002a92:	e002      	b.n	8002a9a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d123      	bne.n	8002aea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abc:	833b      	strh	r3, [r7, #24]
 8002abe:	8b3b      	ldrh	r3, [r7, #24]
 8002ac0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ac4:	833b      	strh	r3, [r7, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	441a      	add	r2, r3
 8002ad4:	8b3b      	ldrh	r3, [r7, #24]
 8002ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01f      	beq.n	8002b34 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0e:	82fb      	strh	r3, [r7, #22]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	441a      	add	r2, r3
 8002b1e:	8afb      	ldrh	r3, [r7, #22]
 8002b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b34:	8b7b      	ldrh	r3, [r7, #26]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8087 	beq.w	8002c4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6959      	ldr	r1, [r3, #20]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	891a      	ldrh	r2, [r3, #8]
 8002b48:	8b7b      	ldrh	r3, [r7, #26]
 8002b4a:	f004 f90e 	bl	8006d6a <USB_ReadPMA>
 8002b4e:	e07c      	b.n	8002c4a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	3306      	adds	r3, #6
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	8b7b      	ldrh	r3, [r7, #26]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d306      	bcc.n	8002b92 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	8b7b      	ldrh	r3, [r7, #26]
 8002b8a:	1ad2      	subs	r2, r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	619a      	str	r2, [r3, #24]
 8002b90:	e002      	b.n	8002b98 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d123      	bne.n	8002be8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	83fb      	strh	r3, [r7, #30]
 8002bbc:	8bfb      	ldrh	r3, [r7, #30]
 8002bbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bc2:	83fb      	strh	r3, [r7, #30]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	8bfb      	ldrh	r3, [r7, #30]
 8002bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11f      	bne.n	8002c32 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	83bb      	strh	r3, [r7, #28]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	441a      	add	r2, r3
 8002c1c:	8bbb      	ldrh	r3, [r7, #28]
 8002c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c32:	8b7b      	ldrh	r3, [r7, #26]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	6959      	ldr	r1, [r3, #20]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	895a      	ldrh	r2, [r3, #10]
 8002c44:	8b7b      	ldrh	r3, [r7, #26]
 8002c46:	f004 f890 	bl	8006d6a <USB_ReadPMA>
    }
  }

  return count;
 8002c4a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b094      	sub	sp, #80	; 0x50
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8138 	beq.w	8002ede <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	3302      	adds	r3, #2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d907      	bls.n	8002cb6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cae:	1ad2      	subs	r2, r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	619a      	str	r2, [r3, #24]
 8002cb4:	e002      	b.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d12c      	bne.n	8002d1e <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f005 fe7d 	bl	80089ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 823a 	beq.w	8003150 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	82fb      	strh	r3, [r7, #22]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	8afb      	ldrh	r3, [r7, #22]
 8002d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	8013      	strh	r3, [r2, #0]
 8002d1c:	e218      	b.n	8003150 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01f      	beq.n	8002d68 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	441a      	add	r2, r3
 8002d52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	f040 81ee 	bne.w	8003150 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d7c:	441a      	add	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d8a:	441a      	add	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d309      	bcc.n	8002db0 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6a1a      	ldr	r2, [r3, #32]
 8002da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da8:	1ad2      	subs	r2, r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	621a      	str	r2, [r3, #32]
 8002dae:	e015      	b.n	8002ddc <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002db8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002dbc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002dc6:	e009      	b.n	8002ddc <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	785b      	ldrb	r3, [r3, #1]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d155      	bne.n	8002e90 <HAL_PCD_EP_DB_Transmit+0x23c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	011a      	lsls	r2, r3, #4
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d112      	bne.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	801a      	strh	r2, [r3, #0]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	e047      	b.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8002e3c:	d811      	bhi.n	8002e62 <HAL_PCD_EP_DB_Transmit+0x20e>
 8002e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x200>
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	3301      	adds	r3, #1
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	029b      	lsls	r3, r3, #10
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	801a      	strh	r2, [r3, #0]
 8002e60:	e032      	b.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x224>
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	3b01      	subs	r3, #1
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	029b      	lsls	r3, r3, #10
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	801a      	strh	r2, [r3, #0]
 8002e8e:	e01b      	b.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	785b      	ldrb	r3, [r3, #1]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d117      	bne.n	8002ec8 <HAL_PCD_EP_DB_Transmit+0x274>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	4413      	add	r3, r2
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	011a      	lsls	r2, r3, #4
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	4413      	add	r3, r2
 8002eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	6959      	ldr	r1, [r3, #20]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	891a      	ldrh	r2, [r3, #8]
 8002ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f003 ff02 	bl	8006ce0 <USB_WritePMA>
 8002edc:	e138      	b.n	8003150 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3306      	adds	r3, #6
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d307      	bcc.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f1e:	1ad2      	subs	r2, r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	619a      	str	r2, [r3, #24]
 8002f24:	e002      	b.n	8002f2c <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d12e      	bne.n	8002f92 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f005 fd45 	bl	80089ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f040 8102 	bne.w	8003150 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	8013      	strh	r3, [r2, #0]
 8002f90:	e0de      	b.n	8003150 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d11f      	bne.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	867b      	strh	r3, [r7, #50]	; 0x32
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	f040 80b4 	bne.w	8003150 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	695a      	ldr	r2, [r3, #20]
 8002fec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ffe:	441a      	add	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6a1a      	ldr	r2, [r3, #32]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	429a      	cmp	r2, r3
 800300e:	d309      	bcc.n	8003024 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301c:	1ad2      	subs	r2, r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	621a      	str	r2, [r3, #32]
 8003022:	e015      	b.n	8003050 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800302c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003030:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800303a:	e009      	b.n	8003050 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2200      	movs	r2, #0
 8003046:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	643b      	str	r3, [r7, #64]	; 0x40
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	785b      	ldrb	r3, [r3, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d155      	bne.n	800310a <HAL_PCD_EP_DB_Transmit+0x4b6>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	63bb      	str	r3, [r7, #56]	; 0x38
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800306c:	b29b      	uxth	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003072:	4413      	add	r3, r2
 8003074:	63bb      	str	r3, [r7, #56]	; 0x38
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	011a      	lsls	r2, r3, #4
 800307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307e:	4413      	add	r3, r2
 8003080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003084:	637b      	str	r3, [r7, #52]	; 0x34
 8003086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003088:	2b00      	cmp	r3, #0
 800308a:	d112      	bne.n	80030b2 <HAL_PCD_EP_DB_Transmit+0x45e>
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003096:	b29a      	uxth	r2, r3
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	801a      	strh	r2, [r3, #0]
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	801a      	strh	r2, [r3, #0]
 80030b0:	e044      	b.n	800313c <HAL_PCD_EP_DB_Transmit+0x4e8>
 80030b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b4:	2b3e      	cmp	r3, #62	; 0x3e
 80030b6:	d811      	bhi.n	80030dc <HAL_PCD_EP_DB_Transmit+0x488>
 80030b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_PCD_EP_DB_Transmit+0x47a>
 80030c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ca:	3301      	adds	r3, #1
 80030cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	029b      	lsls	r3, r3, #10
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d8:	801a      	strh	r2, [r3, #0]
 80030da:	e02f      	b.n	800313c <HAL_PCD_EP_DB_Transmit+0x4e8>
 80030dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x49e>
 80030ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ee:	3b01      	subs	r3, #1
 80030f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	029b      	lsls	r3, r3, #10
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003102:	b29a      	uxth	r2, r3
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	801a      	strh	r2, [r3, #0]
 8003108:	e018      	b.n	800313c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	785b      	ldrb	r3, [r3, #1]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d114      	bne.n	800313c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003120:	4413      	add	r3, r2
 8003122:	643b      	str	r3, [r7, #64]	; 0x40
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	011a      	lsls	r2, r3, #4
 800312a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312c:	4413      	add	r3, r2
 800312e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003136:	b29a      	uxth	r2, r3
 8003138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	6959      	ldr	r1, [r3, #20]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	895a      	ldrh	r2, [r3, #10]
 8003148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800314a:	b29b      	uxth	r3, r3
 800314c:	f003 fdc8 	bl	8006ce0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800316a:	82bb      	strh	r3, [r7, #20]
 800316c:	8abb      	ldrh	r3, [r7, #20]
 800316e:	f083 0310 	eor.w	r3, r3, #16
 8003172:	82bb      	strh	r3, [r7, #20]
 8003174:	8abb      	ldrh	r3, [r7, #20]
 8003176:	f083 0320 	eor.w	r3, r3, #32
 800317a:	82bb      	strh	r3, [r7, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	8abb      	ldrh	r3, [r7, #20]
 800318c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319c:	b29b      	uxth	r3, r3
 800319e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3750      	adds	r7, #80	; 0x50
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b087      	sub	sp, #28
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	817b      	strh	r3, [r7, #10]
 80031b8:	4613      	mov	r3, r2
 80031ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80031bc:	897b      	ldrh	r3, [r7, #10]
 80031be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c8:	897b      	ldrh	r3, [r7, #10]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	e009      	b.n	80031f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031e0:	897a      	ldrh	r2, [r7, #10]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4413      	add	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031f4:	893b      	ldrh	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d107      	bne.n	800320a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	b29a      	uxth	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	80da      	strh	r2, [r3, #6]
 8003208:	e00b      	b.n	8003222 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2201      	movs	r2, #1
 800320e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	b29a      	uxth	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	0c1b      	lsrs	r3, r3, #16
 800321c:	b29a      	uxth	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e26c      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8087 	beq.w	800335e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003250:	4b92      	ldr	r3, [pc, #584]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b04      	cmp	r3, #4
 800325a:	d00c      	beq.n	8003276 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800325c:	4b8f      	ldr	r3, [pc, #572]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d112      	bne.n	800328e <HAL_RCC_OscConfig+0x5e>
 8003268:	4b8c      	ldr	r3, [pc, #560]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003274:	d10b      	bne.n	800328e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003276:	4b89      	ldr	r3, [pc, #548]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d06c      	beq.n	800335c <HAL_RCC_OscConfig+0x12c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d168      	bne.n	800335c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e246      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x76>
 8003298:	4b80      	ldr	r3, [pc, #512]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a7f      	ldr	r2, [pc, #508]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	e02e      	b.n	8003304 <HAL_RCC_OscConfig+0xd4>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x98>
 80032ae:	4b7b      	ldr	r3, [pc, #492]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a7a      	ldr	r2, [pc, #488]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b78      	ldr	r3, [pc, #480]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a77      	ldr	r2, [pc, #476]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e01d      	b.n	8003304 <HAL_RCC_OscConfig+0xd4>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0xbc>
 80032d2:	4b72      	ldr	r3, [pc, #456]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a71      	ldr	r2, [pc, #452]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	4b6f      	ldr	r3, [pc, #444]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6e      	ldr	r2, [pc, #440]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e00b      	b.n	8003304 <HAL_RCC_OscConfig+0xd4>
 80032ec:	4b6b      	ldr	r3, [pc, #428]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a6a      	ldr	r2, [pc, #424]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b68      	ldr	r3, [pc, #416]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a67      	ldr	r2, [pc, #412]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80032fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003302:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe f880 	bl	8001410 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003314:	f7fe f87c 	bl	8001410 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e1fa      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003326:	4b5d      	ldr	r3, [pc, #372]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0xe4>
 8003332:	e014      	b.n	800335e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fe f86c 	bl	8001410 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800333c:	f7fe f868 	bl	8001410 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e1e6      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334e:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x10c>
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d063      	beq.n	8003432 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800336a:	4b4c      	ldr	r3, [pc, #304]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003376:	4b49      	ldr	r3, [pc, #292]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b08      	cmp	r3, #8
 8003380:	d11c      	bne.n	80033bc <HAL_RCC_OscConfig+0x18c>
 8003382:	4b46      	ldr	r3, [pc, #280]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d116      	bne.n	80033bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	4b43      	ldr	r3, [pc, #268]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_RCC_OscConfig+0x176>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e1ba      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4939      	ldr	r1, [pc, #228]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	e03a      	b.n	8003432 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fe f821 	bl	8001410 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d2:	f7fe f81d 	bl	8001410 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e19b      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e4:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	4b2a      	ldr	r3, [pc, #168]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4927      	ldr	r1, [pc, #156]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]
 8003404:	e015      	b.n	8003432 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003406:	4b26      	ldr	r3, [pc, #152]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fe f800 	bl	8001410 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003414:	f7fd fffc 	bl	8001410 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e17a      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d03a      	beq.n	80034b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d019      	beq.n	800347a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <HAL_RCC_OscConfig+0x274>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344c:	f7fd ffe0 	bl	8001410 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003454:	f7fd ffdc 	bl	8001410 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e15a      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <HAL_RCC_OscConfig+0x26c>)
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003472:	2001      	movs	r0, #1
 8003474:	f000 fb10 	bl	8003a98 <RCC_Delay>
 8003478:	e01c      	b.n	80034b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347a:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_RCC_OscConfig+0x274>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003480:	f7fd ffc6 	bl	8001410 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003486:	e00f      	b.n	80034a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003488:	f7fd ffc2 	bl	8001410 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d908      	bls.n	80034a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e140      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	42420000 	.word	0x42420000
 80034a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	4b9e      	ldr	r3, [pc, #632]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e9      	bne.n	8003488 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80a6 	beq.w	800360e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c6:	4b97      	ldr	r3, [pc, #604]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10d      	bne.n	80034ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	4b94      	ldr	r3, [pc, #592]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	4a93      	ldr	r2, [pc, #588]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	61d3      	str	r3, [r2, #28]
 80034de:	4b91      	ldr	r3, [pc, #580]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b8e      	ldr	r3, [pc, #568]	; (8003728 <HAL_RCC_OscConfig+0x4f8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b8b      	ldr	r3, [pc, #556]	; (8003728 <HAL_RCC_OscConfig+0x4f8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a8a      	ldr	r2, [pc, #552]	; (8003728 <HAL_RCC_OscConfig+0x4f8>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fd ff83 	bl	8001410 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7fd ff7f 	bl	8001410 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b64      	cmp	r3, #100	; 0x64
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0fd      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b81      	ldr	r3, [pc, #516]	; (8003728 <HAL_RCC_OscConfig+0x4f8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x312>
 8003534:	4b7b      	ldr	r3, [pc, #492]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4a7a      	ldr	r2, [pc, #488]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6213      	str	r3, [r2, #32]
 8003540:	e02d      	b.n	800359e <HAL_RCC_OscConfig+0x36e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x334>
 800354a:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a75      	ldr	r2, [pc, #468]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	6213      	str	r3, [r2, #32]
 8003556:	4b73      	ldr	r3, [pc, #460]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4a72      	ldr	r2, [pc, #456]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800355c:	f023 0304 	bic.w	r3, r3, #4
 8003560:	6213      	str	r3, [r2, #32]
 8003562:	e01c      	b.n	800359e <HAL_RCC_OscConfig+0x36e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b05      	cmp	r3, #5
 800356a:	d10c      	bne.n	8003586 <HAL_RCC_OscConfig+0x356>
 800356c:	4b6d      	ldr	r3, [pc, #436]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4a6c      	ldr	r2, [pc, #432]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	6213      	str	r3, [r2, #32]
 8003578:	4b6a      	ldr	r3, [pc, #424]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	4a69      	ldr	r2, [pc, #420]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6213      	str	r3, [r2, #32]
 8003584:	e00b      	b.n	800359e <HAL_RCC_OscConfig+0x36e>
 8003586:	4b67      	ldr	r3, [pc, #412]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a66      	ldr	r2, [pc, #408]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	6213      	str	r3, [r2, #32]
 8003592:	4b64      	ldr	r3, [pc, #400]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	4a63      	ldr	r2, [pc, #396]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d015      	beq.n	80035d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fd ff33 	bl	8001410 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fd ff2f 	bl	8001410 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0ab      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c4:	4b57      	ldr	r3, [pc, #348]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ee      	beq.n	80035ae <HAL_RCC_OscConfig+0x37e>
 80035d0:	e014      	b.n	80035fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7fd ff1d 	bl	8001410 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fd ff19 	bl	8001410 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e095      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f0:	4b4c      	ldr	r3, [pc, #304]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1ee      	bne.n	80035da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d105      	bne.n	800360e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003602:	4b48      	ldr	r3, [pc, #288]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4a47      	ldr	r2, [pc, #284]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8081 	beq.w	800371a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003618:	4b42      	ldr	r3, [pc, #264]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 030c 	and.w	r3, r3, #12
 8003620:	2b08      	cmp	r3, #8
 8003622:	d061      	beq.n	80036e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	2b02      	cmp	r3, #2
 800362a:	d146      	bne.n	80036ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362c:	4b3f      	ldr	r3, [pc, #252]	; (800372c <HAL_RCC_OscConfig+0x4fc>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003632:	f7fd feed 	bl	8001410 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363a:	f7fd fee9 	bl	8001410 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e067      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003660:	d108      	bne.n	8003674 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003662:	4b30      	ldr	r3, [pc, #192]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	492d      	ldr	r1, [pc, #180]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003674:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a19      	ldr	r1, [r3, #32]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	430b      	orrs	r3, r1
 8003686:	4927      	ldr	r1, [pc, #156]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_RCC_OscConfig+0x4fc>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003692:	f7fd febd 	bl	8001410 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369a:	f7fd feb9 	bl	8001410 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e037      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x46a>
 80036b8:	e02f      	b.n	800371a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b1c      	ldr	r3, [pc, #112]	; (800372c <HAL_RCC_OscConfig+0x4fc>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fd fea6 	bl	8001410 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fd fea2 	bl	8001410 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e020      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x498>
 80036e6:	e018      	b.n	800371a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e013      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_OscConfig+0x4f4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	429a      	cmp	r2, r3
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000
 8003728:	40007000 	.word	0x40007000
 800372c:	42420060 	.word	0x42420060

08003730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0d0      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b67      	ldr	r3, [pc, #412]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0207 	bic.w	r2, r3, #7
 800375a:	4965      	ldr	r1, [pc, #404]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0b8      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d020      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800378c:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a58      	ldr	r2, [pc, #352]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a4:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b0:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	494d      	ldr	r1, [pc, #308]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d040      	beq.n	8003850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d115      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e07f      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d107      	bne.n	80037fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ee:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e073      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037fe:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e06b      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f023 0203 	bic.w	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4936      	ldr	r1, [pc, #216]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003820:	f7fd fdf6 	bl	8001410 <HAL_GetTick>
 8003824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	e00a      	b.n	800383e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003828:	f7fd fdf2 	bl	8001410 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e053      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 020c 	and.w	r2, r3, #12
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	429a      	cmp	r2, r3
 800384e:	d1eb      	bne.n	8003828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003850:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d210      	bcs.n	8003880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 0207 	bic.w	r2, r3, #7
 8003866:	4922      	ldr	r1, [pc, #136]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e032      	b.n	80038e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800388c:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4916      	ldr	r1, [pc, #88]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	490e      	ldr	r1, [pc, #56]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038be:	f000 f859 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	490a      	ldr	r1, [pc, #40]	; (80038f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	5ccb      	ldrb	r3, [r1, r3]
 80038d2:	fa22 f303 	lsr.w	r3, r2, r3
 80038d6:	4a09      	ldr	r2, [pc, #36]	; (80038fc <HAL_RCC_ClockConfig+0x1cc>)
 80038d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_RCC_ClockConfig+0x1d0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fd fd54 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40022000 	.word	0x40022000
 80038f4:	40021000 	.word	0x40021000
 80038f8:	0800a760 	.word	0x0800a760
 80038fc:	2000001c 	.word	0x2000001c
 8003900:	20000020 	.word	0x20000020

08003904 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003910:	f107 0318 	add.w	r3, r7, #24
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003922:	2303      	movs	r3, #3
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800392a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800392e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_RCC_MCOConfig+0x68>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4a0d      	ldr	r2, [pc, #52]	; (800396c <HAL_RCC_MCOConfig+0x68>)
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	6193      	str	r3, [r2, #24]
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <HAL_RCC_MCOConfig+0x68>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003948:	f107 0318 	add.w	r3, r7, #24
 800394c:	4619      	mov	r1, r3
 800394e:	4808      	ldr	r0, [pc, #32]	; (8003970 <HAL_RCC_MCOConfig+0x6c>)
 8003950:	f7fd ff10 	bl	8001774 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_MCOConfig+0x68>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <HAL_RCC_MCOConfig+0x68>)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
}
 8003964:	bf00      	nop
 8003966:	3728      	adds	r7, #40	; 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	40010800 	.word	0x40010800

08003974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b490      	push	{r4, r7}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 800397c:	1d3c      	adds	r4, r7, #4
 800397e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003984:	f240 2301 	movw	r3, #513	; 0x201
 8003988:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x40>
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x46>
 80039b2:	e02d      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b6:	623b      	str	r3, [r7, #32]
      break;
 80039b8:	e02d      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	0c9b      	lsrs	r3, r3, #18
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039c6:	4413      	add	r3, r2
 80039c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	0c5b      	lsrs	r3, r3, #17
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039e6:	4413      	add	r3, r2
 80039e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f2:	fb02 f203 	mul.w	r2, r2, r3
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
 80039fe:	e004      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	623b      	str	r3, [r7, #32]
      break;
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a12:	623b      	str	r3, [r7, #32]
      break;
 8003a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a16:	6a3b      	ldr	r3, [r7, #32]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc90      	pop	{r4, r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	0800a708 	.word	0x0800a708
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	007a1200 	.word	0x007a1200
 8003a30:	003d0900 	.word	0x003d0900

08003a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	2000001c 	.word	0x2000001c

08003a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a4c:	f7ff fff2 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	0800a770 	.word	0x0800a770

08003a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a74:	f7ff ffde 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0adb      	lsrs	r3, r3, #11
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	4903      	ldr	r1, [pc, #12]	; (8003a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	0800a770 	.word	0x0800a770

08003a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <RCC_Delay+0x34>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <RCC_Delay+0x38>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	0a5b      	lsrs	r3, r3, #9
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ab4:	bf00      	nop
  }
  while (Delay --);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1e5a      	subs	r2, r3, #1
 8003aba:	60fa      	str	r2, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f9      	bne.n	8003ab4 <RCC_Delay+0x1c>
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	2000001c 	.word	0x2000001c
 8003ad0:	10624dd3 	.word	0x10624dd3

08003ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d07d      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003af0:	2300      	movs	r3, #0
 8003af2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af4:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10d      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b00:	4b4c      	ldr	r3, [pc, #304]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	4a4b      	ldr	r2, [pc, #300]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	61d3      	str	r3, [r2, #28]
 8003b0c:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d118      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b28:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a42      	ldr	r2, [pc, #264]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b34:	f7fd fc6c 	bl	8001410 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	e008      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3c:	f7fd fc68 	bl	8001410 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e06d      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4e:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d02e      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d027      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b78:	4b2e      	ldr	r3, [pc, #184]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b82:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b88:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b8e:	4a29      	ldr	r2, [pc, #164]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d014      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fd fc37 	bl	8001410 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fd fc33 	bl	8001410 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e036      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ee      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4917      	ldr	r1, [pc, #92]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	490b      	ldr	r1, [pc, #44]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4904      	ldr	r1, [pc, #16]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	42420440 	.word	0x42420440

08003c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e041      	b.n	8003cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd f96c 	bl	8000f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f000 fa70 	bl	8004164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d001      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e03a      	b.n	8003d6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_TIM_Base_Start_IT+0x98>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00e      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x58>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d22:	d009      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x58>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <HAL_TIM_Base_Start_IT+0x9c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d004      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x58>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d111      	bne.n	8003d5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d010      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	e007      	b.n	8003d6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800

08003d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d122      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d11b      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0202 	mvn.w	r2, #2
 8003db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9b1 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003dcc:	e005      	b.n	8003dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9a4 	bl	800411c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f9b3 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d122      	bne.n	8003e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d11b      	bne.n	8003e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0204 	mvn.w	r2, #4
 8003e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f987 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f97a 	bl	800411c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f989 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d122      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d11b      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0208 	mvn.w	r2, #8
 8003e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f95d 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f950 	bl	800411c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f95f 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d122      	bne.n	8003edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d11b      	bne.n	8003edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0210 	mvn.w	r2, #16
 8003eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f933 	bl	800412e <HAL_TIM_IC_CaptureCallback>
 8003ec8:	e005      	b.n	8003ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f926 	bl	800411c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f935 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10e      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0201 	mvn.w	r2, #1
 8003f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fc ffa2 	bl	8000e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f12:	2b80      	cmp	r3, #128	; 0x80
 8003f14:	d10e      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b80      	cmp	r3, #128	; 0x80
 8003f22:	d107      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fa77 	bl	8004422 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d10e      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d107      	bne.n	8003f60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8f9 	bl	8004152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d10e      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d107      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0220 	mvn.w	r2, #32
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa42 	bl	8004410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIM_ConfigClockSource+0x18>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e0b3      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x180>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe4:	d03e      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0xd0>
 8003fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fea:	f200 8087 	bhi.w	80040fc <HAL_TIM_ConfigClockSource+0x168>
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff2:	f000 8085 	beq.w	8004100 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffa:	d87f      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x168>
 8003ffc:	2b70      	cmp	r3, #112	; 0x70
 8003ffe:	d01a      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0xa2>
 8004000:	2b70      	cmp	r3, #112	; 0x70
 8004002:	d87b      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x168>
 8004004:	2b60      	cmp	r3, #96	; 0x60
 8004006:	d050      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x116>
 8004008:	2b60      	cmp	r3, #96	; 0x60
 800400a:	d877      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x168>
 800400c:	2b50      	cmp	r3, #80	; 0x50
 800400e:	d03c      	beq.n	800408a <HAL_TIM_ConfigClockSource+0xf6>
 8004010:	2b50      	cmp	r3, #80	; 0x50
 8004012:	d873      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x168>
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d058      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x136>
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d86f      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x168>
 800401c:	2b30      	cmp	r3, #48	; 0x30
 800401e:	d064      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x156>
 8004020:	2b30      	cmp	r3, #48	; 0x30
 8004022:	d86b      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x168>
 8004024:	2b20      	cmp	r3, #32
 8004026:	d060      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x156>
 8004028:	2b20      	cmp	r3, #32
 800402a:	d867      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x168>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d05c      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x156>
 8004030:	2b10      	cmp	r3, #16
 8004032:	d05a      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004034:	e062      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6899      	ldr	r1, [r3, #8]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f000 f966 	bl	8004316 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004058:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	609a      	str	r2, [r3, #8]
      break;
 8004062:	e04e      	b.n	8004102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6899      	ldr	r1, [r3, #8]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f000 f94f 	bl	8004316 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004086:	609a      	str	r2, [r3, #8]
      break;
 8004088:	e03b      	b.n	8004102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	461a      	mov	r2, r3
 8004098:	f000 f8c6 	bl	8004228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2150      	movs	r1, #80	; 0x50
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f91d 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 80040a8:	e02b      	b.n	8004102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f000 f8e4 	bl	8004284 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2160      	movs	r1, #96	; 0x60
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 f90d 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 80040c8:	e01b      	b.n	8004102 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 f8a6 	bl	8004228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2140      	movs	r1, #64	; 0x40
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f8fd 	bl	80042e2 <TIM_ITRx_SetConfig>
      break;
 80040e8:	e00b      	b.n	8004102 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f000 f8f4 	bl	80042e2 <TIM_ITRx_SetConfig>
        break;
 80040fa:	e002      	b.n	8004102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040fc:	bf00      	nop
 80040fe:	e000      	b.n	8004102 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004100:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a29      	ldr	r2, [pc, #164]	; (800421c <TIM_Base_SetConfig+0xb8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00b      	beq.n	8004194 <TIM_Base_SetConfig+0x30>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d007      	beq.n	8004194 <TIM_Base_SetConfig+0x30>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a26      	ldr	r2, [pc, #152]	; (8004220 <TIM_Base_SetConfig+0xbc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_Base_SetConfig+0x30>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a25      	ldr	r2, [pc, #148]	; (8004224 <TIM_Base_SetConfig+0xc0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d108      	bne.n	80041a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1c      	ldr	r2, [pc, #112]	; (800421c <TIM_Base_SetConfig+0xb8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <TIM_Base_SetConfig+0x62>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0x62>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a19      	ldr	r2, [pc, #100]	; (8004220 <TIM_Base_SetConfig+0xbc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0x62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a18      	ldr	r2, [pc, #96]	; (8004224 <TIM_Base_SetConfig+0xc0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a07      	ldr	r2, [pc, #28]	; (800421c <TIM_Base_SetConfig+0xb8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d103      	bne.n	800420c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	615a      	str	r2, [r3, #20]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800

08004228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f023 0201 	bic.w	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 030a 	bic.w	r3, r3, #10
 8004264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f023 0210 	bic.w	r2, r3, #16
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	031b      	lsls	r3, r3, #12
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	621a      	str	r2, [r3, #32]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr

080042e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	f043 0307 	orr.w	r3, r3, #7
 8004304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004316:	b480      	push	{r7}
 8004318:	b087      	sub	sp, #28
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004330:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	021a      	lsls	r2, r3, #8
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	431a      	orrs	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4313      	orrs	r3, r2
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	609a      	str	r2, [r3, #8]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004368:	2302      	movs	r3, #2
 800436a:	e046      	b.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00e      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d009      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a12      	ldr	r2, [pc, #72]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a10      	ldr	r2, [pc, #64]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10c      	bne.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800

08004410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e03f      	b.n	80044c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc fdb4 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	; 0x24
 8004464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fb83 	bl	8004b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800448c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800449c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b08a      	sub	sp, #40	; 0x28
 80044d2:	af02      	add	r7, sp, #8
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d17c      	bne.n	80045e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_UART_Transmit+0x2c>
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e075      	b.n	80045ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_UART_Transmit+0x3e>
 8004508:	2302      	movs	r3, #2
 800450a:	e06e      	b.n	80045ea <HAL_UART_Transmit+0x11c>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2221      	movs	r2, #33	; 0x21
 800451e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004522:	f7fc ff75 	bl	8001410 <HAL_GetTick>
 8004526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	88fa      	ldrh	r2, [r7, #6]
 8004532:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453c:	d108      	bne.n	8004550 <HAL_UART_Transmit+0x82>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	e003      	b.n	8004558 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004560:	e02a      	b.n	80045b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2200      	movs	r2, #0
 800456a:	2180      	movs	r1, #128	; 0x80
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f9a7 	bl	80048c0 <UART_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e036      	b.n	80045ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004590:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	3302      	adds	r3, #2
 8004596:	61bb      	str	r3, [r7, #24]
 8004598:	e007      	b.n	80045aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	781a      	ldrb	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	3301      	adds	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1cf      	bne.n	8004562 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2200      	movs	r2, #0
 80045ca:	2140      	movs	r1, #64	; 0x40
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f977 	bl	80048c0 <UART_WaitOnFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e006      	b.n	80045ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e000      	b.n	80045ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
  }
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	4613      	mov	r3, r2
 80045fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b20      	cmp	r3, #32
 800460a:	d140      	bne.n	800468e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_UART_Receive_IT+0x26>
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e039      	b.n	8004690 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_UART_Receive_IT+0x38>
 8004626:	2302      	movs	r3, #2
 8004628:	e032      	b.n	8004690 <HAL_UART_Receive_IT+0x9e>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2222      	movs	r2, #34	; 0x22
 800464e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004668:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0220 	orr.w	r2, r2, #32
 8004688:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	e000      	b.n	8004690 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800468e:	2302      	movs	r3, #2
  }
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr
	...

0800469c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80046bc:	2300      	movs	r3, #0
 80046be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_UART_IRQHandler+0x52>
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f9cc 	bl	8004a84 <UART_Receive_IT>
      return;
 80046ec:	e0d0      	b.n	8004890 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80b0 	beq.w	8004856 <HAL_UART_IRQHandler+0x1ba>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d105      	bne.n	800470c <HAL_UART_IRQHandler+0x70>
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 80a5 	beq.w	8004856 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_UART_IRQHandler+0x90>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004724:	f043 0201 	orr.w	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_UART_IRQHandler+0xb0>
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	f043 0202 	orr.w	r2, r3, #2
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_UART_IRQHandler+0xd0>
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004764:	f043 0204 	orr.w	r2, r3, #4
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00f      	beq.n	8004796 <HAL_UART_IRQHandler+0xfa>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <HAL_UART_IRQHandler+0xee>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	f043 0208 	orr.w	r2, r3, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d077      	beq.n	800488e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_UART_IRQHandler+0x11c>
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f966 	bl	8004a84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d102      	bne.n	80047e0 <HAL_UART_IRQHandler+0x144>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d031      	beq.n	8004844 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f8b7 	bl	8004954 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d023      	beq.n	800483c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004802:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	2b00      	cmp	r3, #0
 800480a:	d013      	beq.n	8004834 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	4a21      	ldr	r2, [pc, #132]	; (8004898 <HAL_UART_IRQHandler+0x1fc>)
 8004812:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	4618      	mov	r0, r3
 800481a:	f7fc ff35 	bl	8001688 <HAL_DMA_Abort_IT>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d016      	beq.n	8004852 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800482e:	4610      	mov	r0, r2
 8004830:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004832:	e00e      	b.n	8004852 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f83a 	bl	80048ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483a:	e00a      	b.n	8004852 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f836 	bl	80048ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004842:	e006      	b.n	8004852 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f832 	bl	80048ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004850:	e01d      	b.n	800488e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004852:	bf00      	nop
    return;
 8004854:	e01b      	b.n	800488e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_UART_IRQHandler+0x1d6>
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8a3 	bl	80049b6 <UART_Transmit_IT>
    return;
 8004870:	e00e      	b.n	8004890 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d009      	beq.n	8004890 <HAL_UART_IRQHandler+0x1f4>
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f8e4 	bl	8004a54 <UART_EndTransmit_IT>
    return;
 800488c:	e000      	b.n	8004890 <HAL_UART_IRQHandler+0x1f4>
    return;
 800488e:	bf00      	nop
  }
}
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	0800498f 	.word	0x0800498f

0800489c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	4613      	mov	r3, r2
 80048ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d0:	e02c      	b.n	800492c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d028      	beq.n	800492c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d007      	beq.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048e0:	f7fc fd96 	bl	8001410 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d21d      	bcs.n	800492c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e00f      	b.n	800494c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4013      	ands	r3, r2
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	429a      	cmp	r2, r3
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	429a      	cmp	r2, r3
 8004948:	d0c3      	beq.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800496a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff ff80 	bl	80048ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b21      	cmp	r3, #33	; 0x21
 80049c8:	d13e      	bne.n	8004a48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d2:	d114      	bne.n	80049fe <UART_Transmit_IT+0x48>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d110      	bne.n	80049fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	1c9a      	adds	r2, r3, #2
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	621a      	str	r2, [r3, #32]
 80049fc:	e008      	b.n	8004a10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	1c59      	adds	r1, r3, #1
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6211      	str	r1, [r2, #32]
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10f      	bne.n	8004a44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e000      	b.n	8004a4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff ff11 	bl	800489c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b22      	cmp	r3, #34	; 0x22
 8004a96:	d170      	bne.n	8004b7a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa0:	d117      	bne.n	8004ad2 <UART_Receive_IT+0x4e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d113      	bne.n	8004ad2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	1c9a      	adds	r2, r3, #2
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28
 8004ad0:	e026      	b.n	8004b20 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae4:	d007      	beq.n	8004af6 <UART_Receive_IT+0x72>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <UART_Receive_IT+0x80>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	e008      	b.n	8004b16 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d120      	bne.n	8004b76 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0220 	bic.w	r2, r2, #32
 8004b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fc f92f 	bl	8000dd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	e002      	b.n	8004b7c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e000      	b.n	8004b7c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
  }
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bbe:	f023 030c 	bic.w	r3, r3, #12
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <UART_SetConfig+0x114>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d103      	bne.n	8004bf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bec:	f7fe ff40 	bl	8003a70 <HAL_RCC_GetPCLK2Freq>
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	e002      	b.n	8004bfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bf4:	f7fe ff28 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8004bf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009a      	lsls	r2, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <UART_SetConfig+0x118>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	0119      	lsls	r1, r3, #4
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009a      	lsls	r2, r3, #2
 8004c24:	441a      	add	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c30:	4b1a      	ldr	r3, [pc, #104]	; (8004c9c <UART_SetConfig+0x118>)
 8004c32:	fba3 0302 	umull	r0, r3, r3, r2
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	2064      	movs	r0, #100	; 0x64
 8004c3a:	fb00 f303 	mul.w	r3, r0, r3
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	3332      	adds	r3, #50	; 0x32
 8004c44:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <UART_SetConfig+0x118>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c50:	4419      	add	r1, r3
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009a      	lsls	r2, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <UART_SetConfig+0x118>)
 8004c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	2064      	movs	r0, #100	; 0x64
 8004c72:	fb00 f303 	mul.w	r3, r0, r3
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	3332      	adds	r3, #50	; 0x32
 8004c7c:	4a07      	ldr	r2, [pc, #28]	; (8004c9c <UART_SetConfig+0x118>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	f003 020f 	and.w	r2, r3, #15
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	440a      	add	r2, r1
 8004c8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40013800 	.word	0x40013800
 8004c9c:	51eb851f 	.word	0x51eb851f

08004ca0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	f107 0014 	add.w	r0, r7, #20
 8004cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	b004      	add	sp, #16
 8004cbe:	4770      	bx	lr

08004cc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cd0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cd4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cf4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cf8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d38:	b084      	sub	sp, #16
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	f107 0014 	add.w	r0, r7, #20
 8004d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	b004      	add	sp, #16
 8004d76:	4770      	bx	lr

08004d78 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b09b      	sub	sp, #108	; 0x6c
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	78db      	ldrb	r3, [r3, #3]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d81f      	bhi.n	8004dea <USB_ActivateEndpoint+0x72>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <USB_ActivateEndpoint+0x38>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004df3 	.word	0x08004df3
 8004dbc:	08004dcf 	.word	0x08004dcf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004dc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dc8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004dcc:	e012      	b.n	8004df4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004dce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004dd2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004dd6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004dda:	e00b      	b.n	8004df4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ddc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004de4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004de8:	e004      	b.n	8004df4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004df0:	e000      	b.n	8004df4 <USB_ActivateEndpoint+0x7c>
      break;
 8004df2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	441a      	add	r2, r3
 8004e44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	7b1b      	ldrb	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f040 8149 	bne.w	80050f8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8084 	beq.w	8004f78 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4413      	add	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	011a      	lsls	r2, r3, #4
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	88db      	ldrh	r3, [r3, #6]
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	81fb      	strh	r3, [r7, #14]
 8004eb2:	89fb      	ldrh	r3, [r7, #14]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01b      	beq.n	8004ef4 <USB_ActivateEndpoint+0x17c>
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	81bb      	strh	r3, [r7, #12]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	441a      	add	r2, r3
 8004ede:	89bb      	ldrh	r3, [r7, #12]
 8004ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	78db      	ldrb	r3, [r3, #3]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d020      	beq.n	8004f3e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f12:	813b      	strh	r3, [r7, #8]
 8004f14:	893b      	ldrh	r3, [r7, #8]
 8004f16:	f083 0320 	eor.w	r3, r3, #32
 8004f1a:	813b      	strh	r3, [r7, #8]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	893b      	ldrh	r3, [r7, #8]
 8004f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8013      	strh	r3, [r2, #0]
 8004f3c:	e27f      	b.n	800543e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	817b      	strh	r3, [r7, #10]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	441a      	add	r2, r3
 8004f60:	897b      	ldrh	r3, [r7, #10]
 8004f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	8013      	strh	r3, [r2, #0]
 8004f76:	e262      	b.n	800543e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	4413      	add	r3, r2
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	011a      	lsls	r2, r3, #4
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	88db      	ldrh	r3, [r3, #6]
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	4413      	add	r3, r2
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	011a      	lsls	r2, r3, #4
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	4413      	add	r3, r2
 8004fca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d112      	bne.n	8004ffe <USB_ActivateEndpoint+0x286>
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	801a      	strh	r2, [r3, #0]
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	e02f      	b.n	800505e <USB_ActivateEndpoint+0x2e6>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b3e      	cmp	r3, #62	; 0x3e
 8005004:	d813      	bhi.n	800502e <USB_ActivateEndpoint+0x2b6>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	663b      	str	r3, [r7, #96]	; 0x60
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <USB_ActivateEndpoint+0x2a8>
 800501a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800501c:	3301      	adds	r3, #1
 800501e:	663b      	str	r3, [r7, #96]	; 0x60
 8005020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005022:	b29b      	uxth	r3, r3
 8005024:	029b      	lsls	r3, r3, #10
 8005026:	b29a      	uxth	r2, r3
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	801a      	strh	r2, [r3, #0]
 800502c:	e017      	b.n	800505e <USB_ActivateEndpoint+0x2e6>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	663b      	str	r3, [r7, #96]	; 0x60
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <USB_ActivateEndpoint+0x2d0>
 8005042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005044:	3b01      	subs	r3, #1
 8005046:	663b      	str	r3, [r7, #96]	; 0x60
 8005048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800504a:	b29b      	uxth	r3, r3
 800504c:	029b      	lsls	r3, r3, #10
 800504e:	b29b      	uxth	r3, r3
 8005050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005058:	b29a      	uxth	r2, r3
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	83fb      	strh	r3, [r7, #30]
 800506c:	8bfb      	ldrh	r3, [r7, #30]
 800506e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01b      	beq.n	80050ae <USB_ActivateEndpoint+0x336>
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508c:	83bb      	strh	r3, [r7, #28]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	8bbb      	ldrh	r3, [r7, #28]
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c4:	837b      	strh	r3, [r7, #26]
 80050c6:	8b7b      	ldrh	r3, [r7, #26]
 80050c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050cc:	837b      	strh	r3, [r7, #26]
 80050ce:	8b7b      	ldrh	r3, [r7, #26]
 80050d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050d4:	837b      	strh	r3, [r7, #26]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	441a      	add	r2, r3
 80050e0:	8b7b      	ldrh	r3, [r7, #26]
 80050e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	8013      	strh	r3, [r2, #0]
 80050f6:	e1a2      	b.n	800543e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005128:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800512c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005130:	b29b      	uxth	r3, r3
 8005132:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	65bb      	str	r3, [r7, #88]	; 0x58
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800513e:	b29b      	uxth	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005144:	4413      	add	r3, r2
 8005146:	65bb      	str	r3, [r7, #88]	; 0x58
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	011a      	lsls	r2, r3, #4
 800514e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005150:	4413      	add	r3, r2
 8005152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005156:	657b      	str	r3, [r7, #84]	; 0x54
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	891b      	ldrh	r3, [r3, #8]
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	653b      	str	r3, [r7, #80]	; 0x50
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005178:	4413      	add	r3, r2
 800517a:	653b      	str	r3, [r7, #80]	; 0x50
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	011a      	lsls	r2, r3, #4
 8005182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005184:	4413      	add	r3, r2
 8005186:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	895b      	ldrh	r3, [r3, #10]
 8005190:	085b      	lsrs	r3, r3, #1
 8005192:	b29b      	uxth	r3, r3
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 8091 	bne.w	80052c8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01b      	beq.n	80051f6 <USB_ActivateEndpoint+0x47e>
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	441a      	add	r2, r3
 80051e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80051e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	873b      	strh	r3, [r7, #56]	; 0x38
 8005204:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01b      	beq.n	8005246 <USB_ActivateEndpoint+0x4ce>
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005224:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800523a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005242:	b29b      	uxth	r3, r3
 8005244:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800525e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005260:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005264:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005266:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005268:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800526c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a4:	867b      	strh	r3, [r7, #50]	; 0x32
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	441a      	add	r2, r3
 80052b0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	8013      	strh	r3, [r2, #0]
 80052c6:	e0ba      	b.n	800543e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80052d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01d      	beq.n	8005320 <USB_ActivateEndpoint+0x5a8>
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	441a      	add	r2, r3
 8005308:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800530c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005330:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01d      	beq.n	8005378 <USB_ActivateEndpoint+0x600>
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005352:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	441a      	add	r2, r3
 8005360:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800536c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005370:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005374:	b29b      	uxth	r3, r3
 8005376:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	78db      	ldrb	r3, [r3, #3]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d024      	beq.n	80053ca <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005396:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800539a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800539e:	f083 0320 	eor.w	r3, r3, #32
 80053a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	441a      	add	r2, r3
 80053b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	8013      	strh	r3, [r2, #0]
 80053c8:	e01d      	b.n	8005406 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80053f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005402:	b29b      	uxth	r3, r3
 8005404:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800542a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800543e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005442:	4618      	mov	r0, r3
 8005444:	376c      	adds	r7, #108	; 0x6c
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800544c:	b480      	push	{r7}
 800544e:	b08d      	sub	sp, #52	; 0x34
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	7b1b      	ldrb	r3, [r3, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 808e 	bne.w	800557c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d044      	beq.n	80054f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	81bb      	strh	r3, [r7, #12]
 8005476:	89bb      	ldrh	r3, [r7, #12]
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01b      	beq.n	80054b8 <USB_DeactivateEndpoint+0x6c>
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	817b      	strh	r3, [r7, #10]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	897b      	ldrh	r3, [r7, #10]
 80054a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ce:	813b      	strh	r3, [r7, #8]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	441a      	add	r2, r3
 80054da:	893b      	ldrh	r3, [r7, #8]
 80054dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	8013      	strh	r3, [r2, #0]
 80054f0:	e192      	b.n	8005818 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	827b      	strh	r3, [r7, #18]
 8005500:	8a7b      	ldrh	r3, [r7, #18]
 8005502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01b      	beq.n	8005542 <USB_DeactivateEndpoint+0xf6>
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005520:	823b      	strh	r3, [r7, #16]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	8a3b      	ldrh	r3, [r7, #16]
 800552e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800553a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553e:	b29b      	uxth	r3, r3
 8005540:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	81fb      	strh	r3, [r7, #14]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	441a      	add	r2, r3
 8005564:	89fb      	ldrh	r3, [r7, #14]
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]
 800557a:	e14d      	b.n	8005818 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f040 80a5 	bne.w	80056d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	843b      	strh	r3, [r7, #32]
 8005594:	8c3b      	ldrh	r3, [r7, #32]
 8005596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01b      	beq.n	80055d6 <USB_DeactivateEndpoint+0x18a>
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b4:	83fb      	strh	r3, [r7, #30]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	441a      	add	r2, r3
 80055c0:	8bfb      	ldrh	r3, [r7, #30]
 80055c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	83bb      	strh	r3, [r7, #28]
 80055e4:	8bbb      	ldrh	r3, [r7, #28]
 80055e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01b      	beq.n	8005626 <USB_DeactivateEndpoint+0x1da>
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005604:	837b      	strh	r3, [r7, #26]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	441a      	add	r2, r3
 8005610:	8b7b      	ldrh	r3, [r7, #26]
 8005612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005622:	b29b      	uxth	r3, r3
 8005624:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563c:	833b      	strh	r3, [r7, #24]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	441a      	add	r2, r3
 8005648:	8b3b      	ldrh	r3, [r7, #24]
 800564a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005656:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800565a:	b29b      	uxth	r3, r3
 800565c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005674:	82fb      	strh	r3, [r7, #22]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	441a      	add	r2, r3
 8005680:	8afb      	ldrh	r3, [r7, #22]
 8005682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800568e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005692:	b29b      	uxth	r3, r3
 8005694:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ac:	82bb      	strh	r3, [r7, #20]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	8abb      	ldrh	r3, [r7, #20]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]
 80056ce:	e0a3      	b.n	8005818 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01b      	beq.n	8005720 <USB_DeactivateEndpoint+0x2d4>
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	441a      	add	r2, r3
 800570a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800570c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571c:	b29b      	uxth	r3, r3
 800571e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800572e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01b      	beq.n	8005770 <USB_DeactivateEndpoint+0x324>
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	441a      	add	r2, r3
 800575a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800575c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005768:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800576c:	b29b      	uxth	r3, r3
 800576e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	441a      	add	r2, r3
 8005792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057dc:	b29b      	uxth	r3, r3
 80057de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005814:	b29b      	uxth	r3, r3
 8005816:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3734      	adds	r7, #52	; 0x34
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr

08005824 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b0c4      	sub	sp, #272	; 0x110
 8005828:	af00      	add	r7, sp, #0
 800582a:	1d3b      	adds	r3, r7, #4
 800582c:	6018      	str	r0, [r3, #0]
 800582e:	463b      	mov	r3, r7
 8005830:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005832:	463b      	mov	r3, r7
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	785b      	ldrb	r3, [r3, #1]
 8005838:	2b01      	cmp	r3, #1
 800583a:	f040 8557 	bne.w	80062ec <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	463b      	mov	r3, r7
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	429a      	cmp	r2, r3
 800584c:	d905      	bls.n	800585a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800584e:	463b      	mov	r3, r7
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005858:	e004      	b.n	8005864 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800585a:	463b      	mov	r3, r7
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	7b1b      	ldrb	r3, [r3, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d12c      	bne.n	80058c8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800586e:	463b      	mov	r3, r7
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6959      	ldr	r1, [r3, #20]
 8005874:	463b      	mov	r3, r7
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	88da      	ldrh	r2, [r3, #6]
 800587a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800587e:	b29b      	uxth	r3, r3
 8005880:	1d38      	adds	r0, r7, #4
 8005882:	6800      	ldr	r0, [r0, #0]
 8005884:	f001 fa2c 	bl	8006ce0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005896:	b29b      	uxth	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	011a      	lsls	r2, r3, #4
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4413      	add	r3, r2
 80058ac:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058b0:	f107 0310 	add.w	r3, r7, #16
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	f107 0310 	add.w	r3, r7, #16
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	f000 bcdd 	b.w	8006282 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058c8:	463b      	mov	r3, r7
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	78db      	ldrb	r3, [r3, #3]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	f040 8347 	bne.w	8005f62 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058d4:	463b      	mov	r3, r7
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6a1a      	ldr	r2, [r3, #32]
 80058da:	463b      	mov	r3, r7
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	f240 82eb 	bls.w	8005ebc <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	463b      	mov	r3, r7
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005900:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005904:	1d3b      	adds	r3, r7, #4
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	463b      	mov	r3, r7
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	441a      	add	r2, r3
 8005912:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800591e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800592a:	463b      	mov	r3, r7
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6a1a      	ldr	r2, [r3, #32]
 8005930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005934:	1ad2      	subs	r2, r2, r3
 8005936:	463b      	mov	r3, r7
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	463b      	mov	r3, r7
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8159 	beq.w	8005c0a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d164      	bne.n	8005a32 <USB_EPStartXfer+0x20e>
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800596e:	1d3b      	adds	r3, r7, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005976:	b29b      	uxth	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	4413      	add	r3, r2
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005980:	463b      	mov	r3, r7
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	011a      	lsls	r2, r3, #4
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	4413      	add	r3, r2
 800598c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005990:	62bb      	str	r3, [r7, #40]	; 0x28
 8005992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d112      	bne.n	80059c0 <USB_EPStartXfer+0x19c>
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e054      	b.n	8005a6a <USB_EPStartXfer+0x246>
 80059c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c4:	2b3e      	cmp	r3, #62	; 0x3e
 80059c6:	d817      	bhi.n	80059f8 <USB_EPStartXfer+0x1d4>
 80059c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <USB_EPStartXfer+0x1c4>
 80059de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e2:	3301      	adds	r3, #1
 80059e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	029b      	lsls	r3, r3, #10
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	e038      	b.n	8005a6a <USB_EPStartXfer+0x246>
 80059f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <USB_EPStartXfer+0x1f4>
 8005a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a12:	3b01      	subs	r3, #1
 8005a14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	029b      	lsls	r3, r3, #10
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	e01b      	b.n	8005a6a <USB_EPStartXfer+0x246>
 8005a32:	463b      	mov	r3, r7
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d116      	bne.n	8005a6a <USB_EPStartXfer+0x246>
 8005a3c:	1d3b      	adds	r3, r7, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4a:	4413      	add	r3, r2
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a4e:	463b      	mov	r3, r7
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	011a      	lsls	r2, r3, #4
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	895b      	ldrh	r3, [r3, #10]
 8005a70:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a74:	463b      	mov	r3, r7
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6959      	ldr	r1, [r3, #20]
 8005a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005a84:	1d38      	adds	r0, r7, #4
 8005a86:	6800      	ldr	r0, [r0, #0]
 8005a88:	f001 f92a 	bl	8006ce0 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695a      	ldr	r2, [r3, #20]
 8005a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a96:	441a      	add	r2, r3
 8005a98:	463b      	mov	r3, r7
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d909      	bls.n	8005ac2 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a1a      	ldr	r2, [r3, #32]
 8005ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab8:	1ad2      	subs	r2, r2, r3
 8005aba:	463b      	mov	r3, r7
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	621a      	str	r2, [r3, #32]
 8005ac0:	e008      	b.n	8005ad4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d164      	bne.n	8005ba8 <USB_EPStartXfer+0x384>
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d112      	bne.n	8005b36 <USB_EPStartXfer+0x312>
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	e057      	b.n	8005be6 <USB_EPStartXfer+0x3c2>
 8005b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b3c:	d817      	bhi.n	8005b6e <USB_EPStartXfer+0x34a>
 8005b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <USB_EPStartXfer+0x33a>
 8005b54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	029b      	lsls	r3, r3, #10
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	e03b      	b.n	8005be6 <USB_EPStartXfer+0x3c2>
 8005b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b7c:	f003 031f 	and.w	r3, r3, #31
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d104      	bne.n	8005b8e <USB_EPStartXfer+0x36a>
 8005b84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	029b      	lsls	r3, r3, #10
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e01e      	b.n	8005be6 <USB_EPStartXfer+0x3c2>
 8005ba8:	463b      	mov	r3, r7
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d119      	bne.n	8005be6 <USB_EPStartXfer+0x3c2>
 8005bb2:	1d3b      	adds	r3, r7, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	4413      	add	r3, r2
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bca:	463b      	mov	r3, r7
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	011a      	lsls	r2, r3, #4
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bda:	623b      	str	r3, [r7, #32]
 8005bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005be6:	463b      	mov	r3, r7
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	891b      	ldrh	r3, [r3, #8]
 8005bec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6959      	ldr	r1, [r3, #20]
 8005bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c00:	1d38      	adds	r0, r7, #4
 8005c02:	6800      	ldr	r0, [r0, #0]
 8005c04:	f001 f86c 	bl	8006ce0 <USB_WritePMA>
 8005c08:	e33b      	b.n	8006282 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d164      	bne.n	8005cde <USB_EPStartXfer+0x4ba>
 8005c14:	1d3b      	adds	r3, r7, #4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c28:	4413      	add	r3, r2
 8005c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	011a      	lsls	r2, r3, #4
 8005c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c36:	4413      	add	r3, r2
 8005c38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d112      	bne.n	8005c6c <USB_EPStartXfer+0x448>
 8005c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	e057      	b.n	8005d1c <USB_EPStartXfer+0x4f8>
 8005c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c70:	2b3e      	cmp	r3, #62	; 0x3e
 8005c72:	d817      	bhi.n	8005ca4 <USB_EPStartXfer+0x480>
 8005c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <USB_EPStartXfer+0x470>
 8005c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c8e:	3301      	adds	r3, #1
 8005c90:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	e03b      	b.n	8005d1c <USB_EPStartXfer+0x4f8>
 8005ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <USB_EPStartXfer+0x4a0>
 8005cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	029b      	lsls	r3, r3, #10
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cda:	801a      	strh	r2, [r3, #0]
 8005cdc:	e01e      	b.n	8005d1c <USB_EPStartXfer+0x4f8>
 8005cde:	463b      	mov	r3, r7
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d119      	bne.n	8005d1c <USB_EPStartXfer+0x4f8>
 8005ce8:	1d3b      	adds	r3, r7, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	657b      	str	r3, [r7, #84]	; 0x54
 8005cee:	1d3b      	adds	r3, r7, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cfc:	4413      	add	r3, r2
 8005cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8005d00:	463b      	mov	r3, r7
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	011a      	lsls	r2, r3, #4
 8005d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d10:	653b      	str	r3, [r7, #80]	; 0x50
 8005d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	891b      	ldrh	r3, [r3, #8]
 8005d22:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d26:	463b      	mov	r3, r7
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6959      	ldr	r1, [r3, #20]
 8005d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005d36:	1d38      	adds	r0, r7, #4
 8005d38:	6800      	ldr	r0, [r0, #0]
 8005d3a:	f000 ffd1 	bl	8006ce0 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d3e:	463b      	mov	r3, r7
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d48:	441a      	add	r2, r3
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6a1a      	ldr	r2, [r3, #32]
 8005d56:	463b      	mov	r3, r7
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d909      	bls.n	8005d74 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005d60:	463b      	mov	r3, r7
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a1a      	ldr	r2, [r3, #32]
 8005d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6a:	1ad2      	subs	r2, r2, r3
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	621a      	str	r2, [r3, #32]
 8005d72:	e008      	b.n	8005d86 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d74:	463b      	mov	r3, r7
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005d7e:	463b      	mov	r3, r7
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2200      	movs	r2, #0
 8005d84:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d86:	1d3b      	adds	r3, r7, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	785b      	ldrb	r3, [r3, #1]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d164      	bne.n	8005e60 <USB_EPStartXfer+0x63c>
 8005d96:	1d3b      	adds	r3, r7, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d9c:	1d3b      	adds	r3, r7, #4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005daa:	4413      	add	r3, r2
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dae:	463b      	mov	r3, r7
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	011a      	lsls	r2, r3, #4
 8005db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db8:	4413      	add	r3, r2
 8005dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d112      	bne.n	8005dee <USB_EPStartXfer+0x5ca>
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e054      	b.n	8005e98 <USB_EPStartXfer+0x674>
 8005dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df2:	2b3e      	cmp	r3, #62	; 0x3e
 8005df4:	d817      	bhi.n	8005e26 <USB_EPStartXfer+0x602>
 8005df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfa:	085b      	lsrs	r3, r3, #1
 8005dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <USB_EPStartXfer+0x5f2>
 8005e0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e10:	3301      	adds	r3, #1
 8005e12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	029b      	lsls	r3, r3, #10
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e038      	b.n	8005e98 <USB_EPStartXfer+0x674>
 8005e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <USB_EPStartXfer+0x622>
 8005e3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e40:	3b01      	subs	r3, #1
 8005e42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	029b      	lsls	r3, r3, #10
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	801a      	strh	r2, [r3, #0]
 8005e5e:	e01b      	b.n	8005e98 <USB_EPStartXfer+0x674>
 8005e60:	463b      	mov	r3, r7
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d116      	bne.n	8005e98 <USB_EPStartXfer+0x674>
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e78:	4413      	add	r3, r2
 8005e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	011a      	lsls	r2, r3, #4
 8005e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e86:	4413      	add	r3, r2
 8005e88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e98:	463b      	mov	r3, r7
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	895b      	ldrh	r3, [r3, #10]
 8005e9e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6959      	ldr	r1, [r3, #20]
 8005ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005eb2:	1d38      	adds	r0, r7, #4
 8005eb4:	6800      	ldr	r0, [r0, #0]
 8005eb6:	f000 ff13 	bl	8006ce0 <USB_WritePMA>
 8005eba:	e1e2      	b.n	8006282 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005ec6:	1d3b      	adds	r3, r7, #4
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	463b      	mov	r3, r7
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	463b      	mov	r3, r7
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	441a      	add	r2, r3
 8005ef2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f0a:	1d3b      	adds	r3, r7, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005f10:	1d3b      	adds	r3, r7, #4
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f1e:	4413      	add	r3, r2
 8005f20:	663b      	str	r3, [r7, #96]	; 0x60
 8005f22:	463b      	mov	r3, r7
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	011a      	lsls	r2, r3, #4
 8005f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f3e:	463b      	mov	r3, r7
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	891b      	ldrh	r3, [r3, #8]
 8005f44:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f48:	463b      	mov	r3, r7
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6959      	ldr	r1, [r3, #20]
 8005f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005f58:	1d38      	adds	r0, r7, #4
 8005f5a:	6800      	ldr	r0, [r0, #0]
 8005f5c:	f000 fec0 	bl	8006ce0 <USB_WritePMA>
 8005f60:	e18f      	b.n	8006282 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	463b      	mov	r3, r7
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 808f 	beq.w	800609c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f84:	463b      	mov	r3, r7
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d164      	bne.n	8006058 <USB_EPStartXfer+0x834>
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	673b      	str	r3, [r7, #112]	; 0x70
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa2:	4413      	add	r3, r2
 8005fa4:	673b      	str	r3, [r7, #112]	; 0x70
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	011a      	lsls	r2, r3, #4
 8005fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d112      	bne.n	8005fe6 <USB_EPStartXfer+0x7c2>
 8005fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	e054      	b.n	8006090 <USB_EPStartXfer+0x86c>
 8005fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fea:	2b3e      	cmp	r3, #62	; 0x3e
 8005fec:	d817      	bhi.n	800601e <USB_EPStartXfer+0x7fa>
 8005fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d004      	beq.n	800600e <USB_EPStartXfer+0x7ea>
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	3301      	adds	r3, #1
 800600a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006012:	b29b      	uxth	r3, r3
 8006014:	029b      	lsls	r3, r3, #10
 8006016:	b29a      	uxth	r2, r3
 8006018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	e038      	b.n	8006090 <USB_EPStartXfer+0x86c>
 800601e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <USB_EPStartXfer+0x81a>
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006038:	3b01      	subs	r3, #1
 800603a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800603e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006042:	b29b      	uxth	r3, r3
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	b29b      	uxth	r3, r3
 8006048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800604c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006050:	b29a      	uxth	r2, r3
 8006052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	e01b      	b.n	8006090 <USB_EPStartXfer+0x86c>
 8006058:	463b      	mov	r3, r7
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d116      	bne.n	8006090 <USB_EPStartXfer+0x86c>
 8006062:	1d3b      	adds	r3, r7, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606a:	b29b      	uxth	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006070:	4413      	add	r3, r2
 8006072:	67bb      	str	r3, [r7, #120]	; 0x78
 8006074:	463b      	mov	r3, r7
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	011a      	lsls	r2, r3, #4
 800607c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607e:	4413      	add	r3, r2
 8006080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006084:	677b      	str	r3, [r7, #116]	; 0x74
 8006086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800608a:	b29a      	uxth	r2, r3
 800608c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800608e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006090:	463b      	mov	r3, r7
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	895b      	ldrh	r3, [r3, #10]
 8006096:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800609a:	e097      	b.n	80061cc <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800609c:	463b      	mov	r3, r7
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d168      	bne.n	8006178 <USB_EPStartXfer+0x954>
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060ae:	1d3b      	adds	r3, r7, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060be:	4413      	add	r3, r2
 80060c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	011a      	lsls	r2, r3, #4
 80060cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060d0:	4413      	add	r3, r2
 80060d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d112      	bne.n	8006106 <USB_EPStartXfer+0x8e2>
 80060e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fe:	b29a      	uxth	r2, r3
 8006100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	e05d      	b.n	80061c2 <USB_EPStartXfer+0x99e>
 8006106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800610a:	2b3e      	cmp	r3, #62	; 0x3e
 800610c:	d817      	bhi.n	800613e <USB_EPStartXfer+0x91a>
 800610e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006112:	085b      	lsrs	r3, r3, #1
 8006114:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <USB_EPStartXfer+0x90a>
 8006124:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006128:	3301      	adds	r3, #1
 800612a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800612e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006132:	b29b      	uxth	r3, r3
 8006134:	029b      	lsls	r3, r3, #10
 8006136:	b29a      	uxth	r2, r3
 8006138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	e041      	b.n	80061c2 <USB_EPStartXfer+0x99e>
 800613e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800614c:	f003 031f 	and.w	r3, r3, #31
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <USB_EPStartXfer+0x93a>
 8006154:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006158:	3b01      	subs	r3, #1
 800615a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800615e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006162:	b29b      	uxth	r3, r3
 8006164:	029b      	lsls	r3, r3, #10
 8006166:	b29b      	uxth	r3, r3
 8006168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006170:	b29a      	uxth	r2, r3
 8006172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	e024      	b.n	80061c2 <USB_EPStartXfer+0x99e>
 8006178:	463b      	mov	r3, r7
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	785b      	ldrb	r3, [r3, #1]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d11f      	bne.n	80061c2 <USB_EPStartXfer+0x99e>
 8006182:	1d3b      	adds	r3, r7, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800618a:	1d3b      	adds	r3, r7, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006192:	b29b      	uxth	r3, r3
 8006194:	461a      	mov	r2, r3
 8006196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800619a:	4413      	add	r3, r2
 800619c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061a0:	463b      	mov	r3, r7
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	011a      	lsls	r2, r3, #4
 80061a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061ac:	4413      	add	r3, r2
 80061ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061c2:	463b      	mov	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	891b      	ldrh	r3, [r3, #8]
 80061c8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061cc:	463b      	mov	r3, r7
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6959      	ldr	r1, [r3, #20]
 80061d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80061dc:	1d38      	adds	r0, r7, #4
 80061de:	6800      	ldr	r0, [r0, #0]
 80061e0:	f000 fd7e 	bl	8006ce0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80061e4:	463b      	mov	r3, r7
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d122      	bne.n	8006234 <USB_EPStartXfer+0xa10>
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006208:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800620c:	1d3b      	adds	r3, r7, #4
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	463b      	mov	r3, r7
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800621e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800622e:	b29b      	uxth	r3, r3
 8006230:	8013      	strh	r3, [r2, #0]
 8006232:	e026      	b.n	8006282 <USB_EPStartXfer+0xa5e>
 8006234:	463b      	mov	r3, r7
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	785b      	ldrb	r3, [r3, #1]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d121      	bne.n	8006282 <USB_EPStartXfer+0xa5e>
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	463b      	mov	r3, r7
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006258:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800625c:	1d3b      	adds	r3, r7, #4
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	463b      	mov	r3, r7
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006276:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006282:	1d3b      	adds	r3, r7, #4
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	463b      	mov	r3, r7
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	f107 020e 	add.w	r2, r7, #14
 8006298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a0:	8013      	strh	r3, [r2, #0]
 80062a2:	f107 030e 	add.w	r3, r7, #14
 80062a6:	f107 020e 	add.w	r2, r7, #14
 80062aa:	8812      	ldrh	r2, [r2, #0]
 80062ac:	f082 0210 	eor.w	r2, r2, #16
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	f107 030e 	add.w	r3, r7, #14
 80062b6:	f107 020e 	add.w	r2, r7, #14
 80062ba:	8812      	ldrh	r2, [r2, #0]
 80062bc:	f082 0220 	eor.w	r2, r2, #32
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	1d3b      	adds	r3, r7, #4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	463b      	mov	r3, r7
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	441a      	add	r2, r3
 80062d0:	f107 030e 	add.w	r3, r7, #14
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8013      	strh	r3, [r2, #0]
 80062ea:	e3b5      	b.n	8006a58 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80062ec:	463b      	mov	r3, r7
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	7b1b      	ldrb	r3, [r3, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 8090 	bne.w	8006418 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80062f8:	463b      	mov	r3, r7
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699a      	ldr	r2, [r3, #24]
 80062fe:	463b      	mov	r3, r7
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	429a      	cmp	r2, r3
 8006306:	d90e      	bls.n	8006326 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006308:	463b      	mov	r3, r7
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006312:	463b      	mov	r3, r7
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631c:	1ad2      	subs	r2, r2, r3
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	619a      	str	r2, [r3, #24]
 8006324:	e008      	b.n	8006338 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006326:	463b      	mov	r3, r7
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2200      	movs	r2, #0
 8006336:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006338:	1d3b      	adds	r3, r7, #4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006340:	1d3b      	adds	r3, r7, #4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006350:	4413      	add	r3, r2
 8006352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006356:	463b      	mov	r3, r7
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	011a      	lsls	r2, r3, #4
 800635e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006362:	4413      	add	r3, r2
 8006364:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800636c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d116      	bne.n	80063a2 <USB_EPStartXfer+0xb7e>
 8006374:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006380:	b29a      	uxth	r2, r3
 8006382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006398:	b29a      	uxth	r2, r3
 800639a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e32c      	b.n	80069fc <USB_EPStartXfer+0x11d8>
 80063a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a6:	2b3e      	cmp	r3, #62	; 0x3e
 80063a8:	d818      	bhi.n	80063dc <USB_EPStartXfer+0xbb8>
 80063aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <USB_EPStartXfer+0xba6>
 80063c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063c4:	3301      	adds	r3, #1
 80063c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	029b      	lsls	r3, r3, #10
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	e30f      	b.n	80069fc <USB_EPStartXfer+0x11d8>
 80063dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <USB_EPStartXfer+0xbd8>
 80063f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063f6:	3b01      	subs	r3, #1
 80063f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006400:	b29b      	uxth	r3, r3
 8006402:	029b      	lsls	r3, r3, #10
 8006404:	b29b      	uxth	r3, r3
 8006406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800640a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640e:	b29a      	uxth	r2, r3
 8006410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	e2f1      	b.n	80069fc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006418:	463b      	mov	r3, r7
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	78db      	ldrb	r3, [r3, #3]
 800641e:	2b02      	cmp	r3, #2
 8006420:	f040 818f 	bne.w	8006742 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006424:	463b      	mov	r3, r7
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d175      	bne.n	800651a <USB_EPStartXfer+0xcf6>
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643e:	b29b      	uxth	r3, r3
 8006440:	461a      	mov	r2, r3
 8006442:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006446:	4413      	add	r3, r2
 8006448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	011a      	lsls	r2, r3, #4
 8006454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006458:	4413      	add	r3, r2
 800645a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800645e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006462:	463b      	mov	r3, r7
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d116      	bne.n	800649a <USB_EPStartXfer+0xc76>
 800646c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006478:	b29a      	uxth	r2, r3
 800647a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800648c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006490:	b29a      	uxth	r2, r3
 8006492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006496:	801a      	strh	r2, [r3, #0]
 8006498:	e065      	b.n	8006566 <USB_EPStartXfer+0xd42>
 800649a:	463b      	mov	r3, r7
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b3e      	cmp	r3, #62	; 0x3e
 80064a2:	d81a      	bhi.n	80064da <USB_EPStartXfer+0xcb6>
 80064a4:	463b      	mov	r3, r7
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064b0:	463b      	mov	r3, r7
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <USB_EPStartXfer+0xca4>
 80064be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064c2:	3301      	adds	r3, #1
 80064c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	029b      	lsls	r3, r3, #10
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	e045      	b.n	8006566 <USB_EPStartXfer+0xd42>
 80064da:	463b      	mov	r3, r7
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064e6:	463b      	mov	r3, r7
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <USB_EPStartXfer+0xcda>
 80064f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064f8:	3b01      	subs	r3, #1
 80064fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006502:	b29b      	uxth	r3, r3
 8006504:	029b      	lsls	r3, r3, #10
 8006506:	b29b      	uxth	r3, r3
 8006508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006510:	b29a      	uxth	r2, r3
 8006512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e025      	b.n	8006566 <USB_EPStartXfer+0xd42>
 800651a:	463b      	mov	r3, r7
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d120      	bne.n	8006566 <USB_EPStartXfer+0xd42>
 8006524:	1d3b      	adds	r3, r7, #4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800652c:	1d3b      	adds	r3, r7, #4
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006534:	b29b      	uxth	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800653c:	4413      	add	r3, r2
 800653e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	011a      	lsls	r2, r3, #4
 800654a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800654e:	4413      	add	r3, r2
 8006550:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006558:	463b      	mov	r3, r7
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800656e:	463b      	mov	r3, r7
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d175      	bne.n	8006664 <USB_EPStartXfer+0xe40>
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006580:	1d3b      	adds	r3, r7, #4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006588:	b29b      	uxth	r3, r3
 800658a:	461a      	mov	r2, r3
 800658c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006590:	4413      	add	r3, r2
 8006592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006596:	463b      	mov	r3, r7
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	011a      	lsls	r2, r3, #4
 800659e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065a2:	4413      	add	r3, r2
 80065a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065ac:	463b      	mov	r3, r7
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d116      	bne.n	80065e4 <USB_EPStartXfer+0xdc0>
 80065b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065da:	b29a      	uxth	r2, r3
 80065dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e061      	b.n	80066a8 <USB_EPStartXfer+0xe84>
 80065e4:	463b      	mov	r3, r7
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b3e      	cmp	r3, #62	; 0x3e
 80065ec:	d81a      	bhi.n	8006624 <USB_EPStartXfer+0xe00>
 80065ee:	463b      	mov	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065fa:	463b      	mov	r3, r7
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <USB_EPStartXfer+0xdee>
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660c:	3301      	adds	r3, #1
 800660e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006616:	b29b      	uxth	r3, r3
 8006618:	029b      	lsls	r3, r3, #10
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	e041      	b.n	80066a8 <USB_EPStartXfer+0xe84>
 8006624:	463b      	mov	r3, r7
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006630:	463b      	mov	r3, r7
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 031f 	and.w	r3, r3, #31
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <USB_EPStartXfer+0xe24>
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006642:	3b01      	subs	r3, #1
 8006644:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664c:	b29b      	uxth	r3, r3
 800664e:	029b      	lsls	r3, r3, #10
 8006650:	b29b      	uxth	r3, r3
 8006652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665a:	b29a      	uxth	r2, r3
 800665c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006660:	801a      	strh	r2, [r3, #0]
 8006662:	e021      	b.n	80066a8 <USB_EPStartXfer+0xe84>
 8006664:	463b      	mov	r3, r7
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	785b      	ldrb	r3, [r3, #1]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d11c      	bne.n	80066a8 <USB_EPStartXfer+0xe84>
 800666e:	1d3b      	adds	r3, r7, #4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006676:	b29b      	uxth	r3, r3
 8006678:	461a      	mov	r2, r3
 800667a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800667e:	4413      	add	r3, r2
 8006680:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006684:	463b      	mov	r3, r7
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	011a      	lsls	r2, r3, #4
 800668c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006690:	4413      	add	r3, r2
 8006692:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800669a:	463b      	mov	r3, r7
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066a6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 81a4 	beq.w	80069fc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80066b4:	1d3b      	adds	r3, r7, #4
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80066cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <USB_EPStartXfer+0xebc>
 80066d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80066d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10d      	bne.n	80066fc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80066e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f040 8187 	bne.w	80069fc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80066ee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f040 8180 	bne.w	80069fc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80066fc:	1d3b      	adds	r3, r7, #4
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	463b      	mov	r3, r7
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800671a:	1d3b      	adds	r3, r7, #4
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	463b      	mov	r3, r7
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800672c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800673c:	b29b      	uxth	r3, r3
 800673e:	8013      	strh	r3, [r2, #0]
 8006740:	e15c      	b.n	80069fc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006742:	463b      	mov	r3, r7
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	78db      	ldrb	r3, [r3, #3]
 8006748:	2b01      	cmp	r3, #1
 800674a:	f040 8155 	bne.w	80069f8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800674e:	463b      	mov	r3, r7
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	463b      	mov	r3, r7
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	429a      	cmp	r2, r3
 800675c:	d90e      	bls.n	800677c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800675e:	463b      	mov	r3, r7
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006768:	463b      	mov	r3, r7
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006772:	1ad2      	subs	r2, r2, r3
 8006774:	463b      	mov	r3, r7
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	619a      	str	r2, [r3, #24]
 800677a:	e008      	b.n	800678e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800677c:	463b      	mov	r3, r7
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006786:	463b      	mov	r3, r7
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2200      	movs	r2, #0
 800678c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800678e:	463b      	mov	r3, r7
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d16f      	bne.n	8006878 <USB_EPStartXfer+0x1054>
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067a0:	1d3b      	adds	r3, r7, #4
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067b0:	4413      	add	r3, r2
 80067b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067b6:	463b      	mov	r3, r7
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	011a      	lsls	r2, r3, #4
 80067be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067c2:	4413      	add	r3, r2
 80067c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d116      	bne.n	8006802 <USB_EPStartXfer+0xfde>
 80067d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067e6:	801a      	strh	r2, [r3, #0]
 80067e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e05f      	b.n	80068c2 <USB_EPStartXfer+0x109e>
 8006802:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006806:	2b3e      	cmp	r3, #62	; 0x3e
 8006808:	d818      	bhi.n	800683c <USB_EPStartXfer+0x1018>
 800680a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <USB_EPStartXfer+0x1006>
 8006820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006824:	3301      	adds	r3, #1
 8006826:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800682a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682e:	b29b      	uxth	r3, r3
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	b29a      	uxth	r2, r3
 8006834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e042      	b.n	80068c2 <USB_EPStartXfer+0x109e>
 800683c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800684a:	f003 031f 	and.w	r3, r3, #31
 800684e:	2b00      	cmp	r3, #0
 8006850:	d104      	bne.n	800685c <USB_EPStartXfer+0x1038>
 8006852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006856:	3b01      	subs	r3, #1
 8006858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800685c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006860:	b29b      	uxth	r3, r3
 8006862:	029b      	lsls	r3, r3, #10
 8006864:	b29b      	uxth	r3, r3
 8006866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006874:	801a      	strh	r2, [r3, #0]
 8006876:	e024      	b.n	80068c2 <USB_EPStartXfer+0x109e>
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d11f      	bne.n	80068c2 <USB_EPStartXfer+0x109e>
 8006882:	1d3b      	adds	r3, r7, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800688a:	1d3b      	adds	r3, r7, #4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800689a:	4413      	add	r3, r2
 800689c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068a0:	463b      	mov	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	011a      	lsls	r2, r3, #4
 80068a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ac:	4413      	add	r3, r2
 80068ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	1d3b      	adds	r3, r7, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068ca:	463b      	mov	r3, r7
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d16f      	bne.n	80069b4 <USB_EPStartXfer+0x1190>
 80068d4:	1d3b      	adds	r3, r7, #4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068dc:	1d3b      	adds	r3, r7, #4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068ec:	4413      	add	r3, r2
 80068ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068f2:	463b      	mov	r3, r7
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	011a      	lsls	r2, r3, #4
 80068fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068fe:	4413      	add	r3, r2
 8006900:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d116      	bne.n	800693e <USB_EPStartXfer+0x111a>
 8006910:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800691c:	b29a      	uxth	r2, r3
 800691e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006934:	b29a      	uxth	r2, r3
 8006936:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e05e      	b.n	80069fc <USB_EPStartXfer+0x11d8>
 800693e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006942:	2b3e      	cmp	r3, #62	; 0x3e
 8006944:	d818      	bhi.n	8006978 <USB_EPStartXfer+0x1154>
 8006946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <USB_EPStartXfer+0x1142>
 800695c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006960:	3301      	adds	r3, #1
 8006962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800696a:	b29b      	uxth	r3, r3
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	b29a      	uxth	r2, r3
 8006970:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	e041      	b.n	80069fc <USB_EPStartXfer+0x11d8>
 8006978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	2b00      	cmp	r3, #0
 800698c:	d104      	bne.n	8006998 <USB_EPStartXfer+0x1174>
 800698e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006992:	3b01      	subs	r3, #1
 8006994:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800699c:	b29b      	uxth	r3, r3
 800699e:	029b      	lsls	r3, r3, #10
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069b0:	801a      	strh	r2, [r3, #0]
 80069b2:	e023      	b.n	80069fc <USB_EPStartXfer+0x11d8>
 80069b4:	463b      	mov	r3, r7
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	785b      	ldrb	r3, [r3, #1]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d11e      	bne.n	80069fc <USB_EPStartXfer+0x11d8>
 80069be:	1d3b      	adds	r3, r7, #4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	461a      	mov	r2, r3
 80069ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ce:	4413      	add	r3, r2
 80069d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069d4:	463b      	mov	r3, r7
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	011a      	lsls	r2, r3, #4
 80069dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069e0:	4413      	add	r3, r2
 80069e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80069f4:	801a      	strh	r2, [r3, #0]
 80069f6:	e001      	b.n	80069fc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e02e      	b.n	8006a5a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069fc:	1d3b      	adds	r3, r7, #4
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	463b      	mov	r3, r7
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a1a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a22:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	463b      	mov	r3, r7
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d020      	beq.n	8006ab8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8c:	81bb      	strh	r3, [r7, #12]
 8006a8e:	89bb      	ldrh	r3, [r7, #12]
 8006a90:	f083 0310 	eor.w	r3, r3, #16
 8006a94:	81bb      	strh	r3, [r7, #12]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	441a      	add	r2, r3
 8006aa0:	89bb      	ldrh	r3, [r7, #12]
 8006aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	8013      	strh	r3, [r2, #0]
 8006ab6:	e01f      	b.n	8006af8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ace:	81fb      	strh	r3, [r7, #14]
 8006ad0:	89fb      	ldrh	r3, [r7, #14]
 8006ad2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ad6:	81fb      	strh	r3, [r7, #14]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	441a      	add	r2, r3
 8006ae2:	89fb      	ldrh	r3, [r7, #14]
 8006ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc80      	pop	{r7}
 8006b02:	4770      	bx	lr

08006b04 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	7b1b      	ldrb	r3, [r3, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f040 809d 	bne.w	8006c52 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d04c      	beq.n	8006bba <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	823b      	strh	r3, [r7, #16]
 8006b2e:	8a3b      	ldrh	r3, [r7, #16]
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01b      	beq.n	8006b70 <USB_EPClearStall+0x6c>
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	81fb      	strh	r3, [r7, #14]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	441a      	add	r2, r3
 8006b5a:	89fb      	ldrh	r3, [r7, #14]
 8006b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	78db      	ldrb	r3, [r3, #3]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d06c      	beq.n	8006c52 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8e:	81bb      	strh	r3, [r7, #12]
 8006b90:	89bb      	ldrh	r3, [r7, #12]
 8006b92:	f083 0320 	eor.w	r3, r3, #32
 8006b96:	81bb      	strh	r3, [r7, #12]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	441a      	add	r2, r3
 8006ba2:	89bb      	ldrh	r3, [r7, #12]
 8006ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	8013      	strh	r3, [r2, #0]
 8006bb8:	e04b      	b.n	8006c52 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	82fb      	strh	r3, [r7, #22]
 8006bc8:	8afb      	ldrh	r3, [r7, #22]
 8006bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01b      	beq.n	8006c0a <USB_EPClearStall+0x106>
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be8:	82bb      	strh	r3, [r7, #20]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	441a      	add	r2, r3
 8006bf4:	8abb      	ldrh	r3, [r7, #20]
 8006bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c20:	827b      	strh	r3, [r7, #18]
 8006c22:	8a7b      	ldrh	r3, [r7, #18]
 8006c24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c28:	827b      	strh	r3, [r7, #18]
 8006c2a:	8a7b      	ldrh	r3, [r7, #18]
 8006c2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c30:	827b      	strh	r3, [r7, #18]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	441a      	add	r2, r3
 8006c3c:	8a7b      	ldrh	r3, [r7, #18]
 8006c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr

08006c5e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c6a:	78fb      	ldrb	r3, [r7, #3]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d103      	bne.n	8006c78 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2280      	movs	r2, #128	; 0x80
 8006c74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr

08006c84 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr

08006cca <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr

08006ce0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b08d      	sub	sp, #52	; 0x34
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4611      	mov	r1, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	460b      	mov	r3, r1
 8006cf0:	80fb      	strh	r3, [r7, #6]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006cf6:	88bb      	ldrh	r3, [r7, #4]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	085b      	lsrs	r3, r3, #1
 8006cfc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	005a      	lsls	r2, r3, #1
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d18:	e01e      	b.n	8006d58 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	3301      	adds	r3, #1
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	3302      	adds	r3, #2
 8006d44:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	3302      	adds	r3, #2
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	3301      	adds	r3, #1
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	3b01      	subs	r3, #1
 8006d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1dd      	bne.n	8006d1a <USB_WritePMA+0x3a>
  }
}
 8006d5e:	bf00      	nop
 8006d60:	bf00      	nop
 8006d62:	3734      	adds	r7, #52	; 0x34
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b08b      	sub	sp, #44	; 0x2c
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	4611      	mov	r1, r2
 8006d76:	461a      	mov	r2, r3
 8006d78:	460b      	mov	r3, r1
 8006d7a:	80fb      	strh	r3, [r7, #6]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d80:	88bb      	ldrh	r3, [r7, #4]
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	005a      	lsls	r2, r3, #1
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d9c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
 8006da2:	e01b      	b.n	8006ddc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	3302      	adds	r3, #2
 8006db0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	3302      	adds	r3, #2
 8006dd4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e0      	bne.n	8006da4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006de2:	88bb      	ldrh	r3, [r7, #4]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d007      	beq.n	8006dfe <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	701a      	strb	r2, [r3, #0]
  }
}
 8006dfe:	bf00      	nop
 8006e00:	372c      	adds	r7, #44	; 0x2c
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	7c1b      	ldrb	r3, [r3, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d115      	bne.n	8006e4c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e24:	2202      	movs	r2, #2
 8006e26:	2181      	movs	r1, #129	; 0x81
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 feb2 	bl	8008b92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e38:	2202      	movs	r2, #2
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fea8 	bl	8008b92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006e4a:	e012      	b.n	8006e72 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	2202      	movs	r2, #2
 8006e50:	2181      	movs	r1, #129	; 0x81
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 fe9d 	bl	8008b92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e5e:	2340      	movs	r3, #64	; 0x40
 8006e60:	2202      	movs	r2, #2
 8006e62:	2101      	movs	r1, #1
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fe94 	bl	8008b92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e72:	2308      	movs	r3, #8
 8006e74:	2203      	movs	r2, #3
 8006e76:	2182      	movs	r1, #130	; 0x82
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 fe8a 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e88:	f001 ffaa 	bl	8008de0 <USBD_static_malloc>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d102      	bne.n	8006ea4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	73fb      	strb	r3, [r7, #15]
 8006ea2:	e026      	b.n	8006ef2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eaa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7c1b      	ldrb	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ed8:	2101      	movs	r1, #1
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 ff4a 	bl	8008d74 <USBD_LL_PrepareReceive>
 8006ee0:	e007      	b.n	8006ef2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ee8:	2340      	movs	r3, #64	; 0x40
 8006eea:	2101      	movs	r1, #1
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 ff41 	bl	8008d74 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f0c:	2181      	movs	r1, #129	; 0x81
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fe65 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fe5e 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f2a:	2182      	movs	r1, #130	; 0x82
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fe56 	bl	8008bde <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00e      	beq.n	8006f60 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 ff50 	bl	8008df8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b086      	sub	sp, #24
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d039      	beq.n	8007008 <USBD_CDC_Setup+0x9e>
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d17f      	bne.n	8007098 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	88db      	ldrh	r3, [r3, #6]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d029      	beq.n	8006ff4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	b25b      	sxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	da11      	bge.n	8006fce <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006fb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	88d2      	ldrh	r2, [r2, #6]
 8006fbc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fbe:	6939      	ldr	r1, [r7, #16]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	88db      	ldrh	r3, [r3, #6]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 fa09 	bl	80083de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006fcc:	e06b      	b.n	80070a6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	785a      	ldrb	r2, [r3, #1]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	88db      	ldrh	r3, [r3, #6]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fe4:	6939      	ldr	r1, [r7, #16]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	88db      	ldrh	r3, [r3, #6]
 8006fea:	461a      	mov	r2, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 fa24 	bl	800843a <USBD_CtlPrepareRx>
      break;
 8006ff2:	e058      	b.n	80070a6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	7850      	ldrb	r0, [r2, #1]
 8007000:	2200      	movs	r2, #0
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	4798      	blx	r3
      break;
 8007006:	e04e      	b.n	80070a6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b0b      	cmp	r3, #11
 800700e:	d02e      	beq.n	800706e <USBD_CDC_Setup+0x104>
 8007010:	2b0b      	cmp	r3, #11
 8007012:	dc38      	bgt.n	8007086 <USBD_CDC_Setup+0x11c>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <USBD_CDC_Setup+0xb4>
 8007018:	2b0a      	cmp	r3, #10
 800701a:	d014      	beq.n	8007046 <USBD_CDC_Setup+0xdc>
 800701c:	e033      	b.n	8007086 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007024:	2b03      	cmp	r3, #3
 8007026:	d107      	bne.n	8007038 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007028:	f107 030c 	add.w	r3, r7, #12
 800702c:	2202      	movs	r2, #2
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f001 f9d4 	bl	80083de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007036:	e02e      	b.n	8007096 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 f965 	bl	800830a <USBD_CtlError>
            ret = USBD_FAIL;
 8007040:	2302      	movs	r3, #2
 8007042:	75fb      	strb	r3, [r7, #23]
          break;
 8007044:	e027      	b.n	8007096 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704c:	2b03      	cmp	r3, #3
 800704e:	d107      	bne.n	8007060 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007050:	f107 030f 	add.w	r3, r7, #15
 8007054:	2201      	movs	r2, #1
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 f9c0 	bl	80083de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800705e:	e01a      	b.n	8007096 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 f951 	bl	800830a <USBD_CtlError>
            ret = USBD_FAIL;
 8007068:	2302      	movs	r3, #2
 800706a:	75fb      	strb	r3, [r7, #23]
          break;
 800706c:	e013      	b.n	8007096 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007074:	2b03      	cmp	r3, #3
 8007076:	d00d      	beq.n	8007094 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 f945 	bl	800830a <USBD_CtlError>
            ret = USBD_FAIL;
 8007080:	2302      	movs	r3, #2
 8007082:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007084:	e006      	b.n	8007094 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f93e 	bl	800830a <USBD_CtlError>
          ret = USBD_FAIL;
 800708e:	2302      	movs	r3, #2
 8007090:	75fb      	strb	r3, [r7, #23]
          break;
 8007092:	e000      	b.n	8007096 <USBD_CDC_Setup+0x12c>
          break;
 8007094:	bf00      	nop
      }
      break;
 8007096:	e006      	b.n	80070a6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 f935 	bl	800830a <USBD_CtlError>
      ret = USBD_FAIL;
 80070a0:	2302      	movs	r3, #2
 80070a2:	75fb      	strb	r3, [r7, #23]
      break;
 80070a4:	bf00      	nop
  }

  return ret;
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ca:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d03a      	beq.n	800714c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80070d6:	78fa      	ldrb	r2, [r7, #3]
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	331c      	adds	r3, #28
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d029      	beq.n	8007140 <USBD_CDC_DataIn+0x90>
 80070ec:	78fa      	ldrb	r2, [r7, #3]
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	440b      	add	r3, r1
 80070fa:	331c      	adds	r3, #28
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	78f9      	ldrb	r1, [r7, #3]
 8007100:	68b8      	ldr	r0, [r7, #8]
 8007102:	460b      	mov	r3, r1
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	4403      	add	r3, r0
 800710c:	3338      	adds	r3, #56	; 0x38
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	fbb2 f1f3 	udiv	r1, r2, r3
 8007114:	fb03 f301 	mul.w	r3, r3, r1
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d110      	bne.n	8007140 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	331c      	adds	r3, #28
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007132:	78f9      	ldrb	r1, [r7, #3]
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fdf8 	bl	8008d2e <USBD_LL_Transmit>
 800713e:	e003      	b.n	8007148 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	e000      	b.n	800714e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800714c:	2302      	movs	r3, #2
  }
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007168:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fe23 	bl	8008dba <USBD_LL_GetRxDataSize>
 8007174:	4602      	mov	r2, r0
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00d      	beq.n	80071a2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800719a:	4611      	mov	r1, r2
 800719c:	4798      	blx	r3

    return USBD_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	e000      	b.n	80071a4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80071a2:	2302      	movs	r3, #2
  }
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ba:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d015      	beq.n	80071f2 <USBD_CDC_EP0_RxReady+0x46>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071cc:	2bff      	cmp	r3, #255	; 0xff
 80071ce:	d010      	beq.n	80071f2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80071de:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071e6:	b292      	uxth	r2, r2
 80071e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	22ff      	movs	r2, #255	; 0xff
 80071ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2243      	movs	r2, #67	; 0x43
 8007208:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800720a:	4b03      	ldr	r3, [pc, #12]	; (8007218 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	200000b0 	.word	0x200000b0

0800721c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2243      	movs	r2, #67	; 0x43
 8007228:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800722a:	4b03      	ldr	r3, [pc, #12]	; (8007238 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	2000006c 	.word	0x2000006c

0800723c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2243      	movs	r2, #67	; 0x43
 8007248:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800724a:	4b03      	ldr	r3, [pc, #12]	; (8007258 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	200000f4 	.word	0x200000f4

0800725c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	220a      	movs	r2, #10
 8007268:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800726a:	4b03      	ldr	r3, [pc, #12]	; (8007278 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20000028 	.word	0x20000028

0800727c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007286:	2302      	movs	r3, #2
 8007288:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072c6:	88fa      	ldrh	r2, [r7, #6]
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr

080072da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d01c      	beq.n	8007354 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007320:	2b00      	cmp	r3, #0
 8007322:	d115      	bne.n	8007350 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007342:	b29b      	uxth	r3, r3
 8007344:	2181      	movs	r1, #129	; 0x81
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fcf1 	bl	8008d2e <USBD_LL_Transmit>

      return USBD_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	e002      	b.n	8007356 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007354:	2302      	movs	r3, #2
  }
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d017      	beq.n	80073a8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7c1b      	ldrb	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d109      	bne.n	8007394 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800738a:	2101      	movs	r1, #1
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 fcf1 	bl	8008d74 <USBD_LL_PrepareReceive>
 8007392:	e007      	b.n	80073a4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800739a:	2340      	movs	r3, #64	; 0x40
 800739c:	2101      	movs	r1, #1
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 fce8 	bl	8008d74 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	e000      	b.n	80073aa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80073a8:	2302      	movs	r3, #2
  }
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	4613      	mov	r3, r2
 80073be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073c6:	2302      	movs	r3, #2
 80073c8:	e01a      	b.n	8007400 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	79fa      	ldrb	r2, [r7, #7]
 80073f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f001 fb55 	bl	8008aa8 <USBD_LL_Init>

  return USBD_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d006      	beq.n	800742a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
 8007428:	e001      	b.n	800742e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800742a:	2302      	movs	r3, #2
 800742c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	bc80      	pop	{r7}
 8007438:	4770      	bx	lr

0800743a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 fb8a 	bl	8008b5c <USBD_LL_Start>

  return USBD_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	bc80      	pop	{r7}
 8007464:	4770      	bx	lr

08007466 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007472:	2302      	movs	r3, #2
 8007474:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00c      	beq.n	800749a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	4611      	mov	r1, r2
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	4798      	blx	r3
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	4611      	mov	r1, r2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fed8 	bl	8008292 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80074f0:	461a      	mov	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	2b02      	cmp	r3, #2
 8007504:	d016      	beq.n	8007534 <USBD_LL_SetupStage+0x6a>
 8007506:	2b02      	cmp	r3, #2
 8007508:	d81c      	bhi.n	8007544 <USBD_LL_SetupStage+0x7a>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <USBD_LL_SetupStage+0x4a>
 800750e:	2b01      	cmp	r3, #1
 8007510:	d008      	beq.n	8007524 <USBD_LL_SetupStage+0x5a>
 8007512:	e017      	b.n	8007544 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f9cb 	bl	80078b8 <USBD_StdDevReq>
      break;
 8007522:	e01a      	b.n	800755a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa2d 	bl	800798c <USBD_StdItfReq>
      break;
 8007532:	e012      	b.n	800755a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fa6d 	bl	8007a1c <USBD_StdEPReq>
      break;
 8007542:	e00a      	b.n	800755a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800754a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800754e:	b2db      	uxtb	r3, r3
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 fb62 	bl	8008c1c <USBD_LL_StallEP>
      break;
 8007558:	bf00      	nop
  }

  return USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	460b      	mov	r3, r1
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007572:	7afb      	ldrb	r3, [r7, #11]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d14b      	bne.n	8007610 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800757e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007586:	2b03      	cmp	r3, #3
 8007588:	d134      	bne.n	80075f4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	429a      	cmp	r2, r3
 8007594:	d919      	bls.n	80075ca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	1ad2      	subs	r2, r2, r3
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d203      	bcs.n	80075b8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	e002      	b.n	80075be <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075bc:	b29b      	uxth	r3, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 ff57 	bl	8008476 <USBD_CtlContinueRx>
 80075c8:	e038      	b.n	800763c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d105      	bne.n	80075ec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 ff54 	bl	800849a <USBD_CtlSendStatus>
 80075f2:	e023      	b.n	800763c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075fa:	2b05      	cmp	r3, #5
 80075fc:	d11e      	bne.n	800763c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007606:	2100      	movs	r1, #0
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f001 fb07 	bl	8008c1c <USBD_LL_StallEP>
 800760e:	e015      	b.n	800763c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00d      	beq.n	8007638 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007622:	2b03      	cmp	r3, #3
 8007624:	d108      	bne.n	8007638 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	7afa      	ldrb	r2, [r7, #11]
 8007630:	4611      	mov	r1, r2
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	4798      	blx	r3
 8007636:	e001      	b.n	800763c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007638:	2302      	movs	r3, #2
 800763a:	e000      	b.n	800763e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b086      	sub	sp, #24
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	460b      	mov	r3, r1
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007654:	7afb      	ldrb	r3, [r7, #11]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d17f      	bne.n	800775a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3314      	adds	r3, #20
 800765e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007666:	2b02      	cmp	r3, #2
 8007668:	d15c      	bne.n	8007724 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	429a      	cmp	r2, r3
 8007674:	d915      	bls.n	80076a2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	b29b      	uxth	r3, r3
 800768a:	461a      	mov	r2, r3
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fec1 	bl	8008416 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007694:	2300      	movs	r3, #0
 8007696:	2200      	movs	r2, #0
 8007698:	2100      	movs	r1, #0
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f001 fb6a 	bl	8008d74 <USBD_LL_PrepareReceive>
 80076a0:	e04e      	b.n	8007740 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	6912      	ldr	r2, [r2, #16]
 80076aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ae:	fb02 f201 	mul.w	r2, r2, r1
 80076b2:	1a9b      	subs	r3, r3, r2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d11c      	bne.n	80076f2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d316      	bcc.n	80076f2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d20f      	bcs.n	80076f2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076d2:	2200      	movs	r2, #0
 80076d4:	2100      	movs	r1, #0
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fe9d 	bl	8008416 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076e4:	2300      	movs	r3, #0
 80076e6:	2200      	movs	r2, #0
 80076e8:	2100      	movs	r1, #0
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f001 fb42 	bl	8008d74 <USBD_LL_PrepareReceive>
 80076f0:	e026      	b.n	8007740 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007704:	2b03      	cmp	r3, #3
 8007706:	d105      	bne.n	8007714 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007714:	2180      	movs	r1, #128	; 0x80
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f001 fa80 	bl	8008c1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fecf 	bl	80084c0 <USBD_CtlReceiveStatus>
 8007722:	e00d      	b.n	8007740 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800772a:	2b04      	cmp	r3, #4
 800772c:	d004      	beq.n	8007738 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007734:	2b00      	cmp	r3, #0
 8007736:	d103      	bne.n	8007740 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007738:	2180      	movs	r1, #128	; 0x80
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f001 fa6e 	bl	8008c1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007746:	2b01      	cmp	r3, #1
 8007748:	d11d      	bne.n	8007786 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f7ff fe81 	bl	8007452 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007758:	e015      	b.n	8007786 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00d      	beq.n	8007782 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800776c:	2b03      	cmp	r3, #3
 800776e:	d108      	bne.n	8007782 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	7afa      	ldrb	r2, [r7, #11]
 800777a:	4611      	mov	r1, r2
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	4798      	blx	r3
 8007780:	e001      	b.n	8007786 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007782:	2302      	movs	r3, #2
 8007784:	e000      	b.n	8007788 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007798:	2340      	movs	r3, #64	; 0x40
 800779a:	2200      	movs	r2, #0
 800779c:	2100      	movs	r1, #0
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 f9f7 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2240      	movs	r2, #64	; 0x40
 80077b0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077b4:	2340      	movs	r3, #64	; 0x40
 80077b6:	2200      	movs	r2, #0
 80077b8:	2180      	movs	r1, #128	; 0x80
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 f9e9 	bl	8008b92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2240      	movs	r2, #64	; 0x40
 80077ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d009      	beq.n	8007808 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6852      	ldr	r2, [r2, #4]
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	4611      	mov	r1, r2
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	4798      	blx	r3
  }

  return USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	460b      	mov	r3, r1
 800781c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr

08007830 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2204      	movs	r2, #4
 8007848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr

08007858 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007866:	2b04      	cmp	r3, #4
 8007868:	d105      	bne.n	8007876 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	bc80      	pop	{r7}
 8007880:	4770      	bx	lr

08007882 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007890:	2b03      	cmp	r3, #3
 8007892:	d10b      	bne.n	80078ac <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d005      	beq.n	80078ac <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d005      	beq.n	80078de <USBD_StdDevReq+0x26>
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d84f      	bhi.n	8007976 <USBD_StdDevReq+0xbe>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d009      	beq.n	80078ee <USBD_StdDevReq+0x36>
 80078da:	2b20      	cmp	r3, #32
 80078dc:	d14b      	bne.n	8007976 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
      break;
 80078ec:	e048      	b.n	8007980 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b09      	cmp	r3, #9
 80078f4:	d839      	bhi.n	800796a <USBD_StdDevReq+0xb2>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <USBD_StdDevReq+0x44>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	0800794d 	.word	0x0800794d
 8007900:	08007961 	.word	0x08007961
 8007904:	0800796b 	.word	0x0800796b
 8007908:	08007957 	.word	0x08007957
 800790c:	0800796b 	.word	0x0800796b
 8007910:	0800792f 	.word	0x0800792f
 8007914:	08007925 	.word	0x08007925
 8007918:	0800796b 	.word	0x0800796b
 800791c:	08007943 	.word	0x08007943
 8007920:	08007939 	.word	0x08007939
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f9dc 	bl	8007ce4 <USBD_GetDescriptor>
          break;
 800792c:	e022      	b.n	8007974 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fb3f 	bl	8007fb4 <USBD_SetAddress>
          break;
 8007936:	e01d      	b.n	8007974 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fb7e 	bl	800803c <USBD_SetConfig>
          break;
 8007940:	e018      	b.n	8007974 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fc07 	bl	8008158 <USBD_GetConfig>
          break;
 800794a:	e013      	b.n	8007974 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fc37 	bl	80081c2 <USBD_GetStatus>
          break;
 8007954:	e00e      	b.n	8007974 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fc65 	bl	8008228 <USBD_SetFeature>
          break;
 800795e:	e009      	b.n	8007974 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fc74 	bl	8008250 <USBD_ClrFeature>
          break;
 8007968:	e004      	b.n	8007974 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fccc 	bl	800830a <USBD_CtlError>
          break;
 8007972:	bf00      	nop
      }
      break;
 8007974:	e004      	b.n	8007980 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fcc6 	bl	800830a <USBD_CtlError>
      break;
 800797e:	bf00      	nop
  }

  return ret;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop

0800798c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079a2:	2b40      	cmp	r3, #64	; 0x40
 80079a4:	d005      	beq.n	80079b2 <USBD_StdItfReq+0x26>
 80079a6:	2b40      	cmp	r3, #64	; 0x40
 80079a8:	d82e      	bhi.n	8007a08 <USBD_StdItfReq+0x7c>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <USBD_StdItfReq+0x26>
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d12a      	bne.n	8007a08 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b8:	3b01      	subs	r3, #1
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d81d      	bhi.n	80079fa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	889b      	ldrh	r3, [r3, #4]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d813      	bhi.n	80079f0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	88db      	ldrh	r3, [r3, #6]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d110      	bne.n	8007a04 <USBD_StdItfReq+0x78>
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10d      	bne.n	8007a04 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fd56 	bl	800849a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079ee:	e009      	b.n	8007a04 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fc89 	bl	800830a <USBD_CtlError>
          break;
 80079f8:	e004      	b.n	8007a04 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc84 	bl	800830a <USBD_CtlError>
          break;
 8007a02:	e000      	b.n	8007a06 <USBD_StdItfReq+0x7a>
          break;
 8007a04:	bf00      	nop
      }
      break;
 8007a06:	e004      	b.n	8007a12 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fc7d 	bl	800830a <USBD_CtlError>
      break;
 8007a10:	bf00      	nop
  }

  return USBD_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	889b      	ldrh	r3, [r3, #4]
 8007a2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d007      	beq.n	8007a4c <USBD_StdEPReq+0x30>
 8007a3c:	2b40      	cmp	r3, #64	; 0x40
 8007a3e:	f200 8146 	bhi.w	8007cce <USBD_StdEPReq+0x2b2>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <USBD_StdEPReq+0x40>
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	f040 8141 	bne.w	8007cce <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4798      	blx	r3
      break;
 8007a5a:	e13d      	b.n	8007cd8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a64:	2b20      	cmp	r3, #32
 8007a66:	d10a      	bne.n	8007a7e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	e12d      	b.n	8007cda <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d007      	beq.n	8007a96 <USBD_StdEPReq+0x7a>
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	f300 811b 	bgt.w	8007cc2 <USBD_StdEPReq+0x2a6>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d072      	beq.n	8007b76 <USBD_StdEPReq+0x15a>
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d03a      	beq.n	8007b0a <USBD_StdEPReq+0xee>
 8007a94:	e115      	b.n	8007cc2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d002      	beq.n	8007aa6 <USBD_StdEPReq+0x8a>
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d015      	beq.n	8007ad0 <USBD_StdEPReq+0xb4>
 8007aa4:	e02b      	b.n	8007afe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00c      	beq.n	8007ac6 <USBD_StdEPReq+0xaa>
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b80      	cmp	r3, #128	; 0x80
 8007ab0:	d009      	beq.n	8007ac6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 f8b0 	bl	8008c1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007abc:	2180      	movs	r1, #128	; 0x80
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 f8ac 	bl	8008c1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ac4:	e020      	b.n	8007b08 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fc1e 	bl	800830a <USBD_CtlError>
              break;
 8007ace:	e01b      	b.n	8007b08 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	885b      	ldrh	r3, [r3, #2]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10e      	bne.n	8007af6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <USBD_StdEPReq+0xda>
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b80      	cmp	r3, #128	; 0x80
 8007ae2:	d008      	beq.n	8007af6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	88db      	ldrh	r3, [r3, #6]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 f893 	bl	8008c1c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fccf 	bl	800849a <USBD_CtlSendStatus>

              break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fc02 	bl	800830a <USBD_CtlError>
              break;
 8007b06:	bf00      	nop
          }
          break;
 8007b08:	e0e0      	b.n	8007ccc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d002      	beq.n	8007b1a <USBD_StdEPReq+0xfe>
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d015      	beq.n	8007b44 <USBD_StdEPReq+0x128>
 8007b18:	e026      	b.n	8007b68 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00c      	beq.n	8007b3a <USBD_StdEPReq+0x11e>
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b80      	cmp	r3, #128	; 0x80
 8007b24:	d009      	beq.n	8007b3a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 f876 	bl	8008c1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b30:	2180      	movs	r1, #128	; 0x80
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 f872 	bl	8008c1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b38:	e01c      	b.n	8007b74 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fbe4 	bl	800830a <USBD_CtlError>
              break;
 8007b42:	e017      	b.n	8007b74 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	885b      	ldrh	r3, [r3, #2]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d112      	bne.n	8007b72 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d004      	beq.n	8007b60 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 f87d 	bl	8008c5a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc9a 	bl	800849a <USBD_CtlSendStatus>
              }
              break;
 8007b66:	e004      	b.n	8007b72 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fbcd 	bl	800830a <USBD_CtlError>
              break;
 8007b70:	e000      	b.n	8007b74 <USBD_StdEPReq+0x158>
              break;
 8007b72:	bf00      	nop
          }
          break;
 8007b74:	e0aa      	b.n	8007ccc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d002      	beq.n	8007b86 <USBD_StdEPReq+0x16a>
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d032      	beq.n	8007bea <USBD_StdEPReq+0x1ce>
 8007b84:	e097      	b.n	8007cb6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <USBD_StdEPReq+0x180>
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	2b80      	cmp	r3, #128	; 0x80
 8007b90:	d004      	beq.n	8007b9c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fbb8 	bl	800830a <USBD_CtlError>
                break;
 8007b9a:	e091      	b.n	8007cc0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	da0b      	bge.n	8007bbc <USBD_StdEPReq+0x1a0>
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	3310      	adds	r3, #16
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	3304      	adds	r3, #4
 8007bba:	e00b      	b.n	8007bd4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2202      	movs	r2, #2
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fbfb 	bl	80083de <USBD_CtlSendData>
              break;
 8007be8:	e06a      	b.n	8007cc0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da11      	bge.n	8007c16 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	f003 020f 	and.w	r2, r3, #15
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	3318      	adds	r3, #24
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d117      	bne.n	8007c3c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fb7b 	bl	800830a <USBD_CtlError>
                  break;
 8007c14:	e054      	b.n	8007cc0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	f003 020f 	and.w	r2, r3, #15
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d104      	bne.n	8007c3c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fb68 	bl	800830a <USBD_CtlError>
                  break;
 8007c3a:	e041      	b.n	8007cc0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	da0b      	bge.n	8007c5c <USBD_StdEPReq+0x240>
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	3310      	adds	r3, #16
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	4413      	add	r3, r2
 8007c58:	3304      	adds	r3, #4
 8007c5a:	e00b      	b.n	8007c74 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
 8007c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	3304      	adds	r3, #4
 8007c74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <USBD_StdEPReq+0x266>
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	2b80      	cmp	r3, #128	; 0x80
 8007c80:	d103      	bne.n	8007c8a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	e00e      	b.n	8007ca8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c8a:	7bbb      	ldrb	r3, [r7, #14]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 f802 	bl	8008c98 <USBD_LL_IsStallEP>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	e002      	b.n	8007ca8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2202      	movs	r2, #2
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fb95 	bl	80083de <USBD_CtlSendData>
              break;
 8007cb4:	e004      	b.n	8007cc0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fb26 	bl	800830a <USBD_CtlError>
              break;
 8007cbe:	bf00      	nop
          }
          break;
 8007cc0:	e004      	b.n	8007ccc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fb20 	bl	800830a <USBD_CtlError>
          break;
 8007cca:	bf00      	nop
      }
      break;
 8007ccc:	e004      	b.n	8007cd8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fb1a 	bl	800830a <USBD_CtlError>
      break;
 8007cd6:	bf00      	nop
  }

  return ret;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	885b      	ldrh	r3, [r3, #2]
 8007cfe:	0a1b      	lsrs	r3, r3, #8
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	3b01      	subs	r3, #1
 8007d04:	2b06      	cmp	r3, #6
 8007d06:	f200 8128 	bhi.w	8007f5a <USBD_GetDescriptor+0x276>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <USBD_GetDescriptor+0x2c>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d2d 	.word	0x08007d2d
 8007d14:	08007d45 	.word	0x08007d45
 8007d18:	08007d85 	.word	0x08007d85
 8007d1c:	08007f5b 	.word	0x08007f5b
 8007d20:	08007f5b 	.word	0x08007f5b
 8007d24:	08007efb 	.word	0x08007efb
 8007d28:	08007f27 	.word	0x08007f27
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	7c12      	ldrb	r2, [r2, #16]
 8007d38:	f107 0108 	add.w	r1, r7, #8
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
 8007d40:	60f8      	str	r0, [r7, #12]
      break;
 8007d42:	e112      	b.n	8007f6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	7c1b      	ldrb	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10d      	bne.n	8007d68 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d54:	f107 0208 	add.w	r2, r7, #8
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	2202      	movs	r2, #2
 8007d64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d66:	e100      	b.n	8007f6a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	f107 0208 	add.w	r2, r7, #8
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	2202      	movs	r2, #2
 8007d80:	701a      	strb	r2, [r3, #0]
      break;
 8007d82:	e0f2      	b.n	8007f6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	885b      	ldrh	r3, [r3, #2]
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	f200 80ac 	bhi.w	8007ee8 <USBD_GetDescriptor+0x204>
 8007d90:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <USBD_GetDescriptor+0xb4>)
 8007d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d96:	bf00      	nop
 8007d98:	08007db1 	.word	0x08007db1
 8007d9c:	08007de5 	.word	0x08007de5
 8007da0:	08007e19 	.word	0x08007e19
 8007da4:	08007e4d 	.word	0x08007e4d
 8007da8:	08007e81 	.word	0x08007e81
 8007dac:	08007eb5 	.word	0x08007eb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	7c12      	ldrb	r2, [r2, #16]
 8007dc8:	f107 0108 	add.w	r1, r7, #8
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
 8007dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd2:	e091      	b.n	8007ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa97 	bl	800830a <USBD_CtlError>
            err++;
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	3301      	adds	r3, #1
 8007de0:	72fb      	strb	r3, [r7, #11]
          break;
 8007de2:	e089      	b.n	8007ef8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	7c12      	ldrb	r2, [r2, #16]
 8007dfc:	f107 0108 	add.w	r1, r7, #8
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e06:	e077      	b.n	8007ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fa7d 	bl	800830a <USBD_CtlError>
            err++;
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	3301      	adds	r3, #1
 8007e14:	72fb      	strb	r3, [r7, #11]
          break;
 8007e16:	e06f      	b.n	8007ef8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	7c12      	ldrb	r2, [r2, #16]
 8007e30:	f107 0108 	add.w	r1, r7, #8
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e3a:	e05d      	b.n	8007ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa63 	bl	800830a <USBD_CtlError>
            err++;
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	3301      	adds	r3, #1
 8007e48:	72fb      	strb	r3, [r7, #11]
          break;
 8007e4a:	e055      	b.n	8007ef8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	7c12      	ldrb	r2, [r2, #16]
 8007e64:	f107 0108 	add.w	r1, r7, #8
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6e:	e043      	b.n	8007ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa49 	bl	800830a <USBD_CtlError>
            err++;
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7e:	e03b      	b.n	8007ef8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00b      	beq.n	8007ea4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	7c12      	ldrb	r2, [r2, #16]
 8007e98:	f107 0108 	add.w	r1, r7, #8
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
 8007ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ea2:	e029      	b.n	8007ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa2f 	bl	800830a <USBD_CtlError>
            err++;
 8007eac:	7afb      	ldrb	r3, [r7, #11]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007eb2:	e021      	b.n	8007ef8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	7c12      	ldrb	r2, [r2, #16]
 8007ecc:	f107 0108 	add.w	r1, r7, #8
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
 8007ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ed6:	e00f      	b.n	8007ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa15 	bl	800830a <USBD_CtlError>
            err++;
 8007ee0:	7afb      	ldrb	r3, [r7, #11]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ee6:	e007      	b.n	8007ef8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa0d 	bl	800830a <USBD_CtlError>
          err++;
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007ef6:	e038      	b.n	8007f6a <USBD_GetDescriptor+0x286>
 8007ef8:	e037      	b.n	8007f6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	7c1b      	ldrb	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0a:	f107 0208 	add.w	r2, r7, #8
 8007f0e:	4610      	mov	r0, r2
 8007f10:	4798      	blx	r3
 8007f12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f14:	e029      	b.n	8007f6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f9f6 	bl	800830a <USBD_CtlError>
        err++;
 8007f1e:	7afb      	ldrb	r3, [r7, #11]
 8007f20:	3301      	adds	r3, #1
 8007f22:	72fb      	strb	r3, [r7, #11]
      break;
 8007f24:	e021      	b.n	8007f6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7c1b      	ldrb	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10d      	bne.n	8007f4a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f36:	f107 0208 	add.w	r2, r7, #8
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4798      	blx	r3
 8007f3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3301      	adds	r3, #1
 8007f44:	2207      	movs	r2, #7
 8007f46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f48:	e00f      	b.n	8007f6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f9dc 	bl	800830a <USBD_CtlError>
        err++;
 8007f52:	7afb      	ldrb	r3, [r7, #11]
 8007f54:	3301      	adds	r3, #1
 8007f56:	72fb      	strb	r3, [r7, #11]
      break;
 8007f58:	e007      	b.n	8007f6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f9d4 	bl	800830a <USBD_CtlError>
      err++;
 8007f62:	7afb      	ldrb	r3, [r7, #11]
 8007f64:	3301      	adds	r3, #1
 8007f66:	72fb      	strb	r3, [r7, #11]
      break;
 8007f68:	bf00      	nop
  }

  if (err != 0U)
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d11c      	bne.n	8007faa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f70:	893b      	ldrh	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d011      	beq.n	8007f9a <USBD_GetDescriptor+0x2b6>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	88db      	ldrh	r3, [r3, #6]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00d      	beq.n	8007f9a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	88da      	ldrh	r2, [r3, #6]
 8007f82:	893b      	ldrh	r3, [r7, #8]
 8007f84:	4293      	cmp	r3, r2
 8007f86:	bf28      	it	cs
 8007f88:	4613      	movcs	r3, r2
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f8e:	893b      	ldrh	r3, [r7, #8]
 8007f90:	461a      	mov	r2, r3
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fa22 	bl	80083de <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88db      	ldrh	r3, [r3, #6]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d104      	bne.n	8007fac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa79 	bl	800849a <USBD_CtlSendStatus>
 8007fa8:	e000      	b.n	8007fac <USBD_GetDescriptor+0x2c8>
    return;
 8007faa:	bf00      	nop
    }
  }
}
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop

08007fb4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	889b      	ldrh	r3, [r3, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d130      	bne.n	8008028 <USBD_SetAddress+0x74>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	88db      	ldrh	r3, [r3, #6]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d12c      	bne.n	8008028 <USBD_SetAddress+0x74>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fd4:	d828      	bhi.n	8008028 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d104      	bne.n	8007ff6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f98b 	bl	800830a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff4:	e01d      	b.n	8008032 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	7bfa      	ldrb	r2, [r7, #15]
 8007ffa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fe74 	bl	8008cf0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fa46 	bl	800849a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d004      	beq.n	800801e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801c:	e009      	b.n	8008032 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008026:	e004      	b.n	8008032 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f96d 	bl	800830a <USBD_CtlError>
  }
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	885b      	ldrh	r3, [r3, #2]
 800804a:	b2da      	uxtb	r2, r3
 800804c:	4b41      	ldr	r3, [pc, #260]	; (8008154 <USBD_SetConfig+0x118>)
 800804e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008050:	4b40      	ldr	r3, [pc, #256]	; (8008154 <USBD_SetConfig+0x118>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d904      	bls.n	8008062 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f955 	bl	800830a <USBD_CtlError>
 8008060:	e075      	b.n	800814e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008068:	2b02      	cmp	r3, #2
 800806a:	d002      	beq.n	8008072 <USBD_SetConfig+0x36>
 800806c:	2b03      	cmp	r3, #3
 800806e:	d023      	beq.n	80080b8 <USBD_SetConfig+0x7c>
 8008070:	e062      	b.n	8008138 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008072:	4b38      	ldr	r3, [pc, #224]	; (8008154 <USBD_SetConfig+0x118>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d01a      	beq.n	80080b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800807a:	4b36      	ldr	r3, [pc, #216]	; (8008154 <USBD_SetConfig+0x118>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2203      	movs	r2, #3
 8008088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800808c:	4b31      	ldr	r3, [pc, #196]	; (8008154 <USBD_SetConfig+0x118>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7ff f9e7 	bl	8007466 <USBD_SetClassConfig>
 8008098:	4603      	mov	r3, r0
 800809a:	2b02      	cmp	r3, #2
 800809c:	d104      	bne.n	80080a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f932 	bl	800830a <USBD_CtlError>
            return;
 80080a6:	e052      	b.n	800814e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f9f6 	bl	800849a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080ae:	e04e      	b.n	800814e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f9f2 	bl	800849a <USBD_CtlSendStatus>
        break;
 80080b6:	e04a      	b.n	800814e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80080b8:	4b26      	ldr	r3, [pc, #152]	; (8008154 <USBD_SetConfig+0x118>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d112      	bne.n	80080e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80080c8:	4b22      	ldr	r3, [pc, #136]	; (8008154 <USBD_SetConfig+0x118>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80080d2:	4b20      	ldr	r3, [pc, #128]	; (8008154 <USBD_SetConfig+0x118>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff f9e3 	bl	80074a4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f9db 	bl	800849a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080e4:	e033      	b.n	800814e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80080e6:	4b1b      	ldr	r3, [pc, #108]	; (8008154 <USBD_SetConfig+0x118>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d01d      	beq.n	8008130 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff f9d1 	bl	80074a4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008102:	4b14      	ldr	r3, [pc, #80]	; (8008154 <USBD_SetConfig+0x118>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800810c:	4b11      	ldr	r3, [pc, #68]	; (8008154 <USBD_SetConfig+0x118>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff f9a7 	bl	8007466 <USBD_SetClassConfig>
 8008118:	4603      	mov	r3, r0
 800811a:	2b02      	cmp	r3, #2
 800811c:	d104      	bne.n	8008128 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f8f2 	bl	800830a <USBD_CtlError>
            return;
 8008126:	e012      	b.n	800814e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f9b6 	bl	800849a <USBD_CtlSendStatus>
        break;
 800812e:	e00e      	b.n	800814e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f9b2 	bl	800849a <USBD_CtlSendStatus>
        break;
 8008136:	e00a      	b.n	800814e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f8e5 	bl	800830a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008140:	4b04      	ldr	r3, [pc, #16]	; (8008154 <USBD_SetConfig+0x118>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff f9ac 	bl	80074a4 <USBD_ClrClassConfig>
        break;
 800814c:	bf00      	nop
    }
  }
}
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	2000030c 	.word	0x2000030c

08008158 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	88db      	ldrh	r3, [r3, #6]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d004      	beq.n	8008174 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f8cc 	bl	800830a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008172:	e022      	b.n	80081ba <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817a:	2b02      	cmp	r3, #2
 800817c:	dc02      	bgt.n	8008184 <USBD_GetConfig+0x2c>
 800817e:	2b00      	cmp	r3, #0
 8008180:	dc03      	bgt.n	800818a <USBD_GetConfig+0x32>
 8008182:	e015      	b.n	80081b0 <USBD_GetConfig+0x58>
 8008184:	2b03      	cmp	r3, #3
 8008186:	d00b      	beq.n	80081a0 <USBD_GetConfig+0x48>
 8008188:	e012      	b.n	80081b0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3308      	adds	r3, #8
 8008194:	2201      	movs	r2, #1
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f920 	bl	80083de <USBD_CtlSendData>
        break;
 800819e:	e00c      	b.n	80081ba <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3304      	adds	r3, #4
 80081a4:	2201      	movs	r2, #1
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f918 	bl	80083de <USBD_CtlSendData>
        break;
 80081ae:	e004      	b.n	80081ba <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f8a9 	bl	800830a <USBD_CtlError>
        break;
 80081b8:	bf00      	nop
}
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d2:	3b01      	subs	r3, #1
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d81e      	bhi.n	8008216 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	88db      	ldrh	r3, [r3, #6]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d004      	beq.n	80081ea <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f891 	bl	800830a <USBD_CtlError>
        break;
 80081e8:	e01a      	b.n	8008220 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f043 0202 	orr.w	r2, r3, #2
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	330c      	adds	r3, #12
 800820a:	2202      	movs	r2, #2
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f8e5 	bl	80083de <USBD_CtlSendData>
      break;
 8008214:	e004      	b.n	8008220 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f876 	bl	800830a <USBD_CtlError>
      break;
 800821e:	bf00      	nop
  }
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	885b      	ldrh	r3, [r3, #2]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d106      	bne.n	8008248 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f929 	bl	800849a <USBD_CtlSendStatus>
  }
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008260:	3b01      	subs	r3, #1
 8008262:	2b02      	cmp	r3, #2
 8008264:	d80b      	bhi.n	800827e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	885b      	ldrh	r3, [r3, #2]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d10c      	bne.n	8008288 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f90f 	bl	800849a <USBD_CtlSendStatus>
      }
      break;
 800827c:	e004      	b.n	8008288 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f842 	bl	800830a <USBD_CtlError>
      break;
 8008286:	e000      	b.n	800828a <USBD_ClrFeature+0x3a>
      break;
 8008288:	bf00      	nop
  }
}
 800828a:	bf00      	nop
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	785a      	ldrb	r2, [r3, #1]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	3302      	adds	r3, #2
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	3303      	adds	r3, #3
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	b29b      	uxth	r3, r3
 80082c0:	4413      	add	r3, r2
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	3304      	adds	r3, #4
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	3305      	adds	r3, #5
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	021b      	lsls	r3, r3, #8
 80082da:	b29b      	uxth	r3, r3
 80082dc:	4413      	add	r3, r2
 80082de:	b29a      	uxth	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	3306      	adds	r3, #6
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	3307      	adds	r3, #7
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	021b      	lsls	r3, r3, #8
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	4413      	add	r3, r2
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	80da      	strh	r2, [r3, #6]

}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr

0800830a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008314:	2180      	movs	r1, #128	; 0x80
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fc80 	bl	8008c1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800831c:	2100      	movs	r1, #0
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fc7c 	bl	8008c1c <USBD_LL_StallEP>
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d032      	beq.n	80083a8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 f834 	bl	80083b0 <USBD_GetLen>
 8008348:	4603      	mov	r3, r0
 800834a:	3301      	adds	r3, #1
 800834c:	b29b      	uxth	r3, r3
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	75fa      	strb	r2, [r7, #23]
 800835c:	461a      	mov	r2, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	4413      	add	r3, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	7812      	ldrb	r2, [r2, #0]
 8008366:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	1c5a      	adds	r2, r3, #1
 800836c:	75fa      	strb	r2, [r7, #23]
 800836e:	461a      	mov	r2, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	4413      	add	r3, r2
 8008374:	2203      	movs	r2, #3
 8008376:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008378:	e012      	b.n	80083a0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	60fa      	str	r2, [r7, #12]
 8008380:	7dfa      	ldrb	r2, [r7, #23]
 8008382:	1c51      	adds	r1, r2, #1
 8008384:	75f9      	strb	r1, [r7, #23]
 8008386:	4611      	mov	r1, r2
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	440a      	add	r2, r1
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	75fa      	strb	r2, [r7, #23]
 8008396:	461a      	mov	r2, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	4413      	add	r3, r2
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e8      	bne.n	800837a <USBD_GetString+0x4e>
    }
  }
}
 80083a8:	bf00      	nop
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80083bc:	e005      	b.n	80083ca <USBD_GetLen+0x1a>
  {
    len++;
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	3301      	adds	r3, #1
 80083c2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3301      	adds	r3, #1
 80083c8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f5      	bne.n	80083be <USBD_GetLen+0xe>
  }

  return len;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr

080083de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	4613      	mov	r3, r2
 80083ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083f4:	88fa      	ldrh	r2, [r7, #6]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	2100      	movs	r1, #0
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 fc91 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	4613      	mov	r3, r2
 8008422:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008424:	88fb      	ldrh	r3, [r7, #6]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	2100      	movs	r1, #0
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 fc7f 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	4613      	mov	r3, r2
 8008446:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2203      	movs	r2, #3
 800844c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008450:	88fa      	ldrh	r2, [r7, #6]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008458:	88fa      	ldrh	r2, [r7, #6]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	2100      	movs	r1, #0
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 fc84 	bl	8008d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	4613      	mov	r3, r2
 8008482:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008484:	88fb      	ldrh	r3, [r7, #6]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	2100      	movs	r1, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 fc72 	bl	8008d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2204      	movs	r2, #4
 80084a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084aa:	2300      	movs	r3, #0
 80084ac:	2200      	movs	r2, #0
 80084ae:	2100      	movs	r1, #0
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fc3c 	bl	8008d2e <USBD_LL_Transmit>

  return USBD_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2205      	movs	r2, #5
 80084cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084d0:	2300      	movs	r3, #0
 80084d2:	2200      	movs	r2, #0
 80084d4:	2100      	movs	r1, #0
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fc4c 	bl	8008d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084ec:	2200      	movs	r2, #0
 80084ee:	4912      	ldr	r1, [pc, #72]	; (8008538 <MX_USB_DEVICE_Init+0x50>)
 80084f0:	4812      	ldr	r0, [pc, #72]	; (800853c <MX_USB_DEVICE_Init+0x54>)
 80084f2:	f7fe ff5e 	bl	80073b2 <USBD_Init>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084fc:	f7f8 fcea 	bl	8000ed4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008500:	490f      	ldr	r1, [pc, #60]	; (8008540 <MX_USB_DEVICE_Init+0x58>)
 8008502:	480e      	ldr	r0, [pc, #56]	; (800853c <MX_USB_DEVICE_Init+0x54>)
 8008504:	f7fe ff80 	bl	8007408 <USBD_RegisterClass>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800850e:	f7f8 fce1 	bl	8000ed4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008512:	490c      	ldr	r1, [pc, #48]	; (8008544 <MX_USB_DEVICE_Init+0x5c>)
 8008514:	4809      	ldr	r0, [pc, #36]	; (800853c <MX_USB_DEVICE_Init+0x54>)
 8008516:	f7fe feb1 	bl	800727c <USBD_CDC_RegisterInterface>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008520:	f7f8 fcd8 	bl	8000ed4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008524:	4805      	ldr	r0, [pc, #20]	; (800853c <MX_USB_DEVICE_Init+0x54>)
 8008526:	f7fe ff88 	bl	800743a <USBD_Start>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008530:	f7f8 fcd0 	bl	8000ed4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008534:	bf00      	nop
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20000148 	.word	0x20000148
 800853c:	20000650 	.word	0x20000650
 8008540:	20000034 	.word	0x20000034
 8008544:	20000138 	.word	0x20000138

08008548 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800854c:	2200      	movs	r2, #0
 800854e:	4905      	ldr	r1, [pc, #20]	; (8008564 <CDC_Init_FS+0x1c>)
 8008550:	4805      	ldr	r0, [pc, #20]	; (8008568 <CDC_Init_FS+0x20>)
 8008552:	f7fe fea9 	bl	80072a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008556:	4905      	ldr	r1, [pc, #20]	; (800856c <CDC_Init_FS+0x24>)
 8008558:	4803      	ldr	r0, [pc, #12]	; (8008568 <CDC_Init_FS+0x20>)
 800855a:	f7fe febe 	bl	80072da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800855e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008560:	4618      	mov	r0, r3
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000cfc 	.word	0x20000cfc
 8008568:	20000650 	.word	0x20000650
 800856c:	20000914 	.word	0x20000914

08008570 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008574:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008576:	4618      	mov	r0, r3
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr
	...

08008580 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
 800858c:	4613      	mov	r3, r2
 800858e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	2b23      	cmp	r3, #35	; 0x23
 8008594:	d84a      	bhi.n	800862c <CDC_Control_FS+0xac>
 8008596:	a201      	add	r2, pc, #4	; (adr r2, 800859c <CDC_Control_FS+0x1c>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	0800862d 	.word	0x0800862d
 80085a0:	0800862d 	.word	0x0800862d
 80085a4:	0800862d 	.word	0x0800862d
 80085a8:	0800862d 	.word	0x0800862d
 80085ac:	0800862d 	.word	0x0800862d
 80085b0:	0800862d 	.word	0x0800862d
 80085b4:	0800862d 	.word	0x0800862d
 80085b8:	0800862d 	.word	0x0800862d
 80085bc:	0800862d 	.word	0x0800862d
 80085c0:	0800862d 	.word	0x0800862d
 80085c4:	0800862d 	.word	0x0800862d
 80085c8:	0800862d 	.word	0x0800862d
 80085cc:	0800862d 	.word	0x0800862d
 80085d0:	0800862d 	.word	0x0800862d
 80085d4:	0800862d 	.word	0x0800862d
 80085d8:	0800862d 	.word	0x0800862d
 80085dc:	0800862d 	.word	0x0800862d
 80085e0:	0800862d 	.word	0x0800862d
 80085e4:	0800862d 	.word	0x0800862d
 80085e8:	0800862d 	.word	0x0800862d
 80085ec:	0800862d 	.word	0x0800862d
 80085f0:	0800862d 	.word	0x0800862d
 80085f4:	0800862d 	.word	0x0800862d
 80085f8:	0800862d 	.word	0x0800862d
 80085fc:	0800862d 	.word	0x0800862d
 8008600:	0800862d 	.word	0x0800862d
 8008604:	0800862d 	.word	0x0800862d
 8008608:	0800862d 	.word	0x0800862d
 800860c:	0800862d 	.word	0x0800862d
 8008610:	0800862d 	.word	0x0800862d
 8008614:	0800862d 	.word	0x0800862d
 8008618:	0800862d 	.word	0x0800862d
 800861c:	0800862d 	.word	0x0800862d
 8008620:	0800862d 	.word	0x0800862d
 8008624:	0800862d 	.word	0x0800862d
 8008628:	0800862d 	.word	0x0800862d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800862c:	bf00      	nop
  }

  return (USBD_OK);
 800862e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop

0800863c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
 /*  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	4819      	ldr	r0, [pc, #100]	; (80086b0 <CDC_Receive_FS+0x74>)
 800864a:	f7fe fe46 	bl	80072da <USBD_CDC_SetRxBuffer>
  for(int16_t i=0; i<*Len; i++) {
 800864e:	2300      	movs	r3, #0
 8008650:	81fb      	strh	r3, [r7, #14]
 8008652:	e01c      	b.n	800868e <CDC_Receive_FS+0x52>
	  if(Buf[i] != '\r') {
 8008654:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	4413      	add	r3, r2
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b0d      	cmp	r3, #13
 8008660:	d009      	beq.n	8008676 <CDC_Receive_FS+0x3a>
		  CDCbuffer[i] = Buf[i];
 8008662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	441a      	add	r2, r3
 800866a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800866e:	7811      	ldrb	r1, [r2, #0]
 8008670:	4a10      	ldr	r2, [pc, #64]	; (80086b4 <CDC_Receive_FS+0x78>)
 8008672:	54d1      	strb	r1, [r2, r3]
 8008674:	e005      	b.n	8008682 <CDC_Receive_FS+0x46>
	  }
	  else {
		  CDCbuffer[i] = '\0';
 8008676:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800867a:	4a0e      	ldr	r2, [pc, #56]	; (80086b4 <CDC_Receive_FS+0x78>)
 800867c:	2100      	movs	r1, #0
 800867e:	54d1      	strb	r1, [r2, r3]
		  break;
 8008680:	e00b      	b.n	800869a <CDC_Receive_FS+0x5e>
  for(int16_t i=0; i<*Len; i++) {
 8008682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008686:	b29b      	uxth	r3, r3
 8008688:	3301      	adds	r3, #1
 800868a:	b29b      	uxth	r3, r3
 800868c:	81fb      	strh	r3, [r7, #14]
 800868e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d3dc      	bcc.n	8008654 <CDC_Receive_FS+0x18>
	  }
  }
  CDC_flag = 1;
 800869a:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <CDC_Receive_FS+0x7c>)
 800869c:	2201      	movs	r2, #1
 800869e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086a0:	4803      	ldr	r0, [pc, #12]	; (80086b0 <CDC_Receive_FS+0x74>)
 80086a2:	f7fe fe5c 	bl	800735e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086a6:	2300      	movs	r3, #0


  /* USER CODE END 6 */
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20000650 	.word	0x20000650
 80086b4:	2000021c 	.word	0x2000021c
 80086b8:	2000021a 	.word	0x2000021a

080086bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086cc:	4b0d      	ldr	r3, [pc, #52]	; (8008704 <CDC_Transmit_FS+0x48>)
 80086ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086de:	2301      	movs	r3, #1
 80086e0:	e00b      	b.n	80086fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086e2:	887b      	ldrh	r3, [r7, #2]
 80086e4:	461a      	mov	r2, r3
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	4806      	ldr	r0, [pc, #24]	; (8008704 <CDC_Transmit_FS+0x48>)
 80086ea:	f7fe fddd 	bl	80072a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086ee:	4805      	ldr	r0, [pc, #20]	; (8008704 <CDC_Transmit_FS+0x48>)
 80086f0:	f7fe fe06 	bl	8007300 <USBD_CDC_TransmitPacket>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20000650 	.word	0x20000650

08008708 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	6039      	str	r1, [r7, #0]
 8008712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	2212      	movs	r2, #18
 8008718:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800871a:	4b03      	ldr	r3, [pc, #12]	; (8008728 <USBD_FS_DeviceDescriptor+0x20>)
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	bc80      	pop	{r7}
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	20000164 	.word	0x20000164

0800872c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	4603      	mov	r3, r0
 8008734:	6039      	str	r1, [r7, #0]
 8008736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2204      	movs	r2, #4
 800873c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800873e:	4b03      	ldr	r3, [pc, #12]	; (800874c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20000178 	.word	0x20000178

08008750 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d105      	bne.n	800876e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	4907      	ldr	r1, [pc, #28]	; (8008784 <USBD_FS_ProductStrDescriptor+0x34>)
 8008766:	4808      	ldr	r0, [pc, #32]	; (8008788 <USBD_FS_ProductStrDescriptor+0x38>)
 8008768:	f7ff fde0 	bl	800832c <USBD_GetString>
 800876c:	e004      	b.n	8008778 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4904      	ldr	r1, [pc, #16]	; (8008784 <USBD_FS_ProductStrDescriptor+0x34>)
 8008772:	4805      	ldr	r0, [pc, #20]	; (8008788 <USBD_FS_ProductStrDescriptor+0x38>)
 8008774:	f7ff fdda 	bl	800832c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008778:	4b02      	ldr	r3, [pc, #8]	; (8008784 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	200010e4 	.word	0x200010e4
 8008788:	0800a718 	.word	0x0800a718

0800878c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	6039      	str	r1, [r7, #0]
 8008796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	4904      	ldr	r1, [pc, #16]	; (80087ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800879c:	4804      	ldr	r0, [pc, #16]	; (80087b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800879e:	f7ff fdc5 	bl	800832c <USBD_GetString>
  return USBD_StrDesc;
 80087a2:	4b02      	ldr	r3, [pc, #8]	; (80087ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	200010e4 	.word	0x200010e4
 80087b0:	0800a730 	.word	0x0800a730

080087b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4603      	mov	r3, r0
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	221a      	movs	r2, #26
 80087c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087c6:	f000 f843 	bl	8008850 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ca:	4b02      	ldr	r3, [pc, #8]	; (80087d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	2000017c 	.word	0x2000017c

080087d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087e4:	79fb      	ldrb	r3, [r7, #7]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d105      	bne.n	80087f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	4907      	ldr	r1, [pc, #28]	; (800880c <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ee:	4808      	ldr	r0, [pc, #32]	; (8008810 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087f0:	f7ff fd9c 	bl	800832c <USBD_GetString>
 80087f4:	e004      	b.n	8008800 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	4904      	ldr	r1, [pc, #16]	; (800880c <USBD_FS_ConfigStrDescriptor+0x34>)
 80087fa:	4805      	ldr	r0, [pc, #20]	; (8008810 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087fc:	f7ff fd96 	bl	800832c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008800:	4b02      	ldr	r3, [pc, #8]	; (800880c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	200010e4 	.word	0x200010e4
 8008810:	0800a744 	.word	0x0800a744

08008814 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	6039      	str	r1, [r7, #0]
 800881e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d105      	bne.n	8008832 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	4907      	ldr	r1, [pc, #28]	; (8008848 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800882a:	4808      	ldr	r0, [pc, #32]	; (800884c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800882c:	f7ff fd7e 	bl	800832c <USBD_GetString>
 8008830:	e004      	b.n	800883c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	4904      	ldr	r1, [pc, #16]	; (8008848 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008836:	4805      	ldr	r0, [pc, #20]	; (800884c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008838:	f7ff fd78 	bl	800832c <USBD_GetString>
  }
  return USBD_StrDesc;
 800883c:	4b02      	ldr	r3, [pc, #8]	; (8008848 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	200010e4 	.word	0x200010e4
 800884c:	0800a750 	.word	0x0800a750

08008850 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008856:	4b0f      	ldr	r3, [pc, #60]	; (8008894 <Get_SerialNum+0x44>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800885c:	4b0e      	ldr	r3, [pc, #56]	; (8008898 <Get_SerialNum+0x48>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008862:	4b0e      	ldr	r3, [pc, #56]	; (800889c <Get_SerialNum+0x4c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4413      	add	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d009      	beq.n	800888a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008876:	2208      	movs	r2, #8
 8008878:	4909      	ldr	r1, [pc, #36]	; (80088a0 <Get_SerialNum+0x50>)
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 f814 	bl	80088a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008880:	2204      	movs	r2, #4
 8008882:	4908      	ldr	r1, [pc, #32]	; (80088a4 <Get_SerialNum+0x54>)
 8008884:	68b8      	ldr	r0, [r7, #8]
 8008886:	f000 f80f 	bl	80088a8 <IntToUnicode>
  }
}
 800888a:	bf00      	nop
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	1ffff7e8 	.word	0x1ffff7e8
 8008898:	1ffff7ec 	.word	0x1ffff7ec
 800889c:	1ffff7f0 	.word	0x1ffff7f0
 80088a0:	2000017e 	.word	0x2000017e
 80088a4:	2000018e 	.word	0x2000018e

080088a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	4613      	mov	r3, r2
 80088b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]
 80088be:	e027      	b.n	8008910 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	0f1b      	lsrs	r3, r3, #28
 80088c4:	2b09      	cmp	r3, #9
 80088c6:	d80b      	bhi.n	80088e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	0f1b      	lsrs	r3, r3, #28
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	4619      	mov	r1, r3
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	440b      	add	r3, r1
 80088d8:	3230      	adds	r2, #48	; 0x30
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	e00a      	b.n	80088f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	0f1b      	lsrs	r3, r3, #28
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	4619      	mov	r1, r3
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	440b      	add	r3, r1
 80088f0:	3237      	adds	r2, #55	; 0x37
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	011b      	lsls	r3, r3, #4
 80088fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	3301      	adds	r3, #1
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	2200      	movs	r2, #0
 8008908:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	3301      	adds	r3, #1
 800890e:	75fb      	strb	r3, [r7, #23]
 8008910:	7dfa      	ldrb	r2, [r7, #23]
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	429a      	cmp	r2, r3
 8008916:	d3d3      	bcc.n	80088c0 <IntToUnicode+0x18>
  }
}
 8008918:	bf00      	nop
 800891a:	bf00      	nop
 800891c:	371c      	adds	r7, #28
 800891e:	46bd      	mov	sp, r7
 8008920:	bc80      	pop	{r7}
 8008922:	4770      	bx	lr

08008924 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a0d      	ldr	r2, [pc, #52]	; (8008968 <HAL_PCD_MspInit+0x44>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d113      	bne.n	800895e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008936:	4b0d      	ldr	r3, [pc, #52]	; (800896c <HAL_PCD_MspInit+0x48>)
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	4a0c      	ldr	r2, [pc, #48]	; (800896c <HAL_PCD_MspInit+0x48>)
 800893c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008940:	61d3      	str	r3, [r2, #28]
 8008942:	4b0a      	ldr	r3, [pc, #40]	; (800896c <HAL_PCD_MspInit+0x48>)
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800894e:	2200      	movs	r2, #0
 8008950:	2100      	movs	r1, #0
 8008952:	2014      	movs	r0, #20
 8008954:	f7f8 fe61 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008958:	2014      	movs	r0, #20
 800895a:	f7f8 fe7a 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	40005c00 	.word	0x40005c00
 800896c:	40021000 	.word	0x40021000

08008970 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f7fe fd9f 	bl	80074ca <USBD_LL_SetupStage>
}
 800898c:	bf00      	nop
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	440b      	add	r3, r1
 80089b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	4619      	mov	r1, r3
 80089be:	f7fe fdd1 	bl	8007564 <USBD_LL_DataOutStage>
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80089dc:	78fa      	ldrb	r2, [r7, #3]
 80089de:	6879      	ldr	r1, [r7, #4]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	440b      	add	r3, r1
 80089ea:	333c      	adds	r3, #60	; 0x3c
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	4619      	mov	r1, r3
 80089f2:	f7fe fe28 	bl	8007646 <USBD_LL_DataInStage>
}
 80089f6:	bf00      	nop
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe ff38 	bl	8007882 <USBD_LL_SOF>
}
 8008a12:	bf00      	nop
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a22:	2301      	movs	r3, #1
 8008a24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d001      	beq.n	8008a32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a2e:	f7f8 fa51 	bl	8000ed4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a38:	7bfa      	ldrb	r2, [r7, #15]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fe fee8 	bl	8007812 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fe fea1 	bl	8007790 <USBD_LL_Reset>
}
 8008a4e:	bf00      	nop
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe fee2 	bl	8007830 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a74:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <HAL_PCD_SuspendCallback+0x30>)
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	4a03      	ldr	r2, [pc, #12]	; (8008a88 <HAL_PCD_SuspendCallback+0x30>)
 8008a7a:	f043 0306 	orr.w	r3, r3, #6
 8008a7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	e000ed00 	.word	0xe000ed00

08008a8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fedc 	bl	8007858 <USBD_LL_Resume>
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008ab0:	4a28      	ldr	r2, [pc, #160]	; (8008b54 <USBD_LL_Init+0xac>)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a26      	ldr	r2, [pc, #152]	; (8008b54 <USBD_LL_Init+0xac>)
 8008abc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008ac0:	4b24      	ldr	r3, [pc, #144]	; (8008b54 <USBD_LL_Init+0xac>)
 8008ac2:	4a25      	ldr	r2, [pc, #148]	; (8008b58 <USBD_LL_Init+0xb0>)
 8008ac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008ac6:	4b23      	ldr	r3, [pc, #140]	; (8008b54 <USBD_LL_Init+0xac>)
 8008ac8:	2208      	movs	r2, #8
 8008aca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008acc:	4b21      	ldr	r3, [pc, #132]	; (8008b54 <USBD_LL_Init+0xac>)
 8008ace:	2202      	movs	r2, #2
 8008ad0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ad2:	4b20      	ldr	r3, [pc, #128]	; (8008b54 <USBD_LL_Init+0xac>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008ad8:	4b1e      	ldr	r3, [pc, #120]	; (8008b54 <USBD_LL_Init+0xac>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008ade:	4b1d      	ldr	r3, [pc, #116]	; (8008b54 <USBD_LL_Init+0xac>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008ae4:	481b      	ldr	r0, [pc, #108]	; (8008b54 <USBD_LL_Init+0xac>)
 8008ae6:	f7f9 f811 	bl	8001b0c <HAL_PCD_Init>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008af0:	f7f8 f9f0 	bl	8000ed4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008afa:	2318      	movs	r3, #24
 8008afc:	2200      	movs	r2, #0
 8008afe:	2100      	movs	r1, #0
 8008b00:	f7fa fb53 	bl	80031aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b0a:	2358      	movs	r3, #88	; 0x58
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2180      	movs	r1, #128	; 0x80
 8008b10:	f7fa fb4b 	bl	80031aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b1a:	23c0      	movs	r3, #192	; 0xc0
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2181      	movs	r1, #129	; 0x81
 8008b20:	f7fa fb43 	bl	80031aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b2a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2101      	movs	r1, #1
 8008b32:	f7fa fb3a 	bl	80031aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b40:	2200      	movs	r2, #0
 8008b42:	2182      	movs	r1, #130	; 0x82
 8008b44:	f7fa fb31 	bl	80031aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	200012e4 	.word	0x200012e4
 8008b58:	40005c00 	.word	0x40005c00

08008b5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7f9 f8d5 	bl	8001d22 <HAL_PCD_Start>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f94e 	bl	8008e20 <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	70fb      	strb	r3, [r7, #3]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70bb      	strb	r3, [r7, #2]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bba:	78bb      	ldrb	r3, [r7, #2]
 8008bbc:	883a      	ldrh	r2, [r7, #0]
 8008bbe:	78f9      	ldrb	r1, [r7, #3]
 8008bc0:	f7f9 fa4f 	bl	8002062 <HAL_PCD_EP_Open>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 f928 	bl	8008e20 <USBD_Get_USB_Status>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7f9 fa96 	bl	800212e <HAL_PCD_EP_Close>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f000 f909 	bl	8008e20 <USBD_Get_USB_Status>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7f9 fb56 	bl	80022ec <HAL_PCD_EP_SetStall>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 f8ea 	bl	8008e20 <USBD_Get_USB_Status>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b084      	sub	sp, #16
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	460b      	mov	r3, r1
 8008c64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c74:	78fa      	ldrb	r2, [r7, #3]
 8008c76:	4611      	mov	r1, r2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7f9 fb97 	bl	80023ac <HAL_PCD_EP_ClrStall>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 f8cb 	bl	8008e20 <USBD_Get_USB_Status>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008caa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	da0c      	bge.n	8008cce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cb4:	78fb      	ldrb	r3, [r7, #3]
 8008cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3302      	adds	r3, #2
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	e00b      	b.n	8008ce6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cce:	78fb      	ldrb	r3, [r7, #3]
 8008cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cd4:	68f9      	ldr	r1, [r7, #12]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	440b      	add	r3, r1
 8008ce0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008ce4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bc80      	pop	{r7}
 8008cee:	4770      	bx	lr

08008cf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d0a:	78fa      	ldrb	r2, [r7, #3]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7f9 f982 	bl	8002018 <HAL_PCD_SetAddress>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 f880 	bl	8008e20 <USBD_Get_USB_Status>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	72fb      	strb	r3, [r7, #11]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d50:	893b      	ldrh	r3, [r7, #8]
 8008d52:	7af9      	ldrb	r1, [r7, #11]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	f7f9 fa86 	bl	8002266 <HAL_PCD_EP_Transmit>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 f85d 	bl	8008e20 <USBD_Get_USB_Status>
 8008d66:	4603      	mov	r3, r0
 8008d68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	607a      	str	r2, [r7, #4]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	460b      	mov	r3, r1
 8008d82:	72fb      	strb	r3, [r7, #11]
 8008d84:	4613      	mov	r3, r2
 8008d86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d96:	893b      	ldrh	r3, [r7, #8]
 8008d98:	7af9      	ldrb	r1, [r7, #11]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	f7f9 fa0f 	bl	80021be <HAL_PCD_EP_Receive>
 8008da0:	4603      	mov	r3, r0
 8008da2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 f83a 	bl	8008e20 <USBD_Get_USB_Status>
 8008dac:	4603      	mov	r3, r0
 8008dae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008db0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dcc:	78fa      	ldrb	r2, [r7, #3]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7f9 fa31 	bl	8002238 <HAL_PCD_EP_GetRxCount>
 8008dd6:	4603      	mov	r3, r0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008de8:	4b02      	ldr	r3, [pc, #8]	; (8008df4 <USBD_static_malloc+0x14>)
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bc80      	pop	{r7}
 8008df2:	4770      	bx	lr
 8008df4:	20000310 	.word	0x20000310

08008df8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]

}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bc80      	pop	{r7}
 8008e08:	4770      	bx	lr

08008e0a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	460b      	mov	r3, r1
 8008e14:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bc80      	pop	{r7}
 8008e1e:	4770      	bx	lr

08008e20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
 8008e30:	2b03      	cmp	r3, #3
 8008e32:	d817      	bhi.n	8008e64 <USBD_Get_USB_Status+0x44>
 8008e34:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <USBD_Get_USB_Status+0x1c>)
 8008e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3a:	bf00      	nop
 8008e3c:	08008e4d 	.word	0x08008e4d
 8008e40:	08008e53 	.word	0x08008e53
 8008e44:	08008e59 	.word	0x08008e59
 8008e48:	08008e5f 	.word	0x08008e5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e50:	e00b      	b.n	8008e6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e52:	2302      	movs	r3, #2
 8008e54:	73fb      	strb	r3, [r7, #15]
    break;
 8008e56:	e008      	b.n	8008e6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e5c:	e005      	b.n	8008e6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	73fb      	strb	r3, [r7, #15]
    break;
 8008e62:	e002      	b.n	8008e6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e64:	2302      	movs	r3, #2
 8008e66:	73fb      	strb	r3, [r7, #15]
    break;
 8008e68:	bf00      	nop
  }
  return usb_status;
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bc80      	pop	{r7}
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop

08008e78 <atoi>:
 8008e78:	220a      	movs	r2, #10
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	f000 b9c2 	b.w	8009204 <strtol>

08008e80 <__errno>:
 8008e80:	4b01      	ldr	r3, [pc, #4]	; (8008e88 <__errno+0x8>)
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20000198 	.word	0x20000198

08008e8c <__libc_init_array>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	2600      	movs	r6, #0
 8008e90:	4d0c      	ldr	r5, [pc, #48]	; (8008ec4 <__libc_init_array+0x38>)
 8008e92:	4c0d      	ldr	r4, [pc, #52]	; (8008ec8 <__libc_init_array+0x3c>)
 8008e94:	1b64      	subs	r4, r4, r5
 8008e96:	10a4      	asrs	r4, r4, #2
 8008e98:	42a6      	cmp	r6, r4
 8008e9a:	d109      	bne.n	8008eb0 <__libc_init_array+0x24>
 8008e9c:	f001 fb3a 	bl	800a514 <_init>
 8008ea0:	2600      	movs	r6, #0
 8008ea2:	4d0a      	ldr	r5, [pc, #40]	; (8008ecc <__libc_init_array+0x40>)
 8008ea4:	4c0a      	ldr	r4, [pc, #40]	; (8008ed0 <__libc_init_array+0x44>)
 8008ea6:	1b64      	subs	r4, r4, r5
 8008ea8:	10a4      	asrs	r4, r4, #2
 8008eaa:	42a6      	cmp	r6, r4
 8008eac:	d105      	bne.n	8008eba <__libc_init_array+0x2e>
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb4:	4798      	blx	r3
 8008eb6:	3601      	adds	r6, #1
 8008eb8:	e7ee      	b.n	8008e98 <__libc_init_array+0xc>
 8008eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ebe:	4798      	blx	r3
 8008ec0:	3601      	adds	r6, #1
 8008ec2:	e7f2      	b.n	8008eaa <__libc_init_array+0x1e>
 8008ec4:	0800a9c8 	.word	0x0800a9c8
 8008ec8:	0800a9c8 	.word	0x0800a9c8
 8008ecc:	0800a9c8 	.word	0x0800a9c8
 8008ed0:	0800a9cc 	.word	0x0800a9cc

08008ed4 <memset>:
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	4402      	add	r2, r0
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d100      	bne.n	8008ede <memset+0xa>
 8008edc:	4770      	bx	lr
 8008ede:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee2:	e7f9      	b.n	8008ed8 <memset+0x4>

08008ee4 <iprintf>:
 8008ee4:	b40f      	push	{r0, r1, r2, r3}
 8008ee6:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <iprintf+0x2c>)
 8008ee8:	b513      	push	{r0, r1, r4, lr}
 8008eea:	681c      	ldr	r4, [r3, #0]
 8008eec:	b124      	cbz	r4, 8008ef8 <iprintf+0x14>
 8008eee:	69a3      	ldr	r3, [r4, #24]
 8008ef0:	b913      	cbnz	r3, 8008ef8 <iprintf+0x14>
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 fb88 	bl	8009608 <__sinit>
 8008ef8:	ab05      	add	r3, sp, #20
 8008efa:	4620      	mov	r0, r4
 8008efc:	9a04      	ldr	r2, [sp, #16]
 8008efe:	68a1      	ldr	r1, [r4, #8]
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	f000 fec9 	bl	8009c98 <_vfiprintf_r>
 8008f06:	b002      	add	sp, #8
 8008f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f0c:	b004      	add	sp, #16
 8008f0e:	4770      	bx	lr
 8008f10:	20000198 	.word	0x20000198

08008f14 <_puts_r>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	460e      	mov	r6, r1
 8008f18:	4605      	mov	r5, r0
 8008f1a:	b118      	cbz	r0, 8008f24 <_puts_r+0x10>
 8008f1c:	6983      	ldr	r3, [r0, #24]
 8008f1e:	b90b      	cbnz	r3, 8008f24 <_puts_r+0x10>
 8008f20:	f000 fb72 	bl	8009608 <__sinit>
 8008f24:	69ab      	ldr	r3, [r5, #24]
 8008f26:	68ac      	ldr	r4, [r5, #8]
 8008f28:	b913      	cbnz	r3, 8008f30 <_puts_r+0x1c>
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	f000 fb6c 	bl	8009608 <__sinit>
 8008f30:	4b2c      	ldr	r3, [pc, #176]	; (8008fe4 <_puts_r+0xd0>)
 8008f32:	429c      	cmp	r4, r3
 8008f34:	d120      	bne.n	8008f78 <_puts_r+0x64>
 8008f36:	686c      	ldr	r4, [r5, #4]
 8008f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f3a:	07db      	lsls	r3, r3, #31
 8008f3c:	d405      	bmi.n	8008f4a <_puts_r+0x36>
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	0598      	lsls	r0, r3, #22
 8008f42:	d402      	bmi.n	8008f4a <_puts_r+0x36>
 8008f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f46:	f000 fc0f 	bl	8009768 <__retarget_lock_acquire_recursive>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	0719      	lsls	r1, r3, #28
 8008f4e:	d51d      	bpl.n	8008f8c <_puts_r+0x78>
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	b1db      	cbz	r3, 8008f8c <_puts_r+0x78>
 8008f54:	3e01      	subs	r6, #1
 8008f56:	68a3      	ldr	r3, [r4, #8]
 8008f58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	60a3      	str	r3, [r4, #8]
 8008f60:	bb39      	cbnz	r1, 8008fb2 <_puts_r+0x9e>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da38      	bge.n	8008fd8 <_puts_r+0xc4>
 8008f66:	4622      	mov	r2, r4
 8008f68:	210a      	movs	r1, #10
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 f954 	bl	8009218 <__swbuf_r>
 8008f70:	3001      	adds	r0, #1
 8008f72:	d011      	beq.n	8008f98 <_puts_r+0x84>
 8008f74:	250a      	movs	r5, #10
 8008f76:	e011      	b.n	8008f9c <_puts_r+0x88>
 8008f78:	4b1b      	ldr	r3, [pc, #108]	; (8008fe8 <_puts_r+0xd4>)
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d101      	bne.n	8008f82 <_puts_r+0x6e>
 8008f7e:	68ac      	ldr	r4, [r5, #8]
 8008f80:	e7da      	b.n	8008f38 <_puts_r+0x24>
 8008f82:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <_puts_r+0xd8>)
 8008f84:	429c      	cmp	r4, r3
 8008f86:	bf08      	it	eq
 8008f88:	68ec      	ldreq	r4, [r5, #12]
 8008f8a:	e7d5      	b.n	8008f38 <_puts_r+0x24>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 f994 	bl	80092bc <__swsetup_r>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d0dd      	beq.n	8008f54 <_puts_r+0x40>
 8008f98:	f04f 35ff 	mov.w	r5, #4294967295
 8008f9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f9e:	07da      	lsls	r2, r3, #31
 8008fa0:	d405      	bmi.n	8008fae <_puts_r+0x9a>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	059b      	lsls	r3, r3, #22
 8008fa6:	d402      	bmi.n	8008fae <_puts_r+0x9a>
 8008fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008faa:	f000 fbde 	bl	800976a <__retarget_lock_release_recursive>
 8008fae:	4628      	mov	r0, r5
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	da04      	bge.n	8008fc0 <_puts_r+0xac>
 8008fb6:	69a2      	ldr	r2, [r4, #24]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	dc06      	bgt.n	8008fca <_puts_r+0xb6>
 8008fbc:	290a      	cmp	r1, #10
 8008fbe:	d004      	beq.n	8008fca <_puts_r+0xb6>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	6022      	str	r2, [r4, #0]
 8008fc6:	7019      	strb	r1, [r3, #0]
 8008fc8:	e7c5      	b.n	8008f56 <_puts_r+0x42>
 8008fca:	4622      	mov	r2, r4
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f000 f923 	bl	8009218 <__swbuf_r>
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	d1bf      	bne.n	8008f56 <_puts_r+0x42>
 8008fd6:	e7df      	b.n	8008f98 <_puts_r+0x84>
 8008fd8:	250a      	movs	r5, #10
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	701d      	strb	r5, [r3, #0]
 8008fe2:	e7db      	b.n	8008f9c <_puts_r+0x88>
 8008fe4:	0800a954 	.word	0x0800a954
 8008fe8:	0800a974 	.word	0x0800a974
 8008fec:	0800a934 	.word	0x0800a934

08008ff0 <puts>:
 8008ff0:	4b02      	ldr	r3, [pc, #8]	; (8008ffc <puts+0xc>)
 8008ff2:	4601      	mov	r1, r0
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	f7ff bf8d 	b.w	8008f14 <_puts_r>
 8008ffa:	bf00      	nop
 8008ffc:	20000198 	.word	0x20000198

08009000 <siprintf>:
 8009000:	b40e      	push	{r1, r2, r3}
 8009002:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009006:	b500      	push	{lr}
 8009008:	b09c      	sub	sp, #112	; 0x70
 800900a:	ab1d      	add	r3, sp, #116	; 0x74
 800900c:	9002      	str	r0, [sp, #8]
 800900e:	9006      	str	r0, [sp, #24]
 8009010:	9107      	str	r1, [sp, #28]
 8009012:	9104      	str	r1, [sp, #16]
 8009014:	4808      	ldr	r0, [pc, #32]	; (8009038 <siprintf+0x38>)
 8009016:	4909      	ldr	r1, [pc, #36]	; (800903c <siprintf+0x3c>)
 8009018:	f853 2b04 	ldr.w	r2, [r3], #4
 800901c:	9105      	str	r1, [sp, #20]
 800901e:	6800      	ldr	r0, [r0, #0]
 8009020:	a902      	add	r1, sp, #8
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	f000 fd10 	bl	8009a48 <_svfiprintf_r>
 8009028:	2200      	movs	r2, #0
 800902a:	9b02      	ldr	r3, [sp, #8]
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	b01c      	add	sp, #112	; 0x70
 8009030:	f85d eb04 	ldr.w	lr, [sp], #4
 8009034:	b003      	add	sp, #12
 8009036:	4770      	bx	lr
 8009038:	20000198 	.word	0x20000198
 800903c:	ffff0208 	.word	0xffff0208

08009040 <strtok>:
 8009040:	4b16      	ldr	r3, [pc, #88]	; (800909c <strtok+0x5c>)
 8009042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009046:	681f      	ldr	r7, [r3, #0]
 8009048:	4605      	mov	r5, r0
 800904a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800904c:	460e      	mov	r6, r1
 800904e:	b9ec      	cbnz	r4, 800908c <strtok+0x4c>
 8009050:	2050      	movs	r0, #80	; 0x50
 8009052:	f000 fbef 	bl	8009834 <malloc>
 8009056:	4602      	mov	r2, r0
 8009058:	65b8      	str	r0, [r7, #88]	; 0x58
 800905a:	b920      	cbnz	r0, 8009066 <strtok+0x26>
 800905c:	2157      	movs	r1, #87	; 0x57
 800905e:	4b10      	ldr	r3, [pc, #64]	; (80090a0 <strtok+0x60>)
 8009060:	4810      	ldr	r0, [pc, #64]	; (80090a4 <strtok+0x64>)
 8009062:	f000 f999 	bl	8009398 <__assert_func>
 8009066:	e9c0 4400 	strd	r4, r4, [r0]
 800906a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800906e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009072:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009076:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800907a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800907e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009082:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009086:	6184      	str	r4, [r0, #24]
 8009088:	7704      	strb	r4, [r0, #28]
 800908a:	6244      	str	r4, [r0, #36]	; 0x24
 800908c:	4631      	mov	r1, r6
 800908e:	4628      	mov	r0, r5
 8009090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009092:	2301      	movs	r3, #1
 8009094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009098:	f000 b806 	b.w	80090a8 <__strtok_r>
 800909c:	20000198 	.word	0x20000198
 80090a0:	0800a77c 	.word	0x0800a77c
 80090a4:	0800a793 	.word	0x0800a793

080090a8 <__strtok_r>:
 80090a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090aa:	b908      	cbnz	r0, 80090b0 <__strtok_r+0x8>
 80090ac:	6810      	ldr	r0, [r2, #0]
 80090ae:	b188      	cbz	r0, 80090d4 <__strtok_r+0x2c>
 80090b0:	4604      	mov	r4, r0
 80090b2:	460f      	mov	r7, r1
 80090b4:	4620      	mov	r0, r4
 80090b6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80090ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80090be:	b91e      	cbnz	r6, 80090c8 <__strtok_r+0x20>
 80090c0:	b965      	cbnz	r5, 80090dc <__strtok_r+0x34>
 80090c2:	4628      	mov	r0, r5
 80090c4:	6015      	str	r5, [r2, #0]
 80090c6:	e005      	b.n	80090d4 <__strtok_r+0x2c>
 80090c8:	42b5      	cmp	r5, r6
 80090ca:	d1f6      	bne.n	80090ba <__strtok_r+0x12>
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1f0      	bne.n	80090b2 <__strtok_r+0xa>
 80090d0:	6014      	str	r4, [r2, #0]
 80090d2:	7003      	strb	r3, [r0, #0]
 80090d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d6:	461c      	mov	r4, r3
 80090d8:	e00c      	b.n	80090f4 <__strtok_r+0x4c>
 80090da:	b915      	cbnz	r5, 80090e2 <__strtok_r+0x3a>
 80090dc:	460e      	mov	r6, r1
 80090de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80090e6:	42ab      	cmp	r3, r5
 80090e8:	d1f7      	bne.n	80090da <__strtok_r+0x32>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0f3      	beq.n	80090d6 <__strtok_r+0x2e>
 80090ee:	2300      	movs	r3, #0
 80090f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80090f4:	6014      	str	r4, [r2, #0]
 80090f6:	e7ed      	b.n	80090d4 <__strtok_r+0x2c>

080090f8 <_strtol_l.isra.0>:
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090fe:	4686      	mov	lr, r0
 8009100:	d001      	beq.n	8009106 <_strtol_l.isra.0+0xe>
 8009102:	2b24      	cmp	r3, #36	; 0x24
 8009104:	d906      	bls.n	8009114 <_strtol_l.isra.0+0x1c>
 8009106:	f7ff febb 	bl	8008e80 <__errno>
 800910a:	2316      	movs	r3, #22
 800910c:	6003      	str	r3, [r0, #0]
 800910e:	2000      	movs	r0, #0
 8009110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009114:	468c      	mov	ip, r1
 8009116:	4e3a      	ldr	r6, [pc, #232]	; (8009200 <_strtol_l.isra.0+0x108>)
 8009118:	4660      	mov	r0, ip
 800911a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800911e:	5da5      	ldrb	r5, [r4, r6]
 8009120:	f015 0508 	ands.w	r5, r5, #8
 8009124:	d1f8      	bne.n	8009118 <_strtol_l.isra.0+0x20>
 8009126:	2c2d      	cmp	r4, #45	; 0x2d
 8009128:	d133      	bne.n	8009192 <_strtol_l.isra.0+0x9a>
 800912a:	f04f 0801 	mov.w	r8, #1
 800912e:	f89c 4000 	ldrb.w	r4, [ip]
 8009132:	f100 0c02 	add.w	ip, r0, #2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d05d      	beq.n	80091f6 <_strtol_l.isra.0+0xfe>
 800913a:	2b10      	cmp	r3, #16
 800913c:	d10c      	bne.n	8009158 <_strtol_l.isra.0+0x60>
 800913e:	2c30      	cmp	r4, #48	; 0x30
 8009140:	d10a      	bne.n	8009158 <_strtol_l.isra.0+0x60>
 8009142:	f89c 0000 	ldrb.w	r0, [ip]
 8009146:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800914a:	2858      	cmp	r0, #88	; 0x58
 800914c:	d14e      	bne.n	80091ec <_strtol_l.isra.0+0xf4>
 800914e:	2310      	movs	r3, #16
 8009150:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009154:	f10c 0c02 	add.w	ip, ip, #2
 8009158:	2500      	movs	r5, #0
 800915a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800915e:	3f01      	subs	r7, #1
 8009160:	fbb7 f9f3 	udiv	r9, r7, r3
 8009164:	4628      	mov	r0, r5
 8009166:	fb03 7a19 	mls	sl, r3, r9, r7
 800916a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800916e:	2e09      	cmp	r6, #9
 8009170:	d818      	bhi.n	80091a4 <_strtol_l.isra.0+0xac>
 8009172:	4634      	mov	r4, r6
 8009174:	42a3      	cmp	r3, r4
 8009176:	dd24      	ble.n	80091c2 <_strtol_l.isra.0+0xca>
 8009178:	2d00      	cmp	r5, #0
 800917a:	db1f      	blt.n	80091bc <_strtol_l.isra.0+0xc4>
 800917c:	4581      	cmp	r9, r0
 800917e:	d31d      	bcc.n	80091bc <_strtol_l.isra.0+0xc4>
 8009180:	d101      	bne.n	8009186 <_strtol_l.isra.0+0x8e>
 8009182:	45a2      	cmp	sl, r4
 8009184:	db1a      	blt.n	80091bc <_strtol_l.isra.0+0xc4>
 8009186:	2501      	movs	r5, #1
 8009188:	fb00 4003 	mla	r0, r0, r3, r4
 800918c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009190:	e7eb      	b.n	800916a <_strtol_l.isra.0+0x72>
 8009192:	2c2b      	cmp	r4, #43	; 0x2b
 8009194:	bf08      	it	eq
 8009196:	f89c 4000 	ldrbeq.w	r4, [ip]
 800919a:	46a8      	mov	r8, r5
 800919c:	bf08      	it	eq
 800919e:	f100 0c02 	addeq.w	ip, r0, #2
 80091a2:	e7c8      	b.n	8009136 <_strtol_l.isra.0+0x3e>
 80091a4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80091a8:	2e19      	cmp	r6, #25
 80091aa:	d801      	bhi.n	80091b0 <_strtol_l.isra.0+0xb8>
 80091ac:	3c37      	subs	r4, #55	; 0x37
 80091ae:	e7e1      	b.n	8009174 <_strtol_l.isra.0+0x7c>
 80091b0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80091b4:	2e19      	cmp	r6, #25
 80091b6:	d804      	bhi.n	80091c2 <_strtol_l.isra.0+0xca>
 80091b8:	3c57      	subs	r4, #87	; 0x57
 80091ba:	e7db      	b.n	8009174 <_strtol_l.isra.0+0x7c>
 80091bc:	f04f 35ff 	mov.w	r5, #4294967295
 80091c0:	e7e4      	b.n	800918c <_strtol_l.isra.0+0x94>
 80091c2:	2d00      	cmp	r5, #0
 80091c4:	da08      	bge.n	80091d8 <_strtol_l.isra.0+0xe0>
 80091c6:	2322      	movs	r3, #34	; 0x22
 80091c8:	4638      	mov	r0, r7
 80091ca:	f8ce 3000 	str.w	r3, [lr]
 80091ce:	2a00      	cmp	r2, #0
 80091d0:	d09e      	beq.n	8009110 <_strtol_l.isra.0+0x18>
 80091d2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80091d6:	e007      	b.n	80091e8 <_strtol_l.isra.0+0xf0>
 80091d8:	f1b8 0f00 	cmp.w	r8, #0
 80091dc:	d000      	beq.n	80091e0 <_strtol_l.isra.0+0xe8>
 80091de:	4240      	negs	r0, r0
 80091e0:	2a00      	cmp	r2, #0
 80091e2:	d095      	beq.n	8009110 <_strtol_l.isra.0+0x18>
 80091e4:	2d00      	cmp	r5, #0
 80091e6:	d1f4      	bne.n	80091d2 <_strtol_l.isra.0+0xda>
 80091e8:	6011      	str	r1, [r2, #0]
 80091ea:	e791      	b.n	8009110 <_strtol_l.isra.0+0x18>
 80091ec:	2430      	movs	r4, #48	; 0x30
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1b2      	bne.n	8009158 <_strtol_l.isra.0+0x60>
 80091f2:	2308      	movs	r3, #8
 80091f4:	e7b0      	b.n	8009158 <_strtol_l.isra.0+0x60>
 80091f6:	2c30      	cmp	r4, #48	; 0x30
 80091f8:	d0a3      	beq.n	8009142 <_strtol_l.isra.0+0x4a>
 80091fa:	230a      	movs	r3, #10
 80091fc:	e7ac      	b.n	8009158 <_strtol_l.isra.0+0x60>
 80091fe:	bf00      	nop
 8009200:	0800a831 	.word	0x0800a831

08009204 <strtol>:
 8009204:	4613      	mov	r3, r2
 8009206:	460a      	mov	r2, r1
 8009208:	4601      	mov	r1, r0
 800920a:	4802      	ldr	r0, [pc, #8]	; (8009214 <strtol+0x10>)
 800920c:	6800      	ldr	r0, [r0, #0]
 800920e:	f7ff bf73 	b.w	80090f8 <_strtol_l.isra.0>
 8009212:	bf00      	nop
 8009214:	20000198 	.word	0x20000198

08009218 <__swbuf_r>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	460e      	mov	r6, r1
 800921c:	4614      	mov	r4, r2
 800921e:	4605      	mov	r5, r0
 8009220:	b118      	cbz	r0, 800922a <__swbuf_r+0x12>
 8009222:	6983      	ldr	r3, [r0, #24]
 8009224:	b90b      	cbnz	r3, 800922a <__swbuf_r+0x12>
 8009226:	f000 f9ef 	bl	8009608 <__sinit>
 800922a:	4b21      	ldr	r3, [pc, #132]	; (80092b0 <__swbuf_r+0x98>)
 800922c:	429c      	cmp	r4, r3
 800922e:	d12b      	bne.n	8009288 <__swbuf_r+0x70>
 8009230:	686c      	ldr	r4, [r5, #4]
 8009232:	69a3      	ldr	r3, [r4, #24]
 8009234:	60a3      	str	r3, [r4, #8]
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	071a      	lsls	r2, r3, #28
 800923a:	d52f      	bpl.n	800929c <__swbuf_r+0x84>
 800923c:	6923      	ldr	r3, [r4, #16]
 800923e:	b36b      	cbz	r3, 800929c <__swbuf_r+0x84>
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	6820      	ldr	r0, [r4, #0]
 8009244:	b2f6      	uxtb	r6, r6
 8009246:	1ac0      	subs	r0, r0, r3
 8009248:	6963      	ldr	r3, [r4, #20]
 800924a:	4637      	mov	r7, r6
 800924c:	4283      	cmp	r3, r0
 800924e:	dc04      	bgt.n	800925a <__swbuf_r+0x42>
 8009250:	4621      	mov	r1, r4
 8009252:	4628      	mov	r0, r5
 8009254:	f000 f944 	bl	80094e0 <_fflush_r>
 8009258:	bb30      	cbnz	r0, 80092a8 <__swbuf_r+0x90>
 800925a:	68a3      	ldr	r3, [r4, #8]
 800925c:	3001      	adds	r0, #1
 800925e:	3b01      	subs	r3, #1
 8009260:	60a3      	str	r3, [r4, #8]
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	6022      	str	r2, [r4, #0]
 8009268:	701e      	strb	r6, [r3, #0]
 800926a:	6963      	ldr	r3, [r4, #20]
 800926c:	4283      	cmp	r3, r0
 800926e:	d004      	beq.n	800927a <__swbuf_r+0x62>
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	07db      	lsls	r3, r3, #31
 8009274:	d506      	bpl.n	8009284 <__swbuf_r+0x6c>
 8009276:	2e0a      	cmp	r6, #10
 8009278:	d104      	bne.n	8009284 <__swbuf_r+0x6c>
 800927a:	4621      	mov	r1, r4
 800927c:	4628      	mov	r0, r5
 800927e:	f000 f92f 	bl	80094e0 <_fflush_r>
 8009282:	b988      	cbnz	r0, 80092a8 <__swbuf_r+0x90>
 8009284:	4638      	mov	r0, r7
 8009286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <__swbuf_r+0x9c>)
 800928a:	429c      	cmp	r4, r3
 800928c:	d101      	bne.n	8009292 <__swbuf_r+0x7a>
 800928e:	68ac      	ldr	r4, [r5, #8]
 8009290:	e7cf      	b.n	8009232 <__swbuf_r+0x1a>
 8009292:	4b09      	ldr	r3, [pc, #36]	; (80092b8 <__swbuf_r+0xa0>)
 8009294:	429c      	cmp	r4, r3
 8009296:	bf08      	it	eq
 8009298:	68ec      	ldreq	r4, [r5, #12]
 800929a:	e7ca      	b.n	8009232 <__swbuf_r+0x1a>
 800929c:	4621      	mov	r1, r4
 800929e:	4628      	mov	r0, r5
 80092a0:	f000 f80c 	bl	80092bc <__swsetup_r>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d0cb      	beq.n	8009240 <__swbuf_r+0x28>
 80092a8:	f04f 37ff 	mov.w	r7, #4294967295
 80092ac:	e7ea      	b.n	8009284 <__swbuf_r+0x6c>
 80092ae:	bf00      	nop
 80092b0:	0800a954 	.word	0x0800a954
 80092b4:	0800a974 	.word	0x0800a974
 80092b8:	0800a934 	.word	0x0800a934

080092bc <__swsetup_r>:
 80092bc:	4b32      	ldr	r3, [pc, #200]	; (8009388 <__swsetup_r+0xcc>)
 80092be:	b570      	push	{r4, r5, r6, lr}
 80092c0:	681d      	ldr	r5, [r3, #0]
 80092c2:	4606      	mov	r6, r0
 80092c4:	460c      	mov	r4, r1
 80092c6:	b125      	cbz	r5, 80092d2 <__swsetup_r+0x16>
 80092c8:	69ab      	ldr	r3, [r5, #24]
 80092ca:	b913      	cbnz	r3, 80092d2 <__swsetup_r+0x16>
 80092cc:	4628      	mov	r0, r5
 80092ce:	f000 f99b 	bl	8009608 <__sinit>
 80092d2:	4b2e      	ldr	r3, [pc, #184]	; (800938c <__swsetup_r+0xd0>)
 80092d4:	429c      	cmp	r4, r3
 80092d6:	d10f      	bne.n	80092f8 <__swsetup_r+0x3c>
 80092d8:	686c      	ldr	r4, [r5, #4]
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092e0:	0719      	lsls	r1, r3, #28
 80092e2:	d42c      	bmi.n	800933e <__swsetup_r+0x82>
 80092e4:	06dd      	lsls	r5, r3, #27
 80092e6:	d411      	bmi.n	800930c <__swsetup_r+0x50>
 80092e8:	2309      	movs	r3, #9
 80092ea:	6033      	str	r3, [r6, #0]
 80092ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	81a3      	strh	r3, [r4, #12]
 80092f6:	e03e      	b.n	8009376 <__swsetup_r+0xba>
 80092f8:	4b25      	ldr	r3, [pc, #148]	; (8009390 <__swsetup_r+0xd4>)
 80092fa:	429c      	cmp	r4, r3
 80092fc:	d101      	bne.n	8009302 <__swsetup_r+0x46>
 80092fe:	68ac      	ldr	r4, [r5, #8]
 8009300:	e7eb      	b.n	80092da <__swsetup_r+0x1e>
 8009302:	4b24      	ldr	r3, [pc, #144]	; (8009394 <__swsetup_r+0xd8>)
 8009304:	429c      	cmp	r4, r3
 8009306:	bf08      	it	eq
 8009308:	68ec      	ldreq	r4, [r5, #12]
 800930a:	e7e6      	b.n	80092da <__swsetup_r+0x1e>
 800930c:	0758      	lsls	r0, r3, #29
 800930e:	d512      	bpl.n	8009336 <__swsetup_r+0x7a>
 8009310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009312:	b141      	cbz	r1, 8009326 <__swsetup_r+0x6a>
 8009314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009318:	4299      	cmp	r1, r3
 800931a:	d002      	beq.n	8009322 <__swsetup_r+0x66>
 800931c:	4630      	mov	r0, r6
 800931e:	f000 fa91 	bl	8009844 <_free_r>
 8009322:	2300      	movs	r3, #0
 8009324:	6363      	str	r3, [r4, #52]	; 0x34
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	2300      	movs	r3, #0
 8009330:	6063      	str	r3, [r4, #4]
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	f043 0308 	orr.w	r3, r3, #8
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	b94b      	cbnz	r3, 8009356 <__swsetup_r+0x9a>
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800934c:	d003      	beq.n	8009356 <__swsetup_r+0x9a>
 800934e:	4621      	mov	r1, r4
 8009350:	4630      	mov	r0, r6
 8009352:	f000 fa2f 	bl	80097b4 <__smakebuf_r>
 8009356:	89a0      	ldrh	r0, [r4, #12]
 8009358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800935c:	f010 0301 	ands.w	r3, r0, #1
 8009360:	d00a      	beq.n	8009378 <__swsetup_r+0xbc>
 8009362:	2300      	movs	r3, #0
 8009364:	60a3      	str	r3, [r4, #8]
 8009366:	6963      	ldr	r3, [r4, #20]
 8009368:	425b      	negs	r3, r3
 800936a:	61a3      	str	r3, [r4, #24]
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	b943      	cbnz	r3, 8009382 <__swsetup_r+0xc6>
 8009370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009374:	d1ba      	bne.n	80092ec <__swsetup_r+0x30>
 8009376:	bd70      	pop	{r4, r5, r6, pc}
 8009378:	0781      	lsls	r1, r0, #30
 800937a:	bf58      	it	pl
 800937c:	6963      	ldrpl	r3, [r4, #20]
 800937e:	60a3      	str	r3, [r4, #8]
 8009380:	e7f4      	b.n	800936c <__swsetup_r+0xb0>
 8009382:	2000      	movs	r0, #0
 8009384:	e7f7      	b.n	8009376 <__swsetup_r+0xba>
 8009386:	bf00      	nop
 8009388:	20000198 	.word	0x20000198
 800938c:	0800a954 	.word	0x0800a954
 8009390:	0800a974 	.word	0x0800a974
 8009394:	0800a934 	.word	0x0800a934

08009398 <__assert_func>:
 8009398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800939a:	4614      	mov	r4, r2
 800939c:	461a      	mov	r2, r3
 800939e:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <__assert_func+0x2c>)
 80093a0:	4605      	mov	r5, r0
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68d8      	ldr	r0, [r3, #12]
 80093a6:	b14c      	cbz	r4, 80093bc <__assert_func+0x24>
 80093a8:	4b07      	ldr	r3, [pc, #28]	; (80093c8 <__assert_func+0x30>)
 80093aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093ae:	9100      	str	r1, [sp, #0]
 80093b0:	462b      	mov	r3, r5
 80093b2:	4906      	ldr	r1, [pc, #24]	; (80093cc <__assert_func+0x34>)
 80093b4:	f000 f9a6 	bl	8009704 <fiprintf>
 80093b8:	f000 ff9a 	bl	800a2f0 <abort>
 80093bc:	4b04      	ldr	r3, [pc, #16]	; (80093d0 <__assert_func+0x38>)
 80093be:	461c      	mov	r4, r3
 80093c0:	e7f3      	b.n	80093aa <__assert_func+0x12>
 80093c2:	bf00      	nop
 80093c4:	20000198 	.word	0x20000198
 80093c8:	0800a7f4 	.word	0x0800a7f4
 80093cc:	0800a801 	.word	0x0800a801
 80093d0:	0800a82f 	.word	0x0800a82f

080093d4 <__sflush_r>:
 80093d4:	898a      	ldrh	r2, [r1, #12]
 80093d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093da:	4605      	mov	r5, r0
 80093dc:	0710      	lsls	r0, r2, #28
 80093de:	460c      	mov	r4, r1
 80093e0:	d458      	bmi.n	8009494 <__sflush_r+0xc0>
 80093e2:	684b      	ldr	r3, [r1, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dc05      	bgt.n	80093f4 <__sflush_r+0x20>
 80093e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	dc02      	bgt.n	80093f4 <__sflush_r+0x20>
 80093ee:	2000      	movs	r0, #0
 80093f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093f6:	2e00      	cmp	r6, #0
 80093f8:	d0f9      	beq.n	80093ee <__sflush_r+0x1a>
 80093fa:	2300      	movs	r3, #0
 80093fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009400:	682f      	ldr	r7, [r5, #0]
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	d032      	beq.n	800946c <__sflush_r+0x98>
 8009406:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	075a      	lsls	r2, r3, #29
 800940c:	d505      	bpl.n	800941a <__sflush_r+0x46>
 800940e:	6863      	ldr	r3, [r4, #4]
 8009410:	1ac0      	subs	r0, r0, r3
 8009412:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009414:	b10b      	cbz	r3, 800941a <__sflush_r+0x46>
 8009416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009418:	1ac0      	subs	r0, r0, r3
 800941a:	2300      	movs	r3, #0
 800941c:	4602      	mov	r2, r0
 800941e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009420:	4628      	mov	r0, r5
 8009422:	6a21      	ldr	r1, [r4, #32]
 8009424:	47b0      	blx	r6
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	d106      	bne.n	800943a <__sflush_r+0x66>
 800942c:	6829      	ldr	r1, [r5, #0]
 800942e:	291d      	cmp	r1, #29
 8009430:	d82c      	bhi.n	800948c <__sflush_r+0xb8>
 8009432:	4a2a      	ldr	r2, [pc, #168]	; (80094dc <__sflush_r+0x108>)
 8009434:	40ca      	lsrs	r2, r1
 8009436:	07d6      	lsls	r6, r2, #31
 8009438:	d528      	bpl.n	800948c <__sflush_r+0xb8>
 800943a:	2200      	movs	r2, #0
 800943c:	6062      	str	r2, [r4, #4]
 800943e:	6922      	ldr	r2, [r4, #16]
 8009440:	04d9      	lsls	r1, r3, #19
 8009442:	6022      	str	r2, [r4, #0]
 8009444:	d504      	bpl.n	8009450 <__sflush_r+0x7c>
 8009446:	1c42      	adds	r2, r0, #1
 8009448:	d101      	bne.n	800944e <__sflush_r+0x7a>
 800944a:	682b      	ldr	r3, [r5, #0]
 800944c:	b903      	cbnz	r3, 8009450 <__sflush_r+0x7c>
 800944e:	6560      	str	r0, [r4, #84]	; 0x54
 8009450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009452:	602f      	str	r7, [r5, #0]
 8009454:	2900      	cmp	r1, #0
 8009456:	d0ca      	beq.n	80093ee <__sflush_r+0x1a>
 8009458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800945c:	4299      	cmp	r1, r3
 800945e:	d002      	beq.n	8009466 <__sflush_r+0x92>
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f9ef 	bl	8009844 <_free_r>
 8009466:	2000      	movs	r0, #0
 8009468:	6360      	str	r0, [r4, #52]	; 0x34
 800946a:	e7c1      	b.n	80093f0 <__sflush_r+0x1c>
 800946c:	6a21      	ldr	r1, [r4, #32]
 800946e:	2301      	movs	r3, #1
 8009470:	4628      	mov	r0, r5
 8009472:	47b0      	blx	r6
 8009474:	1c41      	adds	r1, r0, #1
 8009476:	d1c7      	bne.n	8009408 <__sflush_r+0x34>
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0c4      	beq.n	8009408 <__sflush_r+0x34>
 800947e:	2b1d      	cmp	r3, #29
 8009480:	d001      	beq.n	8009486 <__sflush_r+0xb2>
 8009482:	2b16      	cmp	r3, #22
 8009484:	d101      	bne.n	800948a <__sflush_r+0xb6>
 8009486:	602f      	str	r7, [r5, #0]
 8009488:	e7b1      	b.n	80093ee <__sflush_r+0x1a>
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009490:	81a3      	strh	r3, [r4, #12]
 8009492:	e7ad      	b.n	80093f0 <__sflush_r+0x1c>
 8009494:	690f      	ldr	r7, [r1, #16]
 8009496:	2f00      	cmp	r7, #0
 8009498:	d0a9      	beq.n	80093ee <__sflush_r+0x1a>
 800949a:	0793      	lsls	r3, r2, #30
 800949c:	bf18      	it	ne
 800949e:	2300      	movne	r3, #0
 80094a0:	680e      	ldr	r6, [r1, #0]
 80094a2:	bf08      	it	eq
 80094a4:	694b      	ldreq	r3, [r1, #20]
 80094a6:	eba6 0807 	sub.w	r8, r6, r7
 80094aa:	600f      	str	r7, [r1, #0]
 80094ac:	608b      	str	r3, [r1, #8]
 80094ae:	f1b8 0f00 	cmp.w	r8, #0
 80094b2:	dd9c      	ble.n	80093ee <__sflush_r+0x1a>
 80094b4:	4643      	mov	r3, r8
 80094b6:	463a      	mov	r2, r7
 80094b8:	4628      	mov	r0, r5
 80094ba:	6a21      	ldr	r1, [r4, #32]
 80094bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094be:	47b0      	blx	r6
 80094c0:	2800      	cmp	r0, #0
 80094c2:	dc06      	bgt.n	80094d2 <__sflush_r+0xfe>
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ce:	81a3      	strh	r3, [r4, #12]
 80094d0:	e78e      	b.n	80093f0 <__sflush_r+0x1c>
 80094d2:	4407      	add	r7, r0
 80094d4:	eba8 0800 	sub.w	r8, r8, r0
 80094d8:	e7e9      	b.n	80094ae <__sflush_r+0xda>
 80094da:	bf00      	nop
 80094dc:	20400001 	.word	0x20400001

080094e0 <_fflush_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	690b      	ldr	r3, [r1, #16]
 80094e4:	4605      	mov	r5, r0
 80094e6:	460c      	mov	r4, r1
 80094e8:	b913      	cbnz	r3, 80094f0 <_fflush_r+0x10>
 80094ea:	2500      	movs	r5, #0
 80094ec:	4628      	mov	r0, r5
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	b118      	cbz	r0, 80094fa <_fflush_r+0x1a>
 80094f2:	6983      	ldr	r3, [r0, #24]
 80094f4:	b90b      	cbnz	r3, 80094fa <_fflush_r+0x1a>
 80094f6:	f000 f887 	bl	8009608 <__sinit>
 80094fa:	4b14      	ldr	r3, [pc, #80]	; (800954c <_fflush_r+0x6c>)
 80094fc:	429c      	cmp	r4, r3
 80094fe:	d11b      	bne.n	8009538 <_fflush_r+0x58>
 8009500:	686c      	ldr	r4, [r5, #4]
 8009502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0ef      	beq.n	80094ea <_fflush_r+0xa>
 800950a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800950c:	07d0      	lsls	r0, r2, #31
 800950e:	d404      	bmi.n	800951a <_fflush_r+0x3a>
 8009510:	0599      	lsls	r1, r3, #22
 8009512:	d402      	bmi.n	800951a <_fflush_r+0x3a>
 8009514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009516:	f000 f927 	bl	8009768 <__retarget_lock_acquire_recursive>
 800951a:	4628      	mov	r0, r5
 800951c:	4621      	mov	r1, r4
 800951e:	f7ff ff59 	bl	80093d4 <__sflush_r>
 8009522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009524:	4605      	mov	r5, r0
 8009526:	07da      	lsls	r2, r3, #31
 8009528:	d4e0      	bmi.n	80094ec <_fflush_r+0xc>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	059b      	lsls	r3, r3, #22
 800952e:	d4dd      	bmi.n	80094ec <_fflush_r+0xc>
 8009530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009532:	f000 f91a 	bl	800976a <__retarget_lock_release_recursive>
 8009536:	e7d9      	b.n	80094ec <_fflush_r+0xc>
 8009538:	4b05      	ldr	r3, [pc, #20]	; (8009550 <_fflush_r+0x70>)
 800953a:	429c      	cmp	r4, r3
 800953c:	d101      	bne.n	8009542 <_fflush_r+0x62>
 800953e:	68ac      	ldr	r4, [r5, #8]
 8009540:	e7df      	b.n	8009502 <_fflush_r+0x22>
 8009542:	4b04      	ldr	r3, [pc, #16]	; (8009554 <_fflush_r+0x74>)
 8009544:	429c      	cmp	r4, r3
 8009546:	bf08      	it	eq
 8009548:	68ec      	ldreq	r4, [r5, #12]
 800954a:	e7da      	b.n	8009502 <_fflush_r+0x22>
 800954c:	0800a954 	.word	0x0800a954
 8009550:	0800a974 	.word	0x0800a974
 8009554:	0800a934 	.word	0x0800a934

08009558 <std>:
 8009558:	2300      	movs	r3, #0
 800955a:	b510      	push	{r4, lr}
 800955c:	4604      	mov	r4, r0
 800955e:	e9c0 3300 	strd	r3, r3, [r0]
 8009562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009566:	6083      	str	r3, [r0, #8]
 8009568:	8181      	strh	r1, [r0, #12]
 800956a:	6643      	str	r3, [r0, #100]	; 0x64
 800956c:	81c2      	strh	r2, [r0, #14]
 800956e:	6183      	str	r3, [r0, #24]
 8009570:	4619      	mov	r1, r3
 8009572:	2208      	movs	r2, #8
 8009574:	305c      	adds	r0, #92	; 0x5c
 8009576:	f7ff fcad 	bl	8008ed4 <memset>
 800957a:	4b05      	ldr	r3, [pc, #20]	; (8009590 <std+0x38>)
 800957c:	6224      	str	r4, [r4, #32]
 800957e:	6263      	str	r3, [r4, #36]	; 0x24
 8009580:	4b04      	ldr	r3, [pc, #16]	; (8009594 <std+0x3c>)
 8009582:	62a3      	str	r3, [r4, #40]	; 0x28
 8009584:	4b04      	ldr	r3, [pc, #16]	; (8009598 <std+0x40>)
 8009586:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009588:	4b04      	ldr	r3, [pc, #16]	; (800959c <std+0x44>)
 800958a:	6323      	str	r3, [r4, #48]	; 0x30
 800958c:	bd10      	pop	{r4, pc}
 800958e:	bf00      	nop
 8009590:	0800a245 	.word	0x0800a245
 8009594:	0800a267 	.word	0x0800a267
 8009598:	0800a29f 	.word	0x0800a29f
 800959c:	0800a2c3 	.word	0x0800a2c3

080095a0 <_cleanup_r>:
 80095a0:	4901      	ldr	r1, [pc, #4]	; (80095a8 <_cleanup_r+0x8>)
 80095a2:	f000 b8c1 	b.w	8009728 <_fwalk_reent>
 80095a6:	bf00      	nop
 80095a8:	080094e1 	.word	0x080094e1

080095ac <__sfmoreglue>:
 80095ac:	b570      	push	{r4, r5, r6, lr}
 80095ae:	2568      	movs	r5, #104	; 0x68
 80095b0:	1e4a      	subs	r2, r1, #1
 80095b2:	4355      	muls	r5, r2
 80095b4:	460e      	mov	r6, r1
 80095b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095ba:	f000 f98f 	bl	80098dc <_malloc_r>
 80095be:	4604      	mov	r4, r0
 80095c0:	b140      	cbz	r0, 80095d4 <__sfmoreglue+0x28>
 80095c2:	2100      	movs	r1, #0
 80095c4:	e9c0 1600 	strd	r1, r6, [r0]
 80095c8:	300c      	adds	r0, #12
 80095ca:	60a0      	str	r0, [r4, #8]
 80095cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095d0:	f7ff fc80 	bl	8008ed4 <memset>
 80095d4:	4620      	mov	r0, r4
 80095d6:	bd70      	pop	{r4, r5, r6, pc}

080095d8 <__sfp_lock_acquire>:
 80095d8:	4801      	ldr	r0, [pc, #4]	; (80095e0 <__sfp_lock_acquire+0x8>)
 80095da:	f000 b8c5 	b.w	8009768 <__retarget_lock_acquire_recursive>
 80095de:	bf00      	nop
 80095e0:	200015d8 	.word	0x200015d8

080095e4 <__sfp_lock_release>:
 80095e4:	4801      	ldr	r0, [pc, #4]	; (80095ec <__sfp_lock_release+0x8>)
 80095e6:	f000 b8c0 	b.w	800976a <__retarget_lock_release_recursive>
 80095ea:	bf00      	nop
 80095ec:	200015d8 	.word	0x200015d8

080095f0 <__sinit_lock_acquire>:
 80095f0:	4801      	ldr	r0, [pc, #4]	; (80095f8 <__sinit_lock_acquire+0x8>)
 80095f2:	f000 b8b9 	b.w	8009768 <__retarget_lock_acquire_recursive>
 80095f6:	bf00      	nop
 80095f8:	200015d3 	.word	0x200015d3

080095fc <__sinit_lock_release>:
 80095fc:	4801      	ldr	r0, [pc, #4]	; (8009604 <__sinit_lock_release+0x8>)
 80095fe:	f000 b8b4 	b.w	800976a <__retarget_lock_release_recursive>
 8009602:	bf00      	nop
 8009604:	200015d3 	.word	0x200015d3

08009608 <__sinit>:
 8009608:	b510      	push	{r4, lr}
 800960a:	4604      	mov	r4, r0
 800960c:	f7ff fff0 	bl	80095f0 <__sinit_lock_acquire>
 8009610:	69a3      	ldr	r3, [r4, #24]
 8009612:	b11b      	cbz	r3, 800961c <__sinit+0x14>
 8009614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009618:	f7ff bff0 	b.w	80095fc <__sinit_lock_release>
 800961c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009620:	6523      	str	r3, [r4, #80]	; 0x50
 8009622:	4b13      	ldr	r3, [pc, #76]	; (8009670 <__sinit+0x68>)
 8009624:	4a13      	ldr	r2, [pc, #76]	; (8009674 <__sinit+0x6c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	62a2      	str	r2, [r4, #40]	; 0x28
 800962a:	42a3      	cmp	r3, r4
 800962c:	bf08      	it	eq
 800962e:	2301      	moveq	r3, #1
 8009630:	4620      	mov	r0, r4
 8009632:	bf08      	it	eq
 8009634:	61a3      	streq	r3, [r4, #24]
 8009636:	f000 f81f 	bl	8009678 <__sfp>
 800963a:	6060      	str	r0, [r4, #4]
 800963c:	4620      	mov	r0, r4
 800963e:	f000 f81b 	bl	8009678 <__sfp>
 8009642:	60a0      	str	r0, [r4, #8]
 8009644:	4620      	mov	r0, r4
 8009646:	f000 f817 	bl	8009678 <__sfp>
 800964a:	2200      	movs	r2, #0
 800964c:	2104      	movs	r1, #4
 800964e:	60e0      	str	r0, [r4, #12]
 8009650:	6860      	ldr	r0, [r4, #4]
 8009652:	f7ff ff81 	bl	8009558 <std>
 8009656:	2201      	movs	r2, #1
 8009658:	2109      	movs	r1, #9
 800965a:	68a0      	ldr	r0, [r4, #8]
 800965c:	f7ff ff7c 	bl	8009558 <std>
 8009660:	2202      	movs	r2, #2
 8009662:	2112      	movs	r1, #18
 8009664:	68e0      	ldr	r0, [r4, #12]
 8009666:	f7ff ff77 	bl	8009558 <std>
 800966a:	2301      	movs	r3, #1
 800966c:	61a3      	str	r3, [r4, #24]
 800966e:	e7d1      	b.n	8009614 <__sinit+0xc>
 8009670:	0800a778 	.word	0x0800a778
 8009674:	080095a1 	.word	0x080095a1

08009678 <__sfp>:
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967a:	4607      	mov	r7, r0
 800967c:	f7ff ffac 	bl	80095d8 <__sfp_lock_acquire>
 8009680:	4b1e      	ldr	r3, [pc, #120]	; (80096fc <__sfp+0x84>)
 8009682:	681e      	ldr	r6, [r3, #0]
 8009684:	69b3      	ldr	r3, [r6, #24]
 8009686:	b913      	cbnz	r3, 800968e <__sfp+0x16>
 8009688:	4630      	mov	r0, r6
 800968a:	f7ff ffbd 	bl	8009608 <__sinit>
 800968e:	3648      	adds	r6, #72	; 0x48
 8009690:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009694:	3b01      	subs	r3, #1
 8009696:	d503      	bpl.n	80096a0 <__sfp+0x28>
 8009698:	6833      	ldr	r3, [r6, #0]
 800969a:	b30b      	cbz	r3, 80096e0 <__sfp+0x68>
 800969c:	6836      	ldr	r6, [r6, #0]
 800969e:	e7f7      	b.n	8009690 <__sfp+0x18>
 80096a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096a4:	b9d5      	cbnz	r5, 80096dc <__sfp+0x64>
 80096a6:	4b16      	ldr	r3, [pc, #88]	; (8009700 <__sfp+0x88>)
 80096a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096ac:	60e3      	str	r3, [r4, #12]
 80096ae:	6665      	str	r5, [r4, #100]	; 0x64
 80096b0:	f000 f859 	bl	8009766 <__retarget_lock_init_recursive>
 80096b4:	f7ff ff96 	bl	80095e4 <__sfp_lock_release>
 80096b8:	2208      	movs	r2, #8
 80096ba:	4629      	mov	r1, r5
 80096bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096c4:	6025      	str	r5, [r4, #0]
 80096c6:	61a5      	str	r5, [r4, #24]
 80096c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096cc:	f7ff fc02 	bl	8008ed4 <memset>
 80096d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096d8:	4620      	mov	r0, r4
 80096da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096dc:	3468      	adds	r4, #104	; 0x68
 80096de:	e7d9      	b.n	8009694 <__sfp+0x1c>
 80096e0:	2104      	movs	r1, #4
 80096e2:	4638      	mov	r0, r7
 80096e4:	f7ff ff62 	bl	80095ac <__sfmoreglue>
 80096e8:	4604      	mov	r4, r0
 80096ea:	6030      	str	r0, [r6, #0]
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d1d5      	bne.n	800969c <__sfp+0x24>
 80096f0:	f7ff ff78 	bl	80095e4 <__sfp_lock_release>
 80096f4:	230c      	movs	r3, #12
 80096f6:	603b      	str	r3, [r7, #0]
 80096f8:	e7ee      	b.n	80096d8 <__sfp+0x60>
 80096fa:	bf00      	nop
 80096fc:	0800a778 	.word	0x0800a778
 8009700:	ffff0001 	.word	0xffff0001

08009704 <fiprintf>:
 8009704:	b40e      	push	{r1, r2, r3}
 8009706:	b503      	push	{r0, r1, lr}
 8009708:	4601      	mov	r1, r0
 800970a:	ab03      	add	r3, sp, #12
 800970c:	4805      	ldr	r0, [pc, #20]	; (8009724 <fiprintf+0x20>)
 800970e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009712:	6800      	ldr	r0, [r0, #0]
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	f000 fabf 	bl	8009c98 <_vfiprintf_r>
 800971a:	b002      	add	sp, #8
 800971c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009720:	b003      	add	sp, #12
 8009722:	4770      	bx	lr
 8009724:	20000198 	.word	0x20000198

08009728 <_fwalk_reent>:
 8009728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800972c:	4606      	mov	r6, r0
 800972e:	4688      	mov	r8, r1
 8009730:	2700      	movs	r7, #0
 8009732:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800973a:	f1b9 0901 	subs.w	r9, r9, #1
 800973e:	d505      	bpl.n	800974c <_fwalk_reent+0x24>
 8009740:	6824      	ldr	r4, [r4, #0]
 8009742:	2c00      	cmp	r4, #0
 8009744:	d1f7      	bne.n	8009736 <_fwalk_reent+0xe>
 8009746:	4638      	mov	r0, r7
 8009748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974c:	89ab      	ldrh	r3, [r5, #12]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d907      	bls.n	8009762 <_fwalk_reent+0x3a>
 8009752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009756:	3301      	adds	r3, #1
 8009758:	d003      	beq.n	8009762 <_fwalk_reent+0x3a>
 800975a:	4629      	mov	r1, r5
 800975c:	4630      	mov	r0, r6
 800975e:	47c0      	blx	r8
 8009760:	4307      	orrs	r7, r0
 8009762:	3568      	adds	r5, #104	; 0x68
 8009764:	e7e9      	b.n	800973a <_fwalk_reent+0x12>

08009766 <__retarget_lock_init_recursive>:
 8009766:	4770      	bx	lr

08009768 <__retarget_lock_acquire_recursive>:
 8009768:	4770      	bx	lr

0800976a <__retarget_lock_release_recursive>:
 800976a:	4770      	bx	lr

0800976c <__swhatbuf_r>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	460e      	mov	r6, r1
 8009770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009774:	4614      	mov	r4, r2
 8009776:	2900      	cmp	r1, #0
 8009778:	461d      	mov	r5, r3
 800977a:	b096      	sub	sp, #88	; 0x58
 800977c:	da07      	bge.n	800978e <__swhatbuf_r+0x22>
 800977e:	2300      	movs	r3, #0
 8009780:	602b      	str	r3, [r5, #0]
 8009782:	89b3      	ldrh	r3, [r6, #12]
 8009784:	061a      	lsls	r2, r3, #24
 8009786:	d410      	bmi.n	80097aa <__swhatbuf_r+0x3e>
 8009788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800978c:	e00e      	b.n	80097ac <__swhatbuf_r+0x40>
 800978e:	466a      	mov	r2, sp
 8009790:	f000 fdc6 	bl	800a320 <_fstat_r>
 8009794:	2800      	cmp	r0, #0
 8009796:	dbf2      	blt.n	800977e <__swhatbuf_r+0x12>
 8009798:	9a01      	ldr	r2, [sp, #4]
 800979a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800979e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097a2:	425a      	negs	r2, r3
 80097a4:	415a      	adcs	r2, r3
 80097a6:	602a      	str	r2, [r5, #0]
 80097a8:	e7ee      	b.n	8009788 <__swhatbuf_r+0x1c>
 80097aa:	2340      	movs	r3, #64	; 0x40
 80097ac:	2000      	movs	r0, #0
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	b016      	add	sp, #88	; 0x58
 80097b2:	bd70      	pop	{r4, r5, r6, pc}

080097b4 <__smakebuf_r>:
 80097b4:	898b      	ldrh	r3, [r1, #12]
 80097b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097b8:	079d      	lsls	r5, r3, #30
 80097ba:	4606      	mov	r6, r0
 80097bc:	460c      	mov	r4, r1
 80097be:	d507      	bpl.n	80097d0 <__smakebuf_r+0x1c>
 80097c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	6123      	str	r3, [r4, #16]
 80097c8:	2301      	movs	r3, #1
 80097ca:	6163      	str	r3, [r4, #20]
 80097cc:	b002      	add	sp, #8
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	466a      	mov	r2, sp
 80097d2:	ab01      	add	r3, sp, #4
 80097d4:	f7ff ffca 	bl	800976c <__swhatbuf_r>
 80097d8:	9900      	ldr	r1, [sp, #0]
 80097da:	4605      	mov	r5, r0
 80097dc:	4630      	mov	r0, r6
 80097de:	f000 f87d 	bl	80098dc <_malloc_r>
 80097e2:	b948      	cbnz	r0, 80097f8 <__smakebuf_r+0x44>
 80097e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e8:	059a      	lsls	r2, r3, #22
 80097ea:	d4ef      	bmi.n	80097cc <__smakebuf_r+0x18>
 80097ec:	f023 0303 	bic.w	r3, r3, #3
 80097f0:	f043 0302 	orr.w	r3, r3, #2
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	e7e3      	b.n	80097c0 <__smakebuf_r+0xc>
 80097f8:	4b0d      	ldr	r3, [pc, #52]	; (8009830 <__smakebuf_r+0x7c>)
 80097fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	6020      	str	r0, [r4, #0]
 8009800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	9b00      	ldr	r3, [sp, #0]
 8009808:	6120      	str	r0, [r4, #16]
 800980a:	6163      	str	r3, [r4, #20]
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	b15b      	cbz	r3, 8009828 <__smakebuf_r+0x74>
 8009810:	4630      	mov	r0, r6
 8009812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009816:	f000 fd95 	bl	800a344 <_isatty_r>
 800981a:	b128      	cbz	r0, 8009828 <__smakebuf_r+0x74>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f023 0303 	bic.w	r3, r3, #3
 8009822:	f043 0301 	orr.w	r3, r3, #1
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	89a0      	ldrh	r0, [r4, #12]
 800982a:	4305      	orrs	r5, r0
 800982c:	81a5      	strh	r5, [r4, #12]
 800982e:	e7cd      	b.n	80097cc <__smakebuf_r+0x18>
 8009830:	080095a1 	.word	0x080095a1

08009834 <malloc>:
 8009834:	4b02      	ldr	r3, [pc, #8]	; (8009840 <malloc+0xc>)
 8009836:	4601      	mov	r1, r0
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	f000 b84f 	b.w	80098dc <_malloc_r>
 800983e:	bf00      	nop
 8009840:	20000198 	.word	0x20000198

08009844 <_free_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	4605      	mov	r5, r0
 8009848:	2900      	cmp	r1, #0
 800984a:	d043      	beq.n	80098d4 <_free_r+0x90>
 800984c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009850:	1f0c      	subs	r4, r1, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	bfb8      	it	lt
 8009856:	18e4      	addlt	r4, r4, r3
 8009858:	f000 fdcc 	bl	800a3f4 <__malloc_lock>
 800985c:	4a1e      	ldr	r2, [pc, #120]	; (80098d8 <_free_r+0x94>)
 800985e:	6813      	ldr	r3, [r2, #0]
 8009860:	4610      	mov	r0, r2
 8009862:	b933      	cbnz	r3, 8009872 <_free_r+0x2e>
 8009864:	6063      	str	r3, [r4, #4]
 8009866:	6014      	str	r4, [r2, #0]
 8009868:	4628      	mov	r0, r5
 800986a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800986e:	f000 bdc7 	b.w	800a400 <__malloc_unlock>
 8009872:	42a3      	cmp	r3, r4
 8009874:	d90a      	bls.n	800988c <_free_r+0x48>
 8009876:	6821      	ldr	r1, [r4, #0]
 8009878:	1862      	adds	r2, r4, r1
 800987a:	4293      	cmp	r3, r2
 800987c:	bf01      	itttt	eq
 800987e:	681a      	ldreq	r2, [r3, #0]
 8009880:	685b      	ldreq	r3, [r3, #4]
 8009882:	1852      	addeq	r2, r2, r1
 8009884:	6022      	streq	r2, [r4, #0]
 8009886:	6063      	str	r3, [r4, #4]
 8009888:	6004      	str	r4, [r0, #0]
 800988a:	e7ed      	b.n	8009868 <_free_r+0x24>
 800988c:	461a      	mov	r2, r3
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	b10b      	cbz	r3, 8009896 <_free_r+0x52>
 8009892:	42a3      	cmp	r3, r4
 8009894:	d9fa      	bls.n	800988c <_free_r+0x48>
 8009896:	6811      	ldr	r1, [r2, #0]
 8009898:	1850      	adds	r0, r2, r1
 800989a:	42a0      	cmp	r0, r4
 800989c:	d10b      	bne.n	80098b6 <_free_r+0x72>
 800989e:	6820      	ldr	r0, [r4, #0]
 80098a0:	4401      	add	r1, r0
 80098a2:	1850      	adds	r0, r2, r1
 80098a4:	4283      	cmp	r3, r0
 80098a6:	6011      	str	r1, [r2, #0]
 80098a8:	d1de      	bne.n	8009868 <_free_r+0x24>
 80098aa:	6818      	ldr	r0, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	4401      	add	r1, r0
 80098b0:	6011      	str	r1, [r2, #0]
 80098b2:	6053      	str	r3, [r2, #4]
 80098b4:	e7d8      	b.n	8009868 <_free_r+0x24>
 80098b6:	d902      	bls.n	80098be <_free_r+0x7a>
 80098b8:	230c      	movs	r3, #12
 80098ba:	602b      	str	r3, [r5, #0]
 80098bc:	e7d4      	b.n	8009868 <_free_r+0x24>
 80098be:	6820      	ldr	r0, [r4, #0]
 80098c0:	1821      	adds	r1, r4, r0
 80098c2:	428b      	cmp	r3, r1
 80098c4:	bf01      	itttt	eq
 80098c6:	6819      	ldreq	r1, [r3, #0]
 80098c8:	685b      	ldreq	r3, [r3, #4]
 80098ca:	1809      	addeq	r1, r1, r0
 80098cc:	6021      	streq	r1, [r4, #0]
 80098ce:	6063      	str	r3, [r4, #4]
 80098d0:	6054      	str	r4, [r2, #4]
 80098d2:	e7c9      	b.n	8009868 <_free_r+0x24>
 80098d4:	bd38      	pop	{r3, r4, r5, pc}
 80098d6:	bf00      	nop
 80098d8:	20000530 	.word	0x20000530

080098dc <_malloc_r>:
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	1ccd      	adds	r5, r1, #3
 80098e0:	f025 0503 	bic.w	r5, r5, #3
 80098e4:	3508      	adds	r5, #8
 80098e6:	2d0c      	cmp	r5, #12
 80098e8:	bf38      	it	cc
 80098ea:	250c      	movcc	r5, #12
 80098ec:	2d00      	cmp	r5, #0
 80098ee:	4606      	mov	r6, r0
 80098f0:	db01      	blt.n	80098f6 <_malloc_r+0x1a>
 80098f2:	42a9      	cmp	r1, r5
 80098f4:	d903      	bls.n	80098fe <_malloc_r+0x22>
 80098f6:	230c      	movs	r3, #12
 80098f8:	6033      	str	r3, [r6, #0]
 80098fa:	2000      	movs	r0, #0
 80098fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098fe:	f000 fd79 	bl	800a3f4 <__malloc_lock>
 8009902:	4921      	ldr	r1, [pc, #132]	; (8009988 <_malloc_r+0xac>)
 8009904:	680a      	ldr	r2, [r1, #0]
 8009906:	4614      	mov	r4, r2
 8009908:	b99c      	cbnz	r4, 8009932 <_malloc_r+0x56>
 800990a:	4f20      	ldr	r7, [pc, #128]	; (800998c <_malloc_r+0xb0>)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	b923      	cbnz	r3, 800991a <_malloc_r+0x3e>
 8009910:	4621      	mov	r1, r4
 8009912:	4630      	mov	r0, r6
 8009914:	f000 fc86 	bl	800a224 <_sbrk_r>
 8009918:	6038      	str	r0, [r7, #0]
 800991a:	4629      	mov	r1, r5
 800991c:	4630      	mov	r0, r6
 800991e:	f000 fc81 	bl	800a224 <_sbrk_r>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d123      	bne.n	800996e <_malloc_r+0x92>
 8009926:	230c      	movs	r3, #12
 8009928:	4630      	mov	r0, r6
 800992a:	6033      	str	r3, [r6, #0]
 800992c:	f000 fd68 	bl	800a400 <__malloc_unlock>
 8009930:	e7e3      	b.n	80098fa <_malloc_r+0x1e>
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	1b5b      	subs	r3, r3, r5
 8009936:	d417      	bmi.n	8009968 <_malloc_r+0x8c>
 8009938:	2b0b      	cmp	r3, #11
 800993a:	d903      	bls.n	8009944 <_malloc_r+0x68>
 800993c:	6023      	str	r3, [r4, #0]
 800993e:	441c      	add	r4, r3
 8009940:	6025      	str	r5, [r4, #0]
 8009942:	e004      	b.n	800994e <_malloc_r+0x72>
 8009944:	6863      	ldr	r3, [r4, #4]
 8009946:	42a2      	cmp	r2, r4
 8009948:	bf0c      	ite	eq
 800994a:	600b      	streq	r3, [r1, #0]
 800994c:	6053      	strne	r3, [r2, #4]
 800994e:	4630      	mov	r0, r6
 8009950:	f000 fd56 	bl	800a400 <__malloc_unlock>
 8009954:	f104 000b 	add.w	r0, r4, #11
 8009958:	1d23      	adds	r3, r4, #4
 800995a:	f020 0007 	bic.w	r0, r0, #7
 800995e:	1ac2      	subs	r2, r0, r3
 8009960:	d0cc      	beq.n	80098fc <_malloc_r+0x20>
 8009962:	1a1b      	subs	r3, r3, r0
 8009964:	50a3      	str	r3, [r4, r2]
 8009966:	e7c9      	b.n	80098fc <_malloc_r+0x20>
 8009968:	4622      	mov	r2, r4
 800996a:	6864      	ldr	r4, [r4, #4]
 800996c:	e7cc      	b.n	8009908 <_malloc_r+0x2c>
 800996e:	1cc4      	adds	r4, r0, #3
 8009970:	f024 0403 	bic.w	r4, r4, #3
 8009974:	42a0      	cmp	r0, r4
 8009976:	d0e3      	beq.n	8009940 <_malloc_r+0x64>
 8009978:	1a21      	subs	r1, r4, r0
 800997a:	4630      	mov	r0, r6
 800997c:	f000 fc52 	bl	800a224 <_sbrk_r>
 8009980:	3001      	adds	r0, #1
 8009982:	d1dd      	bne.n	8009940 <_malloc_r+0x64>
 8009984:	e7cf      	b.n	8009926 <_malloc_r+0x4a>
 8009986:	bf00      	nop
 8009988:	20000530 	.word	0x20000530
 800998c:	20000534 	.word	0x20000534

08009990 <__ssputs_r>:
 8009990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009994:	688e      	ldr	r6, [r1, #8]
 8009996:	4682      	mov	sl, r0
 8009998:	429e      	cmp	r6, r3
 800999a:	460c      	mov	r4, r1
 800999c:	4690      	mov	r8, r2
 800999e:	461f      	mov	r7, r3
 80099a0:	d838      	bhi.n	8009a14 <__ssputs_r+0x84>
 80099a2:	898a      	ldrh	r2, [r1, #12]
 80099a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099a8:	d032      	beq.n	8009a10 <__ssputs_r+0x80>
 80099aa:	6825      	ldr	r5, [r4, #0]
 80099ac:	6909      	ldr	r1, [r1, #16]
 80099ae:	3301      	adds	r3, #1
 80099b0:	eba5 0901 	sub.w	r9, r5, r1
 80099b4:	6965      	ldr	r5, [r4, #20]
 80099b6:	444b      	add	r3, r9
 80099b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099c0:	106d      	asrs	r5, r5, #1
 80099c2:	429d      	cmp	r5, r3
 80099c4:	bf38      	it	cc
 80099c6:	461d      	movcc	r5, r3
 80099c8:	0553      	lsls	r3, r2, #21
 80099ca:	d531      	bpl.n	8009a30 <__ssputs_r+0xa0>
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7ff ff85 	bl	80098dc <_malloc_r>
 80099d2:	4606      	mov	r6, r0
 80099d4:	b950      	cbnz	r0, 80099ec <__ssputs_r+0x5c>
 80099d6:	230c      	movs	r3, #12
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	f8ca 3000 	str.w	r3, [sl]
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e6:	81a3      	strh	r3, [r4, #12]
 80099e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ec:	464a      	mov	r2, r9
 80099ee:	6921      	ldr	r1, [r4, #16]
 80099f0:	f000 fcd8 	bl	800a3a4 <memcpy>
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	6126      	str	r6, [r4, #16]
 8009a02:	444e      	add	r6, r9
 8009a04:	6026      	str	r6, [r4, #0]
 8009a06:	463e      	mov	r6, r7
 8009a08:	6165      	str	r5, [r4, #20]
 8009a0a:	eba5 0509 	sub.w	r5, r5, r9
 8009a0e:	60a5      	str	r5, [r4, #8]
 8009a10:	42be      	cmp	r6, r7
 8009a12:	d900      	bls.n	8009a16 <__ssputs_r+0x86>
 8009a14:	463e      	mov	r6, r7
 8009a16:	4632      	mov	r2, r6
 8009a18:	4641      	mov	r1, r8
 8009a1a:	6820      	ldr	r0, [r4, #0]
 8009a1c:	f000 fcd0 	bl	800a3c0 <memmove>
 8009a20:	68a3      	ldr	r3, [r4, #8]
 8009a22:	6822      	ldr	r2, [r4, #0]
 8009a24:	1b9b      	subs	r3, r3, r6
 8009a26:	4432      	add	r2, r6
 8009a28:	2000      	movs	r0, #0
 8009a2a:	60a3      	str	r3, [r4, #8]
 8009a2c:	6022      	str	r2, [r4, #0]
 8009a2e:	e7db      	b.n	80099e8 <__ssputs_r+0x58>
 8009a30:	462a      	mov	r2, r5
 8009a32:	f000 fceb 	bl	800a40c <_realloc_r>
 8009a36:	4606      	mov	r6, r0
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d1e1      	bne.n	8009a00 <__ssputs_r+0x70>
 8009a3c:	4650      	mov	r0, sl
 8009a3e:	6921      	ldr	r1, [r4, #16]
 8009a40:	f7ff ff00 	bl	8009844 <_free_r>
 8009a44:	e7c7      	b.n	80099d6 <__ssputs_r+0x46>
	...

08009a48 <_svfiprintf_r>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	4698      	mov	r8, r3
 8009a4e:	898b      	ldrh	r3, [r1, #12]
 8009a50:	4607      	mov	r7, r0
 8009a52:	061b      	lsls	r3, r3, #24
 8009a54:	460d      	mov	r5, r1
 8009a56:	4614      	mov	r4, r2
 8009a58:	b09d      	sub	sp, #116	; 0x74
 8009a5a:	d50e      	bpl.n	8009a7a <_svfiprintf_r+0x32>
 8009a5c:	690b      	ldr	r3, [r1, #16]
 8009a5e:	b963      	cbnz	r3, 8009a7a <_svfiprintf_r+0x32>
 8009a60:	2140      	movs	r1, #64	; 0x40
 8009a62:	f7ff ff3b 	bl	80098dc <_malloc_r>
 8009a66:	6028      	str	r0, [r5, #0]
 8009a68:	6128      	str	r0, [r5, #16]
 8009a6a:	b920      	cbnz	r0, 8009a76 <_svfiprintf_r+0x2e>
 8009a6c:	230c      	movs	r3, #12
 8009a6e:	603b      	str	r3, [r7, #0]
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295
 8009a74:	e0d1      	b.n	8009c1a <_svfiprintf_r+0x1d2>
 8009a76:	2340      	movs	r3, #64	; 0x40
 8009a78:	616b      	str	r3, [r5, #20]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7e:	2320      	movs	r3, #32
 8009a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a84:	2330      	movs	r3, #48	; 0x30
 8009a86:	f04f 0901 	mov.w	r9, #1
 8009a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c34 <_svfiprintf_r+0x1ec>
 8009a92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a96:	4623      	mov	r3, r4
 8009a98:	469a      	mov	sl, r3
 8009a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a9e:	b10a      	cbz	r2, 8009aa4 <_svfiprintf_r+0x5c>
 8009aa0:	2a25      	cmp	r2, #37	; 0x25
 8009aa2:	d1f9      	bne.n	8009a98 <_svfiprintf_r+0x50>
 8009aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa8:	d00b      	beq.n	8009ac2 <_svfiprintf_r+0x7a>
 8009aaa:	465b      	mov	r3, fp
 8009aac:	4622      	mov	r2, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	f7ff ff6d 	bl	8009990 <__ssputs_r>
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f000 80aa 	beq.w	8009c10 <_svfiprintf_r+0x1c8>
 8009abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009abe:	445a      	add	r2, fp
 8009ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 80a2 	beq.w	8009c10 <_svfiprintf_r+0x1c8>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad6:	f10a 0a01 	add.w	sl, sl, #1
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	9307      	str	r3, [sp, #28]
 8009ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ae4:	4654      	mov	r4, sl
 8009ae6:	2205      	movs	r2, #5
 8009ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aec:	4851      	ldr	r0, [pc, #324]	; (8009c34 <_svfiprintf_r+0x1ec>)
 8009aee:	f000 fc4b 	bl	800a388 <memchr>
 8009af2:	9a04      	ldr	r2, [sp, #16]
 8009af4:	b9d8      	cbnz	r0, 8009b2e <_svfiprintf_r+0xe6>
 8009af6:	06d0      	lsls	r0, r2, #27
 8009af8:	bf44      	itt	mi
 8009afa:	2320      	movmi	r3, #32
 8009afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b00:	0711      	lsls	r1, r2, #28
 8009b02:	bf44      	itt	mi
 8009b04:	232b      	movmi	r3, #43	; 0x2b
 8009b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b10:	d015      	beq.n	8009b3e <_svfiprintf_r+0xf6>
 8009b12:	4654      	mov	r4, sl
 8009b14:	2000      	movs	r0, #0
 8009b16:	f04f 0c0a 	mov.w	ip, #10
 8009b1a:	9a07      	ldr	r2, [sp, #28]
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b22:	3b30      	subs	r3, #48	; 0x30
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d94e      	bls.n	8009bc6 <_svfiprintf_r+0x17e>
 8009b28:	b1b0      	cbz	r0, 8009b58 <_svfiprintf_r+0x110>
 8009b2a:	9207      	str	r2, [sp, #28]
 8009b2c:	e014      	b.n	8009b58 <_svfiprintf_r+0x110>
 8009b2e:	eba0 0308 	sub.w	r3, r0, r8
 8009b32:	fa09 f303 	lsl.w	r3, r9, r3
 8009b36:	4313      	orrs	r3, r2
 8009b38:	46a2      	mov	sl, r4
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	e7d2      	b.n	8009ae4 <_svfiprintf_r+0x9c>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	1d19      	adds	r1, r3, #4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	9103      	str	r1, [sp, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfbb      	ittet	lt
 8009b4a:	425b      	neglt	r3, r3
 8009b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b50:	9307      	strge	r3, [sp, #28]
 8009b52:	9307      	strlt	r3, [sp, #28]
 8009b54:	bfb8      	it	lt
 8009b56:	9204      	strlt	r2, [sp, #16]
 8009b58:	7823      	ldrb	r3, [r4, #0]
 8009b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b5c:	d10c      	bne.n	8009b78 <_svfiprintf_r+0x130>
 8009b5e:	7863      	ldrb	r3, [r4, #1]
 8009b60:	2b2a      	cmp	r3, #42	; 0x2a
 8009b62:	d135      	bne.n	8009bd0 <_svfiprintf_r+0x188>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	3402      	adds	r4, #2
 8009b68:	1d1a      	adds	r2, r3, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	9203      	str	r2, [sp, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	bfb8      	it	lt
 8009b72:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b76:	9305      	str	r3, [sp, #20]
 8009b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c44 <_svfiprintf_r+0x1fc>
 8009b7c:	2203      	movs	r2, #3
 8009b7e:	4650      	mov	r0, sl
 8009b80:	7821      	ldrb	r1, [r4, #0]
 8009b82:	f000 fc01 	bl	800a388 <memchr>
 8009b86:	b140      	cbz	r0, 8009b9a <_svfiprintf_r+0x152>
 8009b88:	2340      	movs	r3, #64	; 0x40
 8009b8a:	eba0 000a 	sub.w	r0, r0, sl
 8009b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009b92:	9b04      	ldr	r3, [sp, #16]
 8009b94:	3401      	adds	r4, #1
 8009b96:	4303      	orrs	r3, r0
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9e:	2206      	movs	r2, #6
 8009ba0:	4825      	ldr	r0, [pc, #148]	; (8009c38 <_svfiprintf_r+0x1f0>)
 8009ba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ba6:	f000 fbef 	bl	800a388 <memchr>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d038      	beq.n	8009c20 <_svfiprintf_r+0x1d8>
 8009bae:	4b23      	ldr	r3, [pc, #140]	; (8009c3c <_svfiprintf_r+0x1f4>)
 8009bb0:	bb1b      	cbnz	r3, 8009bfa <_svfiprintf_r+0x1b2>
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	3307      	adds	r3, #7
 8009bb6:	f023 0307 	bic.w	r3, r3, #7
 8009bba:	3308      	adds	r3, #8
 8009bbc:	9303      	str	r3, [sp, #12]
 8009bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc0:	4433      	add	r3, r6
 8009bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc4:	e767      	b.n	8009a96 <_svfiprintf_r+0x4e>
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	2001      	movs	r0, #1
 8009bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bce:	e7a5      	b.n	8009b1c <_svfiprintf_r+0xd4>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f04f 0c0a 	mov.w	ip, #10
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	3401      	adds	r4, #1
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be2:	3a30      	subs	r2, #48	; 0x30
 8009be4:	2a09      	cmp	r2, #9
 8009be6:	d903      	bls.n	8009bf0 <_svfiprintf_r+0x1a8>
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d0c5      	beq.n	8009b78 <_svfiprintf_r+0x130>
 8009bec:	9105      	str	r1, [sp, #20]
 8009bee:	e7c3      	b.n	8009b78 <_svfiprintf_r+0x130>
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf8:	e7f0      	b.n	8009bdc <_svfiprintf_r+0x194>
 8009bfa:	ab03      	add	r3, sp, #12
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	462a      	mov	r2, r5
 8009c00:	4638      	mov	r0, r7
 8009c02:	4b0f      	ldr	r3, [pc, #60]	; (8009c40 <_svfiprintf_r+0x1f8>)
 8009c04:	a904      	add	r1, sp, #16
 8009c06:	f3af 8000 	nop.w
 8009c0a:	1c42      	adds	r2, r0, #1
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	d1d6      	bne.n	8009bbe <_svfiprintf_r+0x176>
 8009c10:	89ab      	ldrh	r3, [r5, #12]
 8009c12:	065b      	lsls	r3, r3, #25
 8009c14:	f53f af2c 	bmi.w	8009a70 <_svfiprintf_r+0x28>
 8009c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c1a:	b01d      	add	sp, #116	; 0x74
 8009c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c20:	ab03      	add	r3, sp, #12
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	462a      	mov	r2, r5
 8009c26:	4638      	mov	r0, r7
 8009c28:	4b05      	ldr	r3, [pc, #20]	; (8009c40 <_svfiprintf_r+0x1f8>)
 8009c2a:	a904      	add	r1, sp, #16
 8009c2c:	f000 f9d4 	bl	8009fd8 <_printf_i>
 8009c30:	e7eb      	b.n	8009c0a <_svfiprintf_r+0x1c2>
 8009c32:	bf00      	nop
 8009c34:	0800a994 	.word	0x0800a994
 8009c38:	0800a99e 	.word	0x0800a99e
 8009c3c:	00000000 	.word	0x00000000
 8009c40:	08009991 	.word	0x08009991
 8009c44:	0800a99a 	.word	0x0800a99a

08009c48 <__sfputc_r>:
 8009c48:	6893      	ldr	r3, [r2, #8]
 8009c4a:	b410      	push	{r4}
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	6093      	str	r3, [r2, #8]
 8009c52:	da07      	bge.n	8009c64 <__sfputc_r+0x1c>
 8009c54:	6994      	ldr	r4, [r2, #24]
 8009c56:	42a3      	cmp	r3, r4
 8009c58:	db01      	blt.n	8009c5e <__sfputc_r+0x16>
 8009c5a:	290a      	cmp	r1, #10
 8009c5c:	d102      	bne.n	8009c64 <__sfputc_r+0x1c>
 8009c5e:	bc10      	pop	{r4}
 8009c60:	f7ff bada 	b.w	8009218 <__swbuf_r>
 8009c64:	6813      	ldr	r3, [r2, #0]
 8009c66:	1c58      	adds	r0, r3, #1
 8009c68:	6010      	str	r0, [r2, #0]
 8009c6a:	7019      	strb	r1, [r3, #0]
 8009c6c:	4608      	mov	r0, r1
 8009c6e:	bc10      	pop	{r4}
 8009c70:	4770      	bx	lr

08009c72 <__sfputs_r>:
 8009c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c74:	4606      	mov	r6, r0
 8009c76:	460f      	mov	r7, r1
 8009c78:	4614      	mov	r4, r2
 8009c7a:	18d5      	adds	r5, r2, r3
 8009c7c:	42ac      	cmp	r4, r5
 8009c7e:	d101      	bne.n	8009c84 <__sfputs_r+0x12>
 8009c80:	2000      	movs	r0, #0
 8009c82:	e007      	b.n	8009c94 <__sfputs_r+0x22>
 8009c84:	463a      	mov	r2, r7
 8009c86:	4630      	mov	r0, r6
 8009c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c8c:	f7ff ffdc 	bl	8009c48 <__sfputc_r>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	d1f3      	bne.n	8009c7c <__sfputs_r+0xa>
 8009c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c98 <_vfiprintf_r>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	460d      	mov	r5, r1
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	4698      	mov	r8, r3
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	b09d      	sub	sp, #116	; 0x74
 8009ca6:	b118      	cbz	r0, 8009cb0 <_vfiprintf_r+0x18>
 8009ca8:	6983      	ldr	r3, [r0, #24]
 8009caa:	b90b      	cbnz	r3, 8009cb0 <_vfiprintf_r+0x18>
 8009cac:	f7ff fcac 	bl	8009608 <__sinit>
 8009cb0:	4b89      	ldr	r3, [pc, #548]	; (8009ed8 <_vfiprintf_r+0x240>)
 8009cb2:	429d      	cmp	r5, r3
 8009cb4:	d11b      	bne.n	8009cee <_vfiprintf_r+0x56>
 8009cb6:	6875      	ldr	r5, [r6, #4]
 8009cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cba:	07d9      	lsls	r1, r3, #31
 8009cbc:	d405      	bmi.n	8009cca <_vfiprintf_r+0x32>
 8009cbe:	89ab      	ldrh	r3, [r5, #12]
 8009cc0:	059a      	lsls	r2, r3, #22
 8009cc2:	d402      	bmi.n	8009cca <_vfiprintf_r+0x32>
 8009cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cc6:	f7ff fd4f 	bl	8009768 <__retarget_lock_acquire_recursive>
 8009cca:	89ab      	ldrh	r3, [r5, #12]
 8009ccc:	071b      	lsls	r3, r3, #28
 8009cce:	d501      	bpl.n	8009cd4 <_vfiprintf_r+0x3c>
 8009cd0:	692b      	ldr	r3, [r5, #16]
 8009cd2:	b9eb      	cbnz	r3, 8009d10 <_vfiprintf_r+0x78>
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f7ff faf0 	bl	80092bc <__swsetup_r>
 8009cdc:	b1c0      	cbz	r0, 8009d10 <_vfiprintf_r+0x78>
 8009cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ce0:	07dc      	lsls	r4, r3, #31
 8009ce2:	d50e      	bpl.n	8009d02 <_vfiprintf_r+0x6a>
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce8:	b01d      	add	sp, #116	; 0x74
 8009cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cee:	4b7b      	ldr	r3, [pc, #492]	; (8009edc <_vfiprintf_r+0x244>)
 8009cf0:	429d      	cmp	r5, r3
 8009cf2:	d101      	bne.n	8009cf8 <_vfiprintf_r+0x60>
 8009cf4:	68b5      	ldr	r5, [r6, #8]
 8009cf6:	e7df      	b.n	8009cb8 <_vfiprintf_r+0x20>
 8009cf8:	4b79      	ldr	r3, [pc, #484]	; (8009ee0 <_vfiprintf_r+0x248>)
 8009cfa:	429d      	cmp	r5, r3
 8009cfc:	bf08      	it	eq
 8009cfe:	68f5      	ldreq	r5, [r6, #12]
 8009d00:	e7da      	b.n	8009cb8 <_vfiprintf_r+0x20>
 8009d02:	89ab      	ldrh	r3, [r5, #12]
 8009d04:	0598      	lsls	r0, r3, #22
 8009d06:	d4ed      	bmi.n	8009ce4 <_vfiprintf_r+0x4c>
 8009d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d0a:	f7ff fd2e 	bl	800976a <__retarget_lock_release_recursive>
 8009d0e:	e7e9      	b.n	8009ce4 <_vfiprintf_r+0x4c>
 8009d10:	2300      	movs	r3, #0
 8009d12:	9309      	str	r3, [sp, #36]	; 0x24
 8009d14:	2320      	movs	r3, #32
 8009d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d1a:	2330      	movs	r3, #48	; 0x30
 8009d1c:	f04f 0901 	mov.w	r9, #1
 8009d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d24:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009ee4 <_vfiprintf_r+0x24c>
 8009d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d2c:	4623      	mov	r3, r4
 8009d2e:	469a      	mov	sl, r3
 8009d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d34:	b10a      	cbz	r2, 8009d3a <_vfiprintf_r+0xa2>
 8009d36:	2a25      	cmp	r2, #37	; 0x25
 8009d38:	d1f9      	bne.n	8009d2e <_vfiprintf_r+0x96>
 8009d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3e:	d00b      	beq.n	8009d58 <_vfiprintf_r+0xc0>
 8009d40:	465b      	mov	r3, fp
 8009d42:	4622      	mov	r2, r4
 8009d44:	4629      	mov	r1, r5
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7ff ff93 	bl	8009c72 <__sfputs_r>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	f000 80aa 	beq.w	8009ea6 <_vfiprintf_r+0x20e>
 8009d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d54:	445a      	add	r2, fp
 8009d56:	9209      	str	r2, [sp, #36]	; 0x24
 8009d58:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 80a2 	beq.w	8009ea6 <_vfiprintf_r+0x20e>
 8009d62:	2300      	movs	r3, #0
 8009d64:	f04f 32ff 	mov.w	r2, #4294967295
 8009d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6c:	f10a 0a01 	add.w	sl, sl, #1
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	9307      	str	r3, [sp, #28]
 8009d74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d78:	931a      	str	r3, [sp, #104]	; 0x68
 8009d7a:	4654      	mov	r4, sl
 8009d7c:	2205      	movs	r2, #5
 8009d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d82:	4858      	ldr	r0, [pc, #352]	; (8009ee4 <_vfiprintf_r+0x24c>)
 8009d84:	f000 fb00 	bl	800a388 <memchr>
 8009d88:	9a04      	ldr	r2, [sp, #16]
 8009d8a:	b9d8      	cbnz	r0, 8009dc4 <_vfiprintf_r+0x12c>
 8009d8c:	06d1      	lsls	r1, r2, #27
 8009d8e:	bf44      	itt	mi
 8009d90:	2320      	movmi	r3, #32
 8009d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d96:	0713      	lsls	r3, r2, #28
 8009d98:	bf44      	itt	mi
 8009d9a:	232b      	movmi	r3, #43	; 0x2b
 8009d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009da0:	f89a 3000 	ldrb.w	r3, [sl]
 8009da4:	2b2a      	cmp	r3, #42	; 0x2a
 8009da6:	d015      	beq.n	8009dd4 <_vfiprintf_r+0x13c>
 8009da8:	4654      	mov	r4, sl
 8009daa:	2000      	movs	r0, #0
 8009dac:	f04f 0c0a 	mov.w	ip, #10
 8009db0:	9a07      	ldr	r2, [sp, #28]
 8009db2:	4621      	mov	r1, r4
 8009db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db8:	3b30      	subs	r3, #48	; 0x30
 8009dba:	2b09      	cmp	r3, #9
 8009dbc:	d94e      	bls.n	8009e5c <_vfiprintf_r+0x1c4>
 8009dbe:	b1b0      	cbz	r0, 8009dee <_vfiprintf_r+0x156>
 8009dc0:	9207      	str	r2, [sp, #28]
 8009dc2:	e014      	b.n	8009dee <_vfiprintf_r+0x156>
 8009dc4:	eba0 0308 	sub.w	r3, r0, r8
 8009dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	46a2      	mov	sl, r4
 8009dd0:	9304      	str	r3, [sp, #16]
 8009dd2:	e7d2      	b.n	8009d7a <_vfiprintf_r+0xe2>
 8009dd4:	9b03      	ldr	r3, [sp, #12]
 8009dd6:	1d19      	adds	r1, r3, #4
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	9103      	str	r1, [sp, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	bfbb      	ittet	lt
 8009de0:	425b      	neglt	r3, r3
 8009de2:	f042 0202 	orrlt.w	r2, r2, #2
 8009de6:	9307      	strge	r3, [sp, #28]
 8009de8:	9307      	strlt	r3, [sp, #28]
 8009dea:	bfb8      	it	lt
 8009dec:	9204      	strlt	r2, [sp, #16]
 8009dee:	7823      	ldrb	r3, [r4, #0]
 8009df0:	2b2e      	cmp	r3, #46	; 0x2e
 8009df2:	d10c      	bne.n	8009e0e <_vfiprintf_r+0x176>
 8009df4:	7863      	ldrb	r3, [r4, #1]
 8009df6:	2b2a      	cmp	r3, #42	; 0x2a
 8009df8:	d135      	bne.n	8009e66 <_vfiprintf_r+0x1ce>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	3402      	adds	r4, #2
 8009dfe:	1d1a      	adds	r2, r3, #4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	9203      	str	r2, [sp, #12]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	bfb8      	it	lt
 8009e08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ef4 <_vfiprintf_r+0x25c>
 8009e12:	2203      	movs	r2, #3
 8009e14:	4650      	mov	r0, sl
 8009e16:	7821      	ldrb	r1, [r4, #0]
 8009e18:	f000 fab6 	bl	800a388 <memchr>
 8009e1c:	b140      	cbz	r0, 8009e30 <_vfiprintf_r+0x198>
 8009e1e:	2340      	movs	r3, #64	; 0x40
 8009e20:	eba0 000a 	sub.w	r0, r0, sl
 8009e24:	fa03 f000 	lsl.w	r0, r3, r0
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	3401      	adds	r4, #1
 8009e2c:	4303      	orrs	r3, r0
 8009e2e:	9304      	str	r3, [sp, #16]
 8009e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e34:	2206      	movs	r2, #6
 8009e36:	482c      	ldr	r0, [pc, #176]	; (8009ee8 <_vfiprintf_r+0x250>)
 8009e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e3c:	f000 faa4 	bl	800a388 <memchr>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d03f      	beq.n	8009ec4 <_vfiprintf_r+0x22c>
 8009e44:	4b29      	ldr	r3, [pc, #164]	; (8009eec <_vfiprintf_r+0x254>)
 8009e46:	bb1b      	cbnz	r3, 8009e90 <_vfiprintf_r+0x1f8>
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	3307      	adds	r3, #7
 8009e4c:	f023 0307 	bic.w	r3, r3, #7
 8009e50:	3308      	adds	r3, #8
 8009e52:	9303      	str	r3, [sp, #12]
 8009e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e56:	443b      	add	r3, r7
 8009e58:	9309      	str	r3, [sp, #36]	; 0x24
 8009e5a:	e767      	b.n	8009d2c <_vfiprintf_r+0x94>
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	2001      	movs	r0, #1
 8009e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e64:	e7a5      	b.n	8009db2 <_vfiprintf_r+0x11a>
 8009e66:	2300      	movs	r3, #0
 8009e68:	f04f 0c0a 	mov.w	ip, #10
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	3401      	adds	r4, #1
 8009e70:	9305      	str	r3, [sp, #20]
 8009e72:	4620      	mov	r0, r4
 8009e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e78:	3a30      	subs	r2, #48	; 0x30
 8009e7a:	2a09      	cmp	r2, #9
 8009e7c:	d903      	bls.n	8009e86 <_vfiprintf_r+0x1ee>
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0c5      	beq.n	8009e0e <_vfiprintf_r+0x176>
 8009e82:	9105      	str	r1, [sp, #20]
 8009e84:	e7c3      	b.n	8009e0e <_vfiprintf_r+0x176>
 8009e86:	4604      	mov	r4, r0
 8009e88:	2301      	movs	r3, #1
 8009e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e8e:	e7f0      	b.n	8009e72 <_vfiprintf_r+0x1da>
 8009e90:	ab03      	add	r3, sp, #12
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	462a      	mov	r2, r5
 8009e96:	4630      	mov	r0, r6
 8009e98:	4b15      	ldr	r3, [pc, #84]	; (8009ef0 <_vfiprintf_r+0x258>)
 8009e9a:	a904      	add	r1, sp, #16
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	1c78      	adds	r0, r7, #1
 8009ea4:	d1d6      	bne.n	8009e54 <_vfiprintf_r+0x1bc>
 8009ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ea8:	07d9      	lsls	r1, r3, #31
 8009eaa:	d405      	bmi.n	8009eb8 <_vfiprintf_r+0x220>
 8009eac:	89ab      	ldrh	r3, [r5, #12]
 8009eae:	059a      	lsls	r2, r3, #22
 8009eb0:	d402      	bmi.n	8009eb8 <_vfiprintf_r+0x220>
 8009eb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eb4:	f7ff fc59 	bl	800976a <__retarget_lock_release_recursive>
 8009eb8:	89ab      	ldrh	r3, [r5, #12]
 8009eba:	065b      	lsls	r3, r3, #25
 8009ebc:	f53f af12 	bmi.w	8009ce4 <_vfiprintf_r+0x4c>
 8009ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ec2:	e711      	b.n	8009ce8 <_vfiprintf_r+0x50>
 8009ec4:	ab03      	add	r3, sp, #12
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	462a      	mov	r2, r5
 8009eca:	4630      	mov	r0, r6
 8009ecc:	4b08      	ldr	r3, [pc, #32]	; (8009ef0 <_vfiprintf_r+0x258>)
 8009ece:	a904      	add	r1, sp, #16
 8009ed0:	f000 f882 	bl	8009fd8 <_printf_i>
 8009ed4:	e7e4      	b.n	8009ea0 <_vfiprintf_r+0x208>
 8009ed6:	bf00      	nop
 8009ed8:	0800a954 	.word	0x0800a954
 8009edc:	0800a974 	.word	0x0800a974
 8009ee0:	0800a934 	.word	0x0800a934
 8009ee4:	0800a994 	.word	0x0800a994
 8009ee8:	0800a99e 	.word	0x0800a99e
 8009eec:	00000000 	.word	0x00000000
 8009ef0:	08009c73 	.word	0x08009c73
 8009ef4:	0800a99a 	.word	0x0800a99a

08009ef8 <_printf_common>:
 8009ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efc:	4616      	mov	r6, r2
 8009efe:	4699      	mov	r9, r3
 8009f00:	688a      	ldr	r2, [r1, #8]
 8009f02:	690b      	ldr	r3, [r1, #16]
 8009f04:	4607      	mov	r7, r0
 8009f06:	4293      	cmp	r3, r2
 8009f08:	bfb8      	it	lt
 8009f0a:	4613      	movlt	r3, r2
 8009f0c:	6033      	str	r3, [r6, #0]
 8009f0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f12:	460c      	mov	r4, r1
 8009f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f18:	b10a      	cbz	r2, 8009f1e <_printf_common+0x26>
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	6033      	str	r3, [r6, #0]
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	0699      	lsls	r1, r3, #26
 8009f22:	bf42      	ittt	mi
 8009f24:	6833      	ldrmi	r3, [r6, #0]
 8009f26:	3302      	addmi	r3, #2
 8009f28:	6033      	strmi	r3, [r6, #0]
 8009f2a:	6825      	ldr	r5, [r4, #0]
 8009f2c:	f015 0506 	ands.w	r5, r5, #6
 8009f30:	d106      	bne.n	8009f40 <_printf_common+0x48>
 8009f32:	f104 0a19 	add.w	sl, r4, #25
 8009f36:	68e3      	ldr	r3, [r4, #12]
 8009f38:	6832      	ldr	r2, [r6, #0]
 8009f3a:	1a9b      	subs	r3, r3, r2
 8009f3c:	42ab      	cmp	r3, r5
 8009f3e:	dc28      	bgt.n	8009f92 <_printf_common+0x9a>
 8009f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f44:	1e13      	subs	r3, r2, #0
 8009f46:	6822      	ldr	r2, [r4, #0]
 8009f48:	bf18      	it	ne
 8009f4a:	2301      	movne	r3, #1
 8009f4c:	0692      	lsls	r2, r2, #26
 8009f4e:	d42d      	bmi.n	8009fac <_printf_common+0xb4>
 8009f50:	4649      	mov	r1, r9
 8009f52:	4638      	mov	r0, r7
 8009f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f58:	47c0      	blx	r8
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d020      	beq.n	8009fa0 <_printf_common+0xa8>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	68e5      	ldr	r5, [r4, #12]
 8009f62:	f003 0306 	and.w	r3, r3, #6
 8009f66:	2b04      	cmp	r3, #4
 8009f68:	bf18      	it	ne
 8009f6a:	2500      	movne	r5, #0
 8009f6c:	6832      	ldr	r2, [r6, #0]
 8009f6e:	f04f 0600 	mov.w	r6, #0
 8009f72:	68a3      	ldr	r3, [r4, #8]
 8009f74:	bf08      	it	eq
 8009f76:	1aad      	subeq	r5, r5, r2
 8009f78:	6922      	ldr	r2, [r4, #16]
 8009f7a:	bf08      	it	eq
 8009f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f80:	4293      	cmp	r3, r2
 8009f82:	bfc4      	itt	gt
 8009f84:	1a9b      	subgt	r3, r3, r2
 8009f86:	18ed      	addgt	r5, r5, r3
 8009f88:	341a      	adds	r4, #26
 8009f8a:	42b5      	cmp	r5, r6
 8009f8c:	d11a      	bne.n	8009fc4 <_printf_common+0xcc>
 8009f8e:	2000      	movs	r0, #0
 8009f90:	e008      	b.n	8009fa4 <_printf_common+0xac>
 8009f92:	2301      	movs	r3, #1
 8009f94:	4652      	mov	r2, sl
 8009f96:	4649      	mov	r1, r9
 8009f98:	4638      	mov	r0, r7
 8009f9a:	47c0      	blx	r8
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d103      	bne.n	8009fa8 <_printf_common+0xb0>
 8009fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa8:	3501      	adds	r5, #1
 8009faa:	e7c4      	b.n	8009f36 <_printf_common+0x3e>
 8009fac:	2030      	movs	r0, #48	; 0x30
 8009fae:	18e1      	adds	r1, r4, r3
 8009fb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fb4:	1c5a      	adds	r2, r3, #1
 8009fb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fba:	4422      	add	r2, r4
 8009fbc:	3302      	adds	r3, #2
 8009fbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fc2:	e7c5      	b.n	8009f50 <_printf_common+0x58>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	4649      	mov	r1, r9
 8009fca:	4638      	mov	r0, r7
 8009fcc:	47c0      	blx	r8
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d0e6      	beq.n	8009fa0 <_printf_common+0xa8>
 8009fd2:	3601      	adds	r6, #1
 8009fd4:	e7d9      	b.n	8009f8a <_printf_common+0x92>
	...

08009fd8 <_printf_i>:
 8009fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fdc:	460c      	mov	r4, r1
 8009fde:	7e27      	ldrb	r7, [r4, #24]
 8009fe0:	4691      	mov	r9, r2
 8009fe2:	2f78      	cmp	r7, #120	; 0x78
 8009fe4:	4680      	mov	r8, r0
 8009fe6:	469a      	mov	sl, r3
 8009fe8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fee:	d807      	bhi.n	800a000 <_printf_i+0x28>
 8009ff0:	2f62      	cmp	r7, #98	; 0x62
 8009ff2:	d80a      	bhi.n	800a00a <_printf_i+0x32>
 8009ff4:	2f00      	cmp	r7, #0
 8009ff6:	f000 80d9 	beq.w	800a1ac <_printf_i+0x1d4>
 8009ffa:	2f58      	cmp	r7, #88	; 0x58
 8009ffc:	f000 80a4 	beq.w	800a148 <_printf_i+0x170>
 800a000:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a008:	e03a      	b.n	800a080 <_printf_i+0xa8>
 800a00a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a00e:	2b15      	cmp	r3, #21
 800a010:	d8f6      	bhi.n	800a000 <_printf_i+0x28>
 800a012:	a001      	add	r0, pc, #4	; (adr r0, 800a018 <_printf_i+0x40>)
 800a014:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a018:	0800a071 	.word	0x0800a071
 800a01c:	0800a085 	.word	0x0800a085
 800a020:	0800a001 	.word	0x0800a001
 800a024:	0800a001 	.word	0x0800a001
 800a028:	0800a001 	.word	0x0800a001
 800a02c:	0800a001 	.word	0x0800a001
 800a030:	0800a085 	.word	0x0800a085
 800a034:	0800a001 	.word	0x0800a001
 800a038:	0800a001 	.word	0x0800a001
 800a03c:	0800a001 	.word	0x0800a001
 800a040:	0800a001 	.word	0x0800a001
 800a044:	0800a193 	.word	0x0800a193
 800a048:	0800a0b5 	.word	0x0800a0b5
 800a04c:	0800a175 	.word	0x0800a175
 800a050:	0800a001 	.word	0x0800a001
 800a054:	0800a001 	.word	0x0800a001
 800a058:	0800a1b5 	.word	0x0800a1b5
 800a05c:	0800a001 	.word	0x0800a001
 800a060:	0800a0b5 	.word	0x0800a0b5
 800a064:	0800a001 	.word	0x0800a001
 800a068:	0800a001 	.word	0x0800a001
 800a06c:	0800a17d 	.word	0x0800a17d
 800a070:	680b      	ldr	r3, [r1, #0]
 800a072:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a076:	1d1a      	adds	r2, r3, #4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	600a      	str	r2, [r1, #0]
 800a07c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a080:	2301      	movs	r3, #1
 800a082:	e0a4      	b.n	800a1ce <_printf_i+0x1f6>
 800a084:	6825      	ldr	r5, [r4, #0]
 800a086:	6808      	ldr	r0, [r1, #0]
 800a088:	062e      	lsls	r6, r5, #24
 800a08a:	f100 0304 	add.w	r3, r0, #4
 800a08e:	d50a      	bpl.n	800a0a6 <_printf_i+0xce>
 800a090:	6805      	ldr	r5, [r0, #0]
 800a092:	600b      	str	r3, [r1, #0]
 800a094:	2d00      	cmp	r5, #0
 800a096:	da03      	bge.n	800a0a0 <_printf_i+0xc8>
 800a098:	232d      	movs	r3, #45	; 0x2d
 800a09a:	426d      	negs	r5, r5
 800a09c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a0:	230a      	movs	r3, #10
 800a0a2:	485e      	ldr	r0, [pc, #376]	; (800a21c <_printf_i+0x244>)
 800a0a4:	e019      	b.n	800a0da <_printf_i+0x102>
 800a0a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a0aa:	6805      	ldr	r5, [r0, #0]
 800a0ac:	600b      	str	r3, [r1, #0]
 800a0ae:	bf18      	it	ne
 800a0b0:	b22d      	sxthne	r5, r5
 800a0b2:	e7ef      	b.n	800a094 <_printf_i+0xbc>
 800a0b4:	680b      	ldr	r3, [r1, #0]
 800a0b6:	6825      	ldr	r5, [r4, #0]
 800a0b8:	1d18      	adds	r0, r3, #4
 800a0ba:	6008      	str	r0, [r1, #0]
 800a0bc:	0628      	lsls	r0, r5, #24
 800a0be:	d501      	bpl.n	800a0c4 <_printf_i+0xec>
 800a0c0:	681d      	ldr	r5, [r3, #0]
 800a0c2:	e002      	b.n	800a0ca <_printf_i+0xf2>
 800a0c4:	0669      	lsls	r1, r5, #25
 800a0c6:	d5fb      	bpl.n	800a0c0 <_printf_i+0xe8>
 800a0c8:	881d      	ldrh	r5, [r3, #0]
 800a0ca:	2f6f      	cmp	r7, #111	; 0x6f
 800a0cc:	bf0c      	ite	eq
 800a0ce:	2308      	moveq	r3, #8
 800a0d0:	230a      	movne	r3, #10
 800a0d2:	4852      	ldr	r0, [pc, #328]	; (800a21c <_printf_i+0x244>)
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0da:	6866      	ldr	r6, [r4, #4]
 800a0dc:	2e00      	cmp	r6, #0
 800a0de:	bfa8      	it	ge
 800a0e0:	6821      	ldrge	r1, [r4, #0]
 800a0e2:	60a6      	str	r6, [r4, #8]
 800a0e4:	bfa4      	itt	ge
 800a0e6:	f021 0104 	bicge.w	r1, r1, #4
 800a0ea:	6021      	strge	r1, [r4, #0]
 800a0ec:	b90d      	cbnz	r5, 800a0f2 <_printf_i+0x11a>
 800a0ee:	2e00      	cmp	r6, #0
 800a0f0:	d04d      	beq.n	800a18e <_printf_i+0x1b6>
 800a0f2:	4616      	mov	r6, r2
 800a0f4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0f8:	fb03 5711 	mls	r7, r3, r1, r5
 800a0fc:	5dc7      	ldrb	r7, [r0, r7]
 800a0fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a102:	462f      	mov	r7, r5
 800a104:	42bb      	cmp	r3, r7
 800a106:	460d      	mov	r5, r1
 800a108:	d9f4      	bls.n	800a0f4 <_printf_i+0x11c>
 800a10a:	2b08      	cmp	r3, #8
 800a10c:	d10b      	bne.n	800a126 <_printf_i+0x14e>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	07df      	lsls	r7, r3, #31
 800a112:	d508      	bpl.n	800a126 <_printf_i+0x14e>
 800a114:	6923      	ldr	r3, [r4, #16]
 800a116:	6861      	ldr	r1, [r4, #4]
 800a118:	4299      	cmp	r1, r3
 800a11a:	bfde      	ittt	le
 800a11c:	2330      	movle	r3, #48	; 0x30
 800a11e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a122:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a126:	1b92      	subs	r2, r2, r6
 800a128:	6122      	str	r2, [r4, #16]
 800a12a:	464b      	mov	r3, r9
 800a12c:	4621      	mov	r1, r4
 800a12e:	4640      	mov	r0, r8
 800a130:	f8cd a000 	str.w	sl, [sp]
 800a134:	aa03      	add	r2, sp, #12
 800a136:	f7ff fedf 	bl	8009ef8 <_printf_common>
 800a13a:	3001      	adds	r0, #1
 800a13c:	d14c      	bne.n	800a1d8 <_printf_i+0x200>
 800a13e:	f04f 30ff 	mov.w	r0, #4294967295
 800a142:	b004      	add	sp, #16
 800a144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a148:	4834      	ldr	r0, [pc, #208]	; (800a21c <_printf_i+0x244>)
 800a14a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a14e:	680e      	ldr	r6, [r1, #0]
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	f856 5b04 	ldr.w	r5, [r6], #4
 800a156:	061f      	lsls	r7, r3, #24
 800a158:	600e      	str	r6, [r1, #0]
 800a15a:	d514      	bpl.n	800a186 <_printf_i+0x1ae>
 800a15c:	07d9      	lsls	r1, r3, #31
 800a15e:	bf44      	itt	mi
 800a160:	f043 0320 	orrmi.w	r3, r3, #32
 800a164:	6023      	strmi	r3, [r4, #0]
 800a166:	b91d      	cbnz	r5, 800a170 <_printf_i+0x198>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	f023 0320 	bic.w	r3, r3, #32
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	2310      	movs	r3, #16
 800a172:	e7af      	b.n	800a0d4 <_printf_i+0xfc>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	f043 0320 	orr.w	r3, r3, #32
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	2378      	movs	r3, #120	; 0x78
 800a17e:	4828      	ldr	r0, [pc, #160]	; (800a220 <_printf_i+0x248>)
 800a180:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a184:	e7e3      	b.n	800a14e <_printf_i+0x176>
 800a186:	065e      	lsls	r6, r3, #25
 800a188:	bf48      	it	mi
 800a18a:	b2ad      	uxthmi	r5, r5
 800a18c:	e7e6      	b.n	800a15c <_printf_i+0x184>
 800a18e:	4616      	mov	r6, r2
 800a190:	e7bb      	b.n	800a10a <_printf_i+0x132>
 800a192:	680b      	ldr	r3, [r1, #0]
 800a194:	6826      	ldr	r6, [r4, #0]
 800a196:	1d1d      	adds	r5, r3, #4
 800a198:	6960      	ldr	r0, [r4, #20]
 800a19a:	600d      	str	r5, [r1, #0]
 800a19c:	0635      	lsls	r5, r6, #24
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	d501      	bpl.n	800a1a6 <_printf_i+0x1ce>
 800a1a2:	6018      	str	r0, [r3, #0]
 800a1a4:	e002      	b.n	800a1ac <_printf_i+0x1d4>
 800a1a6:	0671      	lsls	r1, r6, #25
 800a1a8:	d5fb      	bpl.n	800a1a2 <_printf_i+0x1ca>
 800a1aa:	8018      	strh	r0, [r3, #0]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4616      	mov	r6, r2
 800a1b0:	6123      	str	r3, [r4, #16]
 800a1b2:	e7ba      	b.n	800a12a <_printf_i+0x152>
 800a1b4:	680b      	ldr	r3, [r1, #0]
 800a1b6:	1d1a      	adds	r2, r3, #4
 800a1b8:	600a      	str	r2, [r1, #0]
 800a1ba:	681e      	ldr	r6, [r3, #0]
 800a1bc:	2100      	movs	r1, #0
 800a1be:	4630      	mov	r0, r6
 800a1c0:	6862      	ldr	r2, [r4, #4]
 800a1c2:	f000 f8e1 	bl	800a388 <memchr>
 800a1c6:	b108      	cbz	r0, 800a1cc <_printf_i+0x1f4>
 800a1c8:	1b80      	subs	r0, r0, r6
 800a1ca:	6060      	str	r0, [r4, #4]
 800a1cc:	6863      	ldr	r3, [r4, #4]
 800a1ce:	6123      	str	r3, [r4, #16]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d6:	e7a8      	b.n	800a12a <_printf_i+0x152>
 800a1d8:	4632      	mov	r2, r6
 800a1da:	4649      	mov	r1, r9
 800a1dc:	4640      	mov	r0, r8
 800a1de:	6923      	ldr	r3, [r4, #16]
 800a1e0:	47d0      	blx	sl
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	d0ab      	beq.n	800a13e <_printf_i+0x166>
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	079b      	lsls	r3, r3, #30
 800a1ea:	d413      	bmi.n	800a214 <_printf_i+0x23c>
 800a1ec:	68e0      	ldr	r0, [r4, #12]
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	4298      	cmp	r0, r3
 800a1f2:	bfb8      	it	lt
 800a1f4:	4618      	movlt	r0, r3
 800a1f6:	e7a4      	b.n	800a142 <_printf_i+0x16a>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	4632      	mov	r2, r6
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	4640      	mov	r0, r8
 800a200:	47d0      	blx	sl
 800a202:	3001      	adds	r0, #1
 800a204:	d09b      	beq.n	800a13e <_printf_i+0x166>
 800a206:	3501      	adds	r5, #1
 800a208:	68e3      	ldr	r3, [r4, #12]
 800a20a:	9903      	ldr	r1, [sp, #12]
 800a20c:	1a5b      	subs	r3, r3, r1
 800a20e:	42ab      	cmp	r3, r5
 800a210:	dcf2      	bgt.n	800a1f8 <_printf_i+0x220>
 800a212:	e7eb      	b.n	800a1ec <_printf_i+0x214>
 800a214:	2500      	movs	r5, #0
 800a216:	f104 0619 	add.w	r6, r4, #25
 800a21a:	e7f5      	b.n	800a208 <_printf_i+0x230>
 800a21c:	0800a9a5 	.word	0x0800a9a5
 800a220:	0800a9b6 	.word	0x0800a9b6

0800a224 <_sbrk_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	2300      	movs	r3, #0
 800a228:	4d05      	ldr	r5, [pc, #20]	; (800a240 <_sbrk_r+0x1c>)
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	602b      	str	r3, [r5, #0]
 800a230:	f7f7 f834 	bl	800129c <_sbrk>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_sbrk_r+0x1a>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_sbrk_r+0x1a>
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	200015dc 	.word	0x200015dc

0800a244 <__sread>:
 800a244:	b510      	push	{r4, lr}
 800a246:	460c      	mov	r4, r1
 800a248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a24c:	f000 f904 	bl	800a458 <_read_r>
 800a250:	2800      	cmp	r0, #0
 800a252:	bfab      	itete	ge
 800a254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a256:	89a3      	ldrhlt	r3, [r4, #12]
 800a258:	181b      	addge	r3, r3, r0
 800a25a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a25e:	bfac      	ite	ge
 800a260:	6563      	strge	r3, [r4, #84]	; 0x54
 800a262:	81a3      	strhlt	r3, [r4, #12]
 800a264:	bd10      	pop	{r4, pc}

0800a266 <__swrite>:
 800a266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26a:	461f      	mov	r7, r3
 800a26c:	898b      	ldrh	r3, [r1, #12]
 800a26e:	4605      	mov	r5, r0
 800a270:	05db      	lsls	r3, r3, #23
 800a272:	460c      	mov	r4, r1
 800a274:	4616      	mov	r6, r2
 800a276:	d505      	bpl.n	800a284 <__swrite+0x1e>
 800a278:	2302      	movs	r3, #2
 800a27a:	2200      	movs	r2, #0
 800a27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a280:	f000 f870 	bl	800a364 <_lseek_r>
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	4632      	mov	r2, r6
 800a288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a28c:	81a3      	strh	r3, [r4, #12]
 800a28e:	4628      	mov	r0, r5
 800a290:	463b      	mov	r3, r7
 800a292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a29a:	f000 b817 	b.w	800a2cc <_write_r>

0800a29e <__sseek>:
 800a29e:	b510      	push	{r4, lr}
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a6:	f000 f85d 	bl	800a364 <_lseek_r>
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	bf15      	itete	ne
 800a2b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2ba:	81a3      	strheq	r3, [r4, #12]
 800a2bc:	bf18      	it	ne
 800a2be:	81a3      	strhne	r3, [r4, #12]
 800a2c0:	bd10      	pop	{r4, pc}

0800a2c2 <__sclose>:
 800a2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c6:	f000 b81b 	b.w	800a300 <_close_r>
	...

0800a2cc <_write_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4d05      	ldr	r5, [pc, #20]	; (800a2ec <_write_r+0x20>)
 800a2d8:	602a      	str	r2, [r5, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f7f5 ff48 	bl	8000170 <_write>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_write_r+0x1e>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_write_r+0x1e>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	200015dc 	.word	0x200015dc

0800a2f0 <abort>:
 800a2f0:	2006      	movs	r0, #6
 800a2f2:	b508      	push	{r3, lr}
 800a2f4:	f000 f8ea 	bl	800a4cc <raise>
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	f7f6 ff78 	bl	80011ee <_exit>
	...

0800a300 <_close_r>:
 800a300:	b538      	push	{r3, r4, r5, lr}
 800a302:	2300      	movs	r3, #0
 800a304:	4d05      	ldr	r5, [pc, #20]	; (800a31c <_close_r+0x1c>)
 800a306:	4604      	mov	r4, r0
 800a308:	4608      	mov	r0, r1
 800a30a:	602b      	str	r3, [r5, #0]
 800a30c:	f7f6 ff96 	bl	800123c <_close>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <_close_r+0x1a>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	b103      	cbz	r3, 800a31a <_close_r+0x1a>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	200015dc 	.word	0x200015dc

0800a320 <_fstat_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	2300      	movs	r3, #0
 800a324:	4d06      	ldr	r5, [pc, #24]	; (800a340 <_fstat_r+0x20>)
 800a326:	4604      	mov	r4, r0
 800a328:	4608      	mov	r0, r1
 800a32a:	4611      	mov	r1, r2
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	f7f6 ff90 	bl	8001252 <_fstat>
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	d102      	bne.n	800a33c <_fstat_r+0x1c>
 800a336:	682b      	ldr	r3, [r5, #0]
 800a338:	b103      	cbz	r3, 800a33c <_fstat_r+0x1c>
 800a33a:	6023      	str	r3, [r4, #0]
 800a33c:	bd38      	pop	{r3, r4, r5, pc}
 800a33e:	bf00      	nop
 800a340:	200015dc 	.word	0x200015dc

0800a344 <_isatty_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	2300      	movs	r3, #0
 800a348:	4d05      	ldr	r5, [pc, #20]	; (800a360 <_isatty_r+0x1c>)
 800a34a:	4604      	mov	r4, r0
 800a34c:	4608      	mov	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7f6 ff8e 	bl	8001270 <_isatty>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_isatty_r+0x1a>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_isatty_r+0x1a>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	200015dc 	.word	0x200015dc

0800a364 <_lseek_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4604      	mov	r4, r0
 800a368:	4608      	mov	r0, r1
 800a36a:	4611      	mov	r1, r2
 800a36c:	2200      	movs	r2, #0
 800a36e:	4d05      	ldr	r5, [pc, #20]	; (800a384 <_lseek_r+0x20>)
 800a370:	602a      	str	r2, [r5, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	f7f6 ff86 	bl	8001284 <_lseek>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_lseek_r+0x1e>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_lseek_r+0x1e>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	200015dc 	.word	0x200015dc

0800a388 <memchr>:
 800a388:	4603      	mov	r3, r0
 800a38a:	b510      	push	{r4, lr}
 800a38c:	b2c9      	uxtb	r1, r1
 800a38e:	4402      	add	r2, r0
 800a390:	4293      	cmp	r3, r2
 800a392:	4618      	mov	r0, r3
 800a394:	d101      	bne.n	800a39a <memchr+0x12>
 800a396:	2000      	movs	r0, #0
 800a398:	e003      	b.n	800a3a2 <memchr+0x1a>
 800a39a:	7804      	ldrb	r4, [r0, #0]
 800a39c:	3301      	adds	r3, #1
 800a39e:	428c      	cmp	r4, r1
 800a3a0:	d1f6      	bne.n	800a390 <memchr+0x8>
 800a3a2:	bd10      	pop	{r4, pc}

0800a3a4 <memcpy>:
 800a3a4:	440a      	add	r2, r1
 800a3a6:	4291      	cmp	r1, r2
 800a3a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3ac:	d100      	bne.n	800a3b0 <memcpy+0xc>
 800a3ae:	4770      	bx	lr
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3b6:	4291      	cmp	r1, r2
 800a3b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3bc:	d1f9      	bne.n	800a3b2 <memcpy+0xe>
 800a3be:	bd10      	pop	{r4, pc}

0800a3c0 <memmove>:
 800a3c0:	4288      	cmp	r0, r1
 800a3c2:	b510      	push	{r4, lr}
 800a3c4:	eb01 0402 	add.w	r4, r1, r2
 800a3c8:	d902      	bls.n	800a3d0 <memmove+0x10>
 800a3ca:	4284      	cmp	r4, r0
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	d807      	bhi.n	800a3e0 <memmove+0x20>
 800a3d0:	1e43      	subs	r3, r0, #1
 800a3d2:	42a1      	cmp	r1, r4
 800a3d4:	d008      	beq.n	800a3e8 <memmove+0x28>
 800a3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3de:	e7f8      	b.n	800a3d2 <memmove+0x12>
 800a3e0:	4601      	mov	r1, r0
 800a3e2:	4402      	add	r2, r0
 800a3e4:	428a      	cmp	r2, r1
 800a3e6:	d100      	bne.n	800a3ea <memmove+0x2a>
 800a3e8:	bd10      	pop	{r4, pc}
 800a3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3f2:	e7f7      	b.n	800a3e4 <memmove+0x24>

0800a3f4 <__malloc_lock>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	; (800a3fc <__malloc_lock+0x8>)
 800a3f6:	f7ff b9b7 	b.w	8009768 <__retarget_lock_acquire_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	200015d4 	.word	0x200015d4

0800a400 <__malloc_unlock>:
 800a400:	4801      	ldr	r0, [pc, #4]	; (800a408 <__malloc_unlock+0x8>)
 800a402:	f7ff b9b2 	b.w	800976a <__retarget_lock_release_recursive>
 800a406:	bf00      	nop
 800a408:	200015d4 	.word	0x200015d4

0800a40c <_realloc_r>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	4607      	mov	r7, r0
 800a410:	4614      	mov	r4, r2
 800a412:	460e      	mov	r6, r1
 800a414:	b921      	cbnz	r1, 800a420 <_realloc_r+0x14>
 800a416:	4611      	mov	r1, r2
 800a418:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a41c:	f7ff ba5e 	b.w	80098dc <_malloc_r>
 800a420:	b922      	cbnz	r2, 800a42c <_realloc_r+0x20>
 800a422:	f7ff fa0f 	bl	8009844 <_free_r>
 800a426:	4625      	mov	r5, r4
 800a428:	4628      	mov	r0, r5
 800a42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a42c:	f000 f86a 	bl	800a504 <_malloc_usable_size_r>
 800a430:	42a0      	cmp	r0, r4
 800a432:	d20f      	bcs.n	800a454 <_realloc_r+0x48>
 800a434:	4621      	mov	r1, r4
 800a436:	4638      	mov	r0, r7
 800a438:	f7ff fa50 	bl	80098dc <_malloc_r>
 800a43c:	4605      	mov	r5, r0
 800a43e:	2800      	cmp	r0, #0
 800a440:	d0f2      	beq.n	800a428 <_realloc_r+0x1c>
 800a442:	4631      	mov	r1, r6
 800a444:	4622      	mov	r2, r4
 800a446:	f7ff ffad 	bl	800a3a4 <memcpy>
 800a44a:	4631      	mov	r1, r6
 800a44c:	4638      	mov	r0, r7
 800a44e:	f7ff f9f9 	bl	8009844 <_free_r>
 800a452:	e7e9      	b.n	800a428 <_realloc_r+0x1c>
 800a454:	4635      	mov	r5, r6
 800a456:	e7e7      	b.n	800a428 <_realloc_r+0x1c>

0800a458 <_read_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	4611      	mov	r1, r2
 800a460:	2200      	movs	r2, #0
 800a462:	4d05      	ldr	r5, [pc, #20]	; (800a478 <_read_r+0x20>)
 800a464:	602a      	str	r2, [r5, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	f7f6 fecb 	bl	8001202 <_read>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_read_r+0x1e>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_read_r+0x1e>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	200015dc 	.word	0x200015dc

0800a47c <_raise_r>:
 800a47c:	291f      	cmp	r1, #31
 800a47e:	b538      	push	{r3, r4, r5, lr}
 800a480:	4604      	mov	r4, r0
 800a482:	460d      	mov	r5, r1
 800a484:	d904      	bls.n	800a490 <_raise_r+0x14>
 800a486:	2316      	movs	r3, #22
 800a488:	6003      	str	r3, [r0, #0]
 800a48a:	f04f 30ff 	mov.w	r0, #4294967295
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a492:	b112      	cbz	r2, 800a49a <_raise_r+0x1e>
 800a494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a498:	b94b      	cbnz	r3, 800a4ae <_raise_r+0x32>
 800a49a:	4620      	mov	r0, r4
 800a49c:	f000 f830 	bl	800a500 <_getpid_r>
 800a4a0:	462a      	mov	r2, r5
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4aa:	f000 b817 	b.w	800a4dc <_kill_r>
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d00a      	beq.n	800a4c8 <_raise_r+0x4c>
 800a4b2:	1c59      	adds	r1, r3, #1
 800a4b4:	d103      	bne.n	800a4be <_raise_r+0x42>
 800a4b6:	2316      	movs	r3, #22
 800a4b8:	6003      	str	r3, [r0, #0]
 800a4ba:	2001      	movs	r0, #1
 800a4bc:	e7e7      	b.n	800a48e <_raise_r+0x12>
 800a4be:	2400      	movs	r4, #0
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4c6:	4798      	blx	r3
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	e7e0      	b.n	800a48e <_raise_r+0x12>

0800a4cc <raise>:
 800a4cc:	4b02      	ldr	r3, [pc, #8]	; (800a4d8 <raise+0xc>)
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f7ff bfd3 	b.w	800a47c <_raise_r>
 800a4d6:	bf00      	nop
 800a4d8:	20000198 	.word	0x20000198

0800a4dc <_kill_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	2300      	movs	r3, #0
 800a4e0:	4d06      	ldr	r5, [pc, #24]	; (800a4fc <_kill_r+0x20>)
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	4608      	mov	r0, r1
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	602b      	str	r3, [r5, #0]
 800a4ea:	f7f6 fe70 	bl	80011ce <_kill>
 800a4ee:	1c43      	adds	r3, r0, #1
 800a4f0:	d102      	bne.n	800a4f8 <_kill_r+0x1c>
 800a4f2:	682b      	ldr	r3, [r5, #0]
 800a4f4:	b103      	cbz	r3, 800a4f8 <_kill_r+0x1c>
 800a4f6:	6023      	str	r3, [r4, #0]
 800a4f8:	bd38      	pop	{r3, r4, r5, pc}
 800a4fa:	bf00      	nop
 800a4fc:	200015dc 	.word	0x200015dc

0800a500 <_getpid_r>:
 800a500:	f7f6 be5e 	b.w	80011c0 <_getpid>

0800a504 <_malloc_usable_size_r>:
 800a504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a508:	1f18      	subs	r0, r3, #4
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bfbc      	itt	lt
 800a50e:	580b      	ldrlt	r3, [r1, r0]
 800a510:	18c0      	addlt	r0, r0, r3
 800a512:	4770      	bx	lr

0800a514 <_init>:
 800a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a516:	bf00      	nop
 800a518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a51a:	bc08      	pop	{r3}
 800a51c:	469e      	mov	lr, r3
 800a51e:	4770      	bx	lr

0800a520 <_fini>:
 800a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a522:	bf00      	nop
 800a524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a526:	bc08      	pop	{r3}
 800a528:	469e      	mov	lr, r3
 800a52a:	4770      	bx	lr
