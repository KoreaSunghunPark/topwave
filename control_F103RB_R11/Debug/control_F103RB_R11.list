
control_F103RB_R11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8a8  0800a8a8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8a8  0800a8a8  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8a8  0800a8a8  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8ac  0800a8ac  0001a8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a8b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e4  200001fc  0800aaac  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e0  0800aaac  000215e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad97  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c46  00000000  00000000  0003afbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003ec08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bddb  00000000  00000000  00041130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168b8  00000000  00000000  0005cf0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c8a  00000000  00000000  000737c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010444d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca8  00000000  00000000  001044a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001fc 	.word	0x200001fc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a418 	.word	0x0800a418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000200 	.word	0x20000200
 8000148:	0800a418 	.word	0x0800a418

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <_write>:
	int _write(int file, char *ptr, int len) {
		HAL_UART_Transmit(&DEBUGPORT, (uint8_t*) ptr, (uint16_t) len, 0xFFFFFFFF);
		return len;
	}
#else
		int _write(int file, char *ptr, int len) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]
		CDC_Transmit_FS((uint8_t*) ptr, (uint16_t) len);
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	b29b      	uxth	r3, r3
 8000180:	4619      	mov	r1, r3
 8000182:	68b8      	ldr	r0, [r7, #8]
 8000184:	f008 fa1c 	bl	80085c0 <CDC_Transmit_FS>
		return len;
 8000188:	687b      	ldr	r3, [r7, #4]
	}
 800018a:	4618      	mov	r0, r3
 800018c:	3710      	adds	r7, #16
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
	...

08000194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800019a:	f001 f863 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019e:	f000 f8a5 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a2:	f000 f9f3 	bl	800058c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001a6:	f000 f99d 	bl	80004e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001aa:	f000 f9c5 	bl	8000538 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80001ae:	f008 f91d 	bl	80083ec <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80001b2:	f000 f949 	bl	8000448 <MX_TIM4_Init>
  MX_TIM3_Init();
 80001b6:	f000 f8f9 	bl	80003ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&COMMPORT, &COMMDATA, 1);
 80001ba:	2201      	movs	r2, #1
 80001bc:	4938      	ldr	r1, [pc, #224]	; (80002a0 <main+0x10c>)
 80001be:	4839      	ldr	r0, [pc, #228]	; (80002a4 <main+0x110>)
 80001c0:	f004 f999 	bl	80044f6 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80001c4:	4838      	ldr	r0, [pc, #224]	; (80002a8 <main+0x114>)
 80001c6:	f003 fd0d 	bl	8003be4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80001ca:	4838      	ldr	r0, [pc, #224]	; (80002ac <main+0x118>)
 80001cc:	f003 fd0a 	bl	8003be4 <HAL_TIM_Base_Start_IT>

	//2020.07.28 psh
	#ifndef SOL_LOCK
	// 2020.07.28 psh - EM lock
		HAL_GPIO_WritePin(SOL_LOCK1_GPIO_Port, SOL_LOCK1_Pin, GPIO_PIN_SET); // unlock SOL_LOCK1 --> LOCK of EM Lock
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d6:	4836      	ldr	r0, [pc, #216]	; (80002b0 <main+0x11c>)
 80001d8:	f001 fbe9 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOL_LOCK2_GPIO_Port, SOL_LOCK2_Pin, GPIO_PIN_SET); // unlock SOL_LOCK2 --> LOCK of EM Lock
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e2:	4833      	ldr	r0, [pc, #204]	; (80002b0 <main+0x11c>)
 80001e4:	f001 fbe3 	bl	80019ae <HAL_GPIO_WritePin>
	#endif

	HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_SET);	// CW direction
 80001e8:	2201      	movs	r2, #1
 80001ea:	2102      	movs	r1, #2
 80001ec:	4831      	ldr	r0, [pc, #196]	; (80002b4 <main+0x120>)
 80001ee:	f001 fbde 	bl	80019ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);  // AC Motor Power off
 80001f2:	2201      	movs	r2, #1
 80001f4:	2101      	movs	r1, #1
 80001f6:	482f      	ldr	r0, [pc, #188]	; (80002b4 <main+0x120>)
 80001f8:	f001 fbd9 	bl	80019ae <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
		char *str_ptr = NULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	607b      	str	r3, [r7, #4]

		printf(" hello? \r\n");
 8000200:	482d      	ldr	r0, [pc, #180]	; (80002b8 <main+0x124>)
 8000202:	f008 fe77 	bl	8008ef4 <puts>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);		// SCAN LED Off
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800020c:	482b      	ldr	r0, [pc, #172]	; (80002bc <main+0x128>)
 800020e:	f001 fbce 	bl	80019ae <HAL_GPIO_WritePin>

		while (1) {

			if (CDC_flag == 1) {
 8000212:	4b2b      	ldr	r3, [pc, #172]	; (80002c0 <main+0x12c>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d116      	bne.n	8000248 <main+0xb4>
				printf(" Received CDC data: %s\r\n", CDCbuffer);
 800021a:	492a      	ldr	r1, [pc, #168]	; (80002c4 <main+0x130>)
 800021c:	482a      	ldr	r0, [pc, #168]	; (80002c8 <main+0x134>)
 800021e:	f008 fde3 	bl	8008de8 <iprintf>
				if (CDCbuffer[0] != '\0') {
 8000222:	4b28      	ldr	r3, [pc, #160]	; (80002c4 <main+0x130>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d00b      	beq.n	8000242 <main+0xae>
					str_ptr = strtok(CDCbuffer, ",");
 800022a:	4928      	ldr	r1, [pc, #160]	; (80002cc <main+0x138>)
 800022c:	4825      	ldr	r0, [pc, #148]	; (80002c4 <main+0x130>)
 800022e:	f008 fe89 	bl	8008f44 <strtok>
 8000232:	6078      	str	r0, [r7, #4]
					printf(" command: %s\r\n", str_ptr);
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	4826      	ldr	r0, [pc, #152]	; (80002d0 <main+0x13c>)
 8000238:	f008 fdd6 	bl	8008de8 <iprintf>
					command_parsing(str_ptr);
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f000 fa8b 	bl	8000758 <command_parsing>
				}
				CDC_flag = 0;
 8000242:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <main+0x12c>)
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]
			}

			if (Rxcplt_flag == 1) {
 8000248:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <main+0x140>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d119      	bne.n	8000284 <main+0xf0>
				printf(" Received data: %s\r\n", Rxbuffer);
 8000250:	4921      	ldr	r1, [pc, #132]	; (80002d8 <main+0x144>)
 8000252:	4822      	ldr	r0, [pc, #136]	; (80002dc <main+0x148>)
 8000254:	f008 fdc8 	bl	8008de8 <iprintf>

				if (Rxbuffer[0] != '\0') {
 8000258:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <main+0x144>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d00b      	beq.n	8000278 <main+0xe4>
					str_ptr = strtok(Rxbuffer, ",");
 8000260:	491a      	ldr	r1, [pc, #104]	; (80002cc <main+0x138>)
 8000262:	481d      	ldr	r0, [pc, #116]	; (80002d8 <main+0x144>)
 8000264:	f008 fe6e 	bl	8008f44 <strtok>
 8000268:	6078      	str	r0, [r7, #4]
					printf(" command: %s\r\n", str_ptr);
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	4818      	ldr	r0, [pc, #96]	; (80002d0 <main+0x13c>)
 800026e:	f008 fdbb 	bl	8008de8 <iprintf>
					command_parsing(str_ptr);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f000 fa70 	bl	8000758 <command_parsing>
				}   // end if(Rxbuffer[0] != '\0')
				buf_index = 0;
 8000278:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <main+0x14c>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
				Rxcplt_flag = 0;
 800027e:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <main+0x140>)
 8000280:	2200      	movs	r2, #0
 8000282:	701a      	strb	r2, [r3, #0]
			}   // end if(Rxcplt_flag == 1)

			if (time_second >= ALIVE_PRIOD)
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <main+0x150>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2bb3      	cmp	r3, #179	; 0xb3
 800028a:	dd02      	ble.n	8000292 <main+0xfe>
				check_tablet_alive(3);
 800028c:	2003      	movs	r0, #3
 800028e:	f000 fbbb 	bl	8000a08 <check_tablet_alive>

			if (door_check_enable == 1)
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <main+0x154>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d1bb      	bne.n	8000212 <main+0x7e>
				check_door();
 800029a:	f000 fb39 	bl	8000910 <check_door>
			if (CDC_flag == 1) {
 800029e:	e7b8      	b.n	8000212 <main+0x7e>
 80002a0:	20000580 	.word	0x20000580
 80002a4:	2000060c 	.word	0x2000060c
 80002a8:	20000584 	.word	0x20000584
 80002ac:	20000538 	.word	0x20000538
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	40010800 	.word	0x40010800
 80002b8:	0800a430 	.word	0x0800a430
 80002bc:	40011000 	.word	0x40011000
 80002c0:	2000021a 	.word	0x2000021a
 80002c4:	2000021c 	.word	0x2000021c
 80002c8:	0800a43c 	.word	0x0800a43c
 80002cc:	0800a458 	.word	0x0800a458
 80002d0:	0800a45c 	.word	0x0800a45c
 80002d4:	20000219 	.word	0x20000219
 80002d8:	20000280 	.word	0x20000280
 80002dc:	0800a46c 	.word	0x0800a46c
 80002e0:	20000218 	.word	0x20000218
 80002e4:	200002f0 	.word	0x200002f0
 80002e8:	20000304 	.word	0x20000304

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b094      	sub	sp, #80	; 0x50
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f008 fd6c 	bl	8008dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	f107 0314 	add.w	r3, r7, #20
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031c:	2301      	movs	r3, #1
 800031e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000324:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032a:	2301      	movs	r3, #1
 800032c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000336:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000338:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800033c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fef6 	bl	8003134 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800034e:	f000 fd43 	bl	8000dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000362:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000368:	f107 0314 	add.w	r3, r7, #20
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f003 f960 	bl	8003634 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800037a:	f000 fd2d 	bl	8000dd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800037e:	2310      	movs	r3, #16
 8000380:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f003 fb25 	bl	80039d8 <HAL_RCCEx_PeriphCLKConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000394:	f000 fd20 	bl	8000dd8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8000398:	2200      	movs	r2, #0
 800039a:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 800039e:	2000      	movs	r0, #0
 80003a0:	f003 fa32 	bl	8003808 <HAL_RCC_MCOConfig>
}
 80003a4:	bf00      	nop
 80003a6:	3750      	adds	r7, #80	; 0x50
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c0:	463b      	mov	r3, r7
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003c8:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <MX_TIM3_Init+0x94>)
 80003ca:	4a1e      	ldr	r2, [pc, #120]	; (8000444 <MX_TIM3_Init+0x98>)
 80003cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <MX_TIM3_Init+0x94>)
 80003d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80003d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <MX_TIM3_Init+0x94>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 719;
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_TIM3_Init+0x94>)
 80003de:	f240 22cf 	movw	r2, #719	; 0x2cf
 80003e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e4:	4b16      	ldr	r3, [pc, #88]	; (8000440 <MX_TIM3_Init+0x94>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_TIM3_Init+0x94>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003f0:	4813      	ldr	r0, [pc, #76]	; (8000440 <MX_TIM3_Init+0x94>)
 80003f2:	f003 fba7 	bl	8003b44 <HAL_TIM_Base_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80003fc:	f000 fcec 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	4619      	mov	r1, r3
 800040c:	480c      	ldr	r0, [pc, #48]	; (8000440 <MX_TIM3_Init+0x94>)
 800040e:	f003 fd43 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000418:	f000 fcde 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041c:	2300      	movs	r3, #0
 800041e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000420:	2300      	movs	r3, #0
 8000422:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000424:	463b      	mov	r3, r7
 8000426:	4619      	mov	r1, r3
 8000428:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_TIM3_Init+0x94>)
 800042a:	f003 ff15 	bl	8004258 <HAL_TIMEx_MasterConfigSynchronization>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000434:	f000 fcd0 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000438:	bf00      	nop
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000584 	.word	0x20000584
 8000444:	40000400 	.word	0x40000400

08000448 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800045c:	463b      	mov	r3, r7
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000464:	4b1d      	ldr	r3, [pc, #116]	; (80004dc <MX_TIM4_Init+0x94>)
 8000466:	4a1e      	ldr	r2, [pc, #120]	; (80004e0 <MX_TIM4_Init+0x98>)
 8000468:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <MX_TIM4_Init+0x94>)
 800046c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000470:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <MX_TIM4_Init+0x94>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <MX_TIM4_Init+0x94>)
 800047a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800047e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <MX_TIM4_Init+0x94>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <MX_TIM4_Init+0x94>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800048c:	4813      	ldr	r0, [pc, #76]	; (80004dc <MX_TIM4_Init+0x94>)
 800048e:	f003 fb59 	bl	8003b44 <HAL_TIM_Base_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000498:	f000 fc9e 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004a2:	f107 0308 	add.w	r3, r7, #8
 80004a6:	4619      	mov	r1, r3
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <MX_TIM4_Init+0x94>)
 80004aa:	f003 fcf5 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80004b4:	f000 fc90 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b8:	2300      	movs	r3, #0
 80004ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004c0:	463b      	mov	r3, r7
 80004c2:	4619      	mov	r1, r3
 80004c4:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_TIM4_Init+0x94>)
 80004c6:	f003 fec7 	bl	8004258 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80004d0:	f000 fc82 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	3718      	adds	r7, #24
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000538 	.word	0x20000538
 80004e0:	40000800 	.word	0x40000800

080004e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <MX_USART1_UART_Init+0x50>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 80004f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_USART1_UART_Init+0x4c>)
 800051c:	f003 ff0c 	bl	8004338 <HAL_UART_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000526:	f000 fc57 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200005cc 	.word	0x200005cc
 8000534:	40013800 	.word	0x40013800

08000538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800053e:	4a12      	ldr	r2, [pc, #72]	; (8000588 <MX_USART2_UART_Init+0x50>)
 8000540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800055e:	220c      	movs	r2, #12
 8000560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_USART2_UART_Init+0x4c>)
 8000570:	f003 fee2 	bl	8004338 <HAL_UART_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800057a:	f000 fc2d 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000060c 	.word	0x2000060c
 8000588:	40004400 	.word	0x40004400

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	4b68      	ldr	r3, [pc, #416]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a67      	ldr	r2, [pc, #412]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005a6:	f043 0310 	orr.w	r3, r3, #16
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b65      	ldr	r3, [pc, #404]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0310 	and.w	r3, r3, #16
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b8:	4b62      	ldr	r3, [pc, #392]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a61      	ldr	r2, [pc, #388]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005be:	f043 0320 	orr.w	r3, r3, #32
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b5f      	ldr	r3, [pc, #380]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b5c      	ldr	r3, [pc, #368]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a5b      	ldr	r2, [pc, #364]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b59      	ldr	r3, [pc, #356]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0304 	and.w	r3, r3, #4
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	4b56      	ldr	r3, [pc, #344]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a55      	ldr	r2, [pc, #340]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005ee:	f043 0308 	orr.w	r3, r3, #8
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b53      	ldr	r3, [pc, #332]	; (8000744 <MX_GPIO_Init+0x1b8>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|CUT_12VOUT_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 5162 	mov.w	r1, #14464	; 0x3880
 8000606:	4850      	ldr	r0, [pc, #320]	; (8000748 <MX_GPIO_Init+0x1bc>)
 8000608:	f001 f9d1 	bl	80019ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AC_M_ON_Pin|AC_M_FWD_Pin|EN2_Pin|DIR2_Pin
 800060c:	2200      	movs	r2, #0
 800060e:	21e3      	movs	r1, #227	; 0xe3
 8000610:	484e      	ldr	r0, [pc, #312]	; (800074c <MX_GPIO_Init+0x1c0>)
 8000612:	f001 f9cc 	bl	80019ae <HAL_GPIO_WritePin>
                          |PUL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR1_Pin|PUL1_Pin|SOL_LOCK1_Pin|SOL_LOCK2_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 800061c:	484c      	ldr	r0, [pc, #304]	; (8000750 <MX_GPIO_Init+0x1c4>)
 800061e:	f001 f9c6 	bl	80019ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin CUT_12VOUT_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|CUT_12VOUT_Pin|LED3_Pin|LED2_Pin;
 8000622:	f44f 5362 	mov.w	r3, #14464	; 0x3880
 8000626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	4843      	ldr	r0, [pc, #268]	; (8000748 <MX_GPIO_Init+0x1bc>)
 800063c:	f001 f81c 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_M_ON_Pin AC_M_FWD_Pin */
  GPIO_InitStruct.Pin = AC_M_ON_Pin|AC_M_FWD_Pin;
 8000640:	2303      	movs	r3, #3
 8000642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4619      	mov	r1, r3
 8000656:	483d      	ldr	r0, [pc, #244]	; (800074c <MX_GPIO_Init+0x1c0>)
 8000658:	f001 f80e 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN2_Pin */
  GPIO_InitStruct.Pin = EN2_Pin;
 800065c:	2320      	movs	r3, #32
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000660:	2311      	movs	r3, #17
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2302      	movs	r3, #2
 800066a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN2_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	4619      	mov	r1, r3
 8000672:	4836      	ldr	r0, [pc, #216]	; (800074c <MX_GPIO_Init+0x1c0>)
 8000674:	f001 f800 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin PUL2_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|PUL2_Pin;
 8000678:	23c0      	movs	r3, #192	; 0xc0
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800067c:	2311      	movs	r3, #17
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4619      	mov	r1, r3
 800068e:	482f      	ldr	r0, [pc, #188]	; (800074c <MX_GPIO_Init+0x1c0>)
 8000690:	f000 fff2 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin PUL1_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|PUL1_Pin;
 8000694:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800069a:	2311      	movs	r3, #17
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4619      	mov	r1, r3
 80006ac:	4828      	ldr	r0, [pc, #160]	; (8000750 <MX_GPIO_Init+0x1c4>)
 80006ae:	f000 ffe3 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	4821      	ldr	r0, [pc, #132]	; (800074c <MX_GPIO_Init+0x1c0>)
 80006c8:	f000 ffd6 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : EI3_BLIMIT_Pin EI5_TLIMIT_Pin */
  GPIO_InitStruct.Pin = EI3_BLIMIT_Pin|EI5_TLIMIT_Pin;
 80006cc:	2328      	movs	r3, #40	; 0x28
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_GPIO_Init+0x1c8>)
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	481c      	ldr	r0, [pc, #112]	; (8000750 <MX_GPIO_Init+0x1c4>)
 80006e0:	f000 ffca 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOOR_Pin */
  GPIO_InitStruct.Pin = DOOR_Pin;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DOOR_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4816      	ldr	r0, [pc, #88]	; (8000750 <MX_GPIO_Init+0x1c4>)
 80006f8:	f000 ffbe 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOL_LOCK1_Pin SOL_LOCK2_Pin */
  GPIO_InitStruct.Pin = SOL_LOCK1_Pin|SOL_LOCK2_Pin;
 80006fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2302      	movs	r3, #2
 800070c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	4619      	mov	r1, r3
 8000714:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_GPIO_Init+0x1c4>)
 8000716:	f000 ffaf 	bl	8001678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	2009      	movs	r0, #9
 8000720:	f000 fefd 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000724:	2009      	movs	r0, #9
 8000726:	f000 ff16 	bl	8001556 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2017      	movs	r0, #23
 8000730:	f000 fef5 	bl	800151e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000734:	2017      	movs	r0, #23
 8000736:	f000 ff0e 	bl	8001556 <HAL_NVIC_EnableIRQ>

}
 800073a:	bf00      	nop
 800073c:	3720      	adds	r7, #32
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000
 8000748:	40011000 	.word	0x40011000
 800074c:	40010800 	.word	0x40010800
 8000750:	40010c00 	.word	0x40010c00
 8000754:	10210000 	.word	0x10210000

08000758 <command_parsing>:

/* USER CODE BEGIN 4 */
void command_parsing(char *str_ptr) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

	if (!strcmp(str_ptr, "OK")) {
 8000760:	4957      	ldr	r1, [pc, #348]	; (80008c0 <command_parsing+0x168>)
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fcf2 	bl	800014c <strcmp>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d10e      	bne.n	800078c <command_parsing+0x34>
		printf(" OK signal received\r\n");
 800076e:	4855      	ldr	r0, [pc, #340]	; (80008c4 <command_parsing+0x16c>)
 8000770:	f008 fbc0 	bl	8008ef4 <puts>
		str_ptr = strtok(NULL, ",");
 8000774:	4954      	ldr	r1, [pc, #336]	; (80008c8 <command_parsing+0x170>)
 8000776:	2000      	movs	r0, #0
 8000778:	f008 fbe4 	bl	8008f44 <strtok>
 800077c:	6078      	str	r0, [r7, #4]
		PAD_boot_flag = 1;
 800077e:	4b53      	ldr	r3, [pc, #332]	; (80008cc <command_parsing+0x174>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
		alive_call_fail = 0;
 8000784:	4b52      	ldr	r3, [pc, #328]	; (80008d0 <command_parsing+0x178>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
			Rfid_Scanning(atoi(str_ptr));

			Report_to_Server(REPORT_CMD);
		}
	}
}
 800078a:	e094      	b.n	80008b6 <command_parsing+0x15e>
	} else if (!strcmp(str_ptr, "BR")) {
 800078c:	4951      	ldr	r1, [pc, #324]	; (80008d4 <command_parsing+0x17c>)
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff fcdc 	bl	800014c <strcmp>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10b      	bne.n	80007b2 <command_parsing+0x5a>
		printf(" Board Read\r\n");
 800079a:	484f      	ldr	r0, [pc, #316]	; (80008d8 <command_parsing+0x180>)
 800079c:	f008 fbaa 	bl	8008ef4 <puts>
		str_ptr = strtok(NULL, ",");
 80007a0:	4949      	ldr	r1, [pc, #292]	; (80008c8 <command_parsing+0x170>)
 80007a2:	2000      	movs	r0, #0
 80007a4:	f008 fbce 	bl	8008f44 <strtok>
 80007a8:	6078      	str	r0, [r7, #4]
		Report_to_Server(REPORT_CMD);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 f97a 	bl	8000aa4 <Report_to_Server>
}
 80007b0:	e081      	b.n	80008b6 <command_parsing+0x15e>
	} else if (!strcmp(str_ptr, "UD")) {
 80007b2:	494a      	ldr	r1, [pc, #296]	; (80008dc <command_parsing+0x184>)
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff fcc9 	bl	800014c <strcmp>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d127      	bne.n	8000810 <command_parsing+0xb8>
		printf(" Unlock Door\r\n");
 80007c0:	4847      	ldr	r0, [pc, #284]	; (80008e0 <command_parsing+0x188>)
 80007c2:	f008 fb97 	bl	8008ef4 <puts>
		str_ptr = strtok(NULL, ",");
 80007c6:	4940      	ldr	r1, [pc, #256]	; (80008c8 <command_parsing+0x170>)
 80007c8:	2000      	movs	r0, #0
 80007ca:	f008 fbbb 	bl	8008f44 <strtok>
 80007ce:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(SOL_LOCK1_GPIO_Port, SOL_LOCK1_Pin, GPIO_PIN_RESET); // lock SOL_LOCK1 ---> Unlock of EM Lock
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d6:	4843      	ldr	r0, [pc, #268]	; (80008e4 <command_parsing+0x18c>)
 80007d8:	f001 f8e9 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOL_LOCK2_GPIO_Port, SOL_LOCK2_Pin, GPIO_PIN_RESET); // lock SOL_LOCK2 ---> Unlock of EM Lock
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	4840      	ldr	r0, [pc, #256]	; (80008e4 <command_parsing+0x18c>)
 80007e4:	f001 f8e3 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_Delay(1000);	// 1s delay for unlock operation
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f000 fd9c 	bl	8001328 <HAL_Delay>
		strcpy(Bstate.lock, "0,");  // 占쏙옙占쏙옙 占쏙옙占쏙옙
 80007f0:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <command_parsing+0x190>)
 80007f2:	4a3e      	ldr	r2, [pc, #248]	; (80008ec <command_parsing+0x194>)
 80007f4:	8811      	ldrh	r1, [r2, #0]
 80007f6:	7892      	ldrb	r2, [r2, #2]
 80007f8:	8019      	strh	r1, [r3, #0]
 80007fa:	709a      	strb	r2, [r3, #2]
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	483b      	ldr	r0, [pc, #236]	; (80008f0 <command_parsing+0x198>)
 8000804:	f001 f8d3 	bl	80019ae <HAL_GPIO_WritePin>
		Report_to_Server(REPORT_CMD);
 8000808:	2000      	movs	r0, #0
 800080a:	f000 f94b 	bl	8000aa4 <Report_to_Server>
}
 800080e:	e052      	b.n	80008b6 <command_parsing+0x15e>
	} else if (!strcmp(str_ptr, "LD")) {
 8000810:	4938      	ldr	r1, [pc, #224]	; (80008f4 <command_parsing+0x19c>)
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fc9a 	bl	800014c <strcmp>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d127      	bne.n	800086e <command_parsing+0x116>
		printf(" Lock Door\r\n");
 800081e:	4836      	ldr	r0, [pc, #216]	; (80008f8 <command_parsing+0x1a0>)
 8000820:	f008 fb68 	bl	8008ef4 <puts>
		str_ptr = strtok(NULL, ",");
 8000824:	4928      	ldr	r1, [pc, #160]	; (80008c8 <command_parsing+0x170>)
 8000826:	2000      	movs	r0, #0
 8000828:	f008 fb8c 	bl	8008f44 <strtok>
 800082c:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(SOL_LOCK1_GPIO_Port, SOL_LOCK1_Pin, GPIO_PIN_SET); // unlock SOL_LOCK1  ---> Lock of EM Lock
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000834:	482b      	ldr	r0, [pc, #172]	; (80008e4 <command_parsing+0x18c>)
 8000836:	f001 f8ba 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOL_LOCK2_GPIO_Port, SOL_LOCK2_Pin, GPIO_PIN_SET); // unlock SOL_LOCK2  ---> Lock of EM Lock
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000840:	4828      	ldr	r0, [pc, #160]	; (80008e4 <command_parsing+0x18c>)
 8000842:	f001 f8b4 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_Delay(1000);	// 1s delay for lock operation
 8000846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084a:	f000 fd6d 	bl	8001328 <HAL_Delay>
		strcpy(Bstate.lock, "1,");  // 占쏙옙占쏙옙 占쏙옙占쏙옙
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <command_parsing+0x190>)
 8000850:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <command_parsing+0x1a4>)
 8000852:	8811      	ldrh	r1, [r2, #0]
 8000854:	7892      	ldrb	r2, [r2, #2]
 8000856:	8019      	strh	r1, [r3, #0]
 8000858:	709a      	strb	r2, [r3, #2]
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000860:	4823      	ldr	r0, [pc, #140]	; (80008f0 <command_parsing+0x198>)
 8000862:	f001 f8a4 	bl	80019ae <HAL_GPIO_WritePin>
		Report_to_Server(REPORT_CMD);
 8000866:	2000      	movs	r0, #0
 8000868:	f000 f91c 	bl	8000aa4 <Report_to_Server>
}
 800086c:	e023      	b.n	80008b6 <command_parsing+0x15e>
	} else if (!strcmp(str_ptr, "RS")) {
 800086e:	4924      	ldr	r1, [pc, #144]	; (8000900 <command_parsing+0x1a8>)
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fc6b 	bl	800014c <strcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d11c      	bne.n	80008b6 <command_parsing+0x15e>
		printf(" RFID Scanning\r\n");
 800087c:	4821      	ldr	r0, [pc, #132]	; (8000904 <command_parsing+0x1ac>)
 800087e:	f008 fb39 	bl	8008ef4 <puts>
		str_ptr = strtok(NULL, ",");
 8000882:	4911      	ldr	r1, [pc, #68]	; (80008c8 <command_parsing+0x170>)
 8000884:	2000      	movs	r0, #0
 8000886:	f008 fb5d 	bl	8008f44 <strtok>
 800088a:	6078      	str	r0, [r7, #4]
		if (str_ptr == '\0') {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d103      	bne.n	800089a <command_parsing+0x142>
			printf(" need more parameter!\r\n");
 8000892:	481d      	ldr	r0, [pc, #116]	; (8000908 <command_parsing+0x1b0>)
 8000894:	f008 fb2e 	bl	8008ef4 <puts>
}
 8000898:	e00d      	b.n	80008b6 <command_parsing+0x15e>
			printf(" speed:%s\r\n", str_ptr);
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	481b      	ldr	r0, [pc, #108]	; (800090c <command_parsing+0x1b4>)
 800089e:	f008 faa3 	bl	8008de8 <iprintf>
			Rfid_Scanning(atoi(str_ptr));
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f008 fa6a 	bl	8008d7c <atoi>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f9ac 	bl	8000c08 <Rfid_Scanning>
			Report_to_Server(REPORT_CMD);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 f8f7 	bl	8000aa4 <Report_to_Server>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	0800a484 	.word	0x0800a484
 80008c4:	0800a488 	.word	0x0800a488
 80008c8:	0800a458 	.word	0x0800a458
 80008cc:	2000021b 	.word	0x2000021b
 80008d0:	200002f4 	.word	0x200002f4
 80008d4:	0800a4a0 	.word	0x0800a4a0
 80008d8:	0800a4a4 	.word	0x0800a4a4
 80008dc:	0800a4b4 	.word	0x0800a4b4
 80008e0:	0800a4b8 	.word	0x0800a4b8
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	2000000a 	.word	0x2000000a
 80008ec:	0800a4c8 	.word	0x0800a4c8
 80008f0:	40011000 	.word	0x40011000
 80008f4:	0800a4cc 	.word	0x0800a4cc
 80008f8:	0800a4d0 	.word	0x0800a4d0
 80008fc:	0800a4dc 	.word	0x0800a4dc
 8000900:	0800a4e0 	.word	0x0800a4e0
 8000904:	0800a4e4 	.word	0x0800a4e4
 8000908:	0800a4f4 	.word	0x0800a4f4
 800090c:	0800a50c 	.word	0x0800a50c

08000910 <check_door>:

void check_door(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	door_check_enable = 0;
 8000914:	4b31      	ldr	r3, [pc, #196]	; (80009dc <check_door+0xcc>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]

	if (HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin) == GPIO_PIN_SET)
 800091a:	2140      	movs	r1, #64	; 0x40
 800091c:	4830      	ldr	r0, [pc, #192]	; (80009e0 <check_door+0xd0>)
 800091e:	f001 f82f 	bl	8001980 <HAL_GPIO_ReadPin>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d105      	bne.n	8000934 <check_door+0x24>
		open_check++;   // open
 8000928:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <check_door+0xd4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	4a2d      	ldr	r2, [pc, #180]	; (80009e4 <check_door+0xd4>)
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	e004      	b.n	800093e <check_door+0x2e>
	else
		close_check++;  // close
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <check_door+0xd8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	4a2b      	ldr	r2, [pc, #172]	; (80009e8 <check_door+0xd8>)
 800093c:	6013      	str	r3, [r2, #0]

	if (door_check > 3) {  // 5 times when door_check is 0,1,2,3,4
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <check_door+0xdc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b03      	cmp	r3, #3
 8000944:	dd43      	ble.n	80009ce <check_door+0xbe>
		if (open_check > 3) { // open
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <check_door+0xd4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b03      	cmp	r3, #3
 800094c:	dd18      	ble.n	8000980 <check_door+0x70>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000954:	4826      	ldr	r0, [pc, #152]	; (80009f0 <check_door+0xe0>)
 8000956:	f001 f82a 	bl	80019ae <HAL_GPIO_WritePin>
			if (!strcmp(Bstate.door, "1,")) {    // "1," == closed
 800095a:	4926      	ldr	r1, [pc, #152]	; (80009f4 <check_door+0xe4>)
 800095c:	4826      	ldr	r0, [pc, #152]	; (80009f8 <check_door+0xe8>)
 800095e:	f7ff fbf5 	bl	800014c <strcmp>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10b      	bne.n	8000980 <check_door+0x70>
				strcpy(Bstate.door, "0,");
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <check_door+0xe8>)
 800096a:	4a24      	ldr	r2, [pc, #144]	; (80009fc <check_door+0xec>)
 800096c:	8811      	ldrh	r1, [r2, #0]
 800096e:	7892      	ldrb	r2, [r2, #2]
 8000970:	8019      	strh	r1, [r3, #0]
 8000972:	709a      	strb	r2, [r3, #2]
				Report_to_Server(REPORT_DOOR);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 f895 	bl	8000aa4 <Report_to_Server>
				printf(" Door is opened!\r\n");
 800097a:	4821      	ldr	r0, [pc, #132]	; (8000a00 <check_door+0xf0>)
 800097c:	f008 faba 	bl	8008ef4 <puts>
			}
		}
		if (close_check > 3) {  //close
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <check_door+0xd8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b03      	cmp	r3, #3
 8000986:	dd18      	ble.n	80009ba <check_door+0xaa>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098e:	4818      	ldr	r0, [pc, #96]	; (80009f0 <check_door+0xe0>)
 8000990:	f001 f80d 	bl	80019ae <HAL_GPIO_WritePin>
			if (!strcmp(Bstate.door, "0,")) {	// "0," == opened
 8000994:	4919      	ldr	r1, [pc, #100]	; (80009fc <check_door+0xec>)
 8000996:	4818      	ldr	r0, [pc, #96]	; (80009f8 <check_door+0xe8>)
 8000998:	f7ff fbd8 	bl	800014c <strcmp>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10b      	bne.n	80009ba <check_door+0xaa>
				strcpy(Bstate.door, "1,");
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <check_door+0xe8>)
 80009a4:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <check_door+0xe4>)
 80009a6:	8811      	ldrh	r1, [r2, #0]
 80009a8:	7892      	ldrb	r2, [r2, #2]
 80009aa:	8019      	strh	r1, [r3, #0]
 80009ac:	709a      	strb	r2, [r3, #2]
				Report_to_Server(REPORT_DOOR);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f000 f878 	bl	8000aa4 <Report_to_Server>
				printf(" Door is closed!\r\n");
 80009b4:	4813      	ldr	r0, [pc, #76]	; (8000a04 <check_door+0xf4>)
 80009b6:	f008 fa9d 	bl	8008ef4 <puts>
			}
		}
		door_check = 0;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <check_door+0xdc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
		open_check = 0;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <check_door+0xd4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
		close_check = 0;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <check_door+0xd8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]

	} else
		door_check++;

}
 80009cc:	e004      	b.n	80009d8 <check_door+0xc8>
		door_check++;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <check_door+0xdc>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a05      	ldr	r2, [pc, #20]	; (80009ec <check_door+0xdc>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000304 	.word	0x20000304
 80009e0:	40010c00 	.word	0x40010c00
 80009e4:	200002fc 	.word	0x200002fc
 80009e8:	200002f8 	.word	0x200002f8
 80009ec:	20000300 	.word	0x20000300
 80009f0:	40011000 	.word	0x40011000
 80009f4:	0800a4dc 	.word	0x0800a4dc
 80009f8:	20000005 	.word	0x20000005
 80009fc:	0800a4c8 	.word	0x0800a4c8
 8000a00:	0800a518 	.word	0x0800a518
 8000a04:	0800a52c 	.word	0x0800a52c

08000a08 <check_tablet_alive>:

void check_tablet_alive(int max_trying_count) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) "callme\r", (uint16_t) strlen("callme\r"));
 8000a10:	2107      	movs	r1, #7
 8000a12:	481c      	ldr	r0, [pc, #112]	; (8000a84 <check_tablet_alive+0x7c>)
 8000a14:	f007 fdd4 	bl	80085c0 <CDC_Transmit_FS>
	HAL_UART_Transmit(&COMMPORT, (uint8_t*) "callme\r", (uint16_t) strlen("callme\r"), 0xFFFFFFFF);
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	4919      	ldr	r1, [pc, #100]	; (8000a84 <check_tablet_alive+0x7c>)
 8000a20:	4819      	ldr	r0, [pc, #100]	; (8000a88 <check_tablet_alive+0x80>)
 8000a22:	f003 fcd6 	bl	80043d2 <HAL_UART_Transmit>
	printf(" alive calling!\r\n");
 8000a26:	4819      	ldr	r0, [pc, #100]	; (8000a8c <check_tablet_alive+0x84>)
 8000a28:	f008 fa64 	bl	8008ef4 <puts>
	if (PAD_boot_flag == 1) {
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <check_tablet_alive+0x88>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d104      	bne.n	8000a3e <check_tablet_alive+0x36>
		alive_call_fail++;
 8000a34:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <check_tablet_alive+0x8c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <check_tablet_alive+0x8c>)
 8000a3c:	6013      	str	r3, [r2, #0]
	}
	time_second = 0;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <check_tablet_alive+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]

	if (alive_call_fail >= max_trying_count) { // check alive for 'max_trying_count' times
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <check_tablet_alive+0x8c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	dc16      	bgt.n	8000a7c <check_tablet_alive+0x74>
		HAL_GPIO_WritePin(CUT_12VOUT_GPIO_Port, CUT_12VOUT_Pin, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	4812      	ldr	r0, [pc, #72]	; (8000a9c <check_tablet_alive+0x94>)
 8000a54:	f000 ffab 	bl	80019ae <HAL_GPIO_WritePin>
		printf(" Tablet died, rebooted!\r\n"); // control relay for powering tablet
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <check_tablet_alive+0x98>)
 8000a5a:	f008 fa4b 	bl	8008ef4 <puts>
		HAL_Delay(2000);
 8000a5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a62:	f000 fc61 	bl	8001328 <HAL_Delay>
		HAL_GPIO_WritePin(CUT_12VOUT_GPIO_Port, CUT_12VOUT_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <check_tablet_alive+0x94>)
 8000a6c:	f000 ff9f 	bl	80019ae <HAL_GPIO_WritePin>
		alive_call_fail = 0;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <check_tablet_alive+0x8c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
		PAD_boot_flag = 0;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <check_tablet_alive+0x88>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	0800a540 	.word	0x0800a540
 8000a88:	2000060c 	.word	0x2000060c
 8000a8c:	0800a548 	.word	0x0800a548
 8000a90:	2000021b 	.word	0x2000021b
 8000a94:	200002f4 	.word	0x200002f4
 8000a98:	200002f0 	.word	0x200002f0
 8000a9c:	40011000 	.word	0x40011000
 8000aa0:	0800a55c 	.word	0x0800a55c

08000aa4 <Report_to_Server>:

void Report_to_Server(int report_path) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af04      	add	r7, sp, #16
 8000aaa:	6078      	str	r0, [r7, #4]
	int total = 0, sum = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < 3; i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	e00a      	b.n	8000ad0 <Report_to_Server+0x2c>
		sum += Bstate.cmd[i];
 8000aba:	4a48      	ldr	r2, [pc, #288]	; (8000bdc <Report_to_Server+0x138>)
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4413      	add	r3, r2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 3; i++)
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	3301      	adds	r3, #1
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	ddf1      	ble.n	8000aba <Report_to_Server+0x16>

	for (int i = 0; i < 2; i++) {
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	e01d      	b.n	8000b18 <Report_to_Server+0x74>
		sum += Bstate.door[i];
 8000adc:	4a3f      	ldr	r2, [pc, #252]	; (8000bdc <Report_to_Server+0x138>)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	3305      	adds	r3, #5
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	4413      	add	r3, r2
 8000aec:	617b      	str	r3, [r7, #20]
		sum += Bstate.lock[i];
 8000aee:	4a3b      	ldr	r2, [pc, #236]	; (8000bdc <Report_to_Server+0x138>)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	330a      	adds	r3, #10
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	4413      	add	r3, r2
 8000afe:	617b      	str	r3, [r7, #20]
		sum += Bstate.scan[i];
 8000b00:	4a36      	ldr	r2, [pc, #216]	; (8000bdc <Report_to_Server+0x138>)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4413      	add	r3, r2
 8000b06:	330f      	adds	r3, #15
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	4413      	add	r3, r2
 8000b10:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 2; i++) {
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3301      	adds	r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	ddde      	ble.n	8000adc <Report_to_Server+0x38>
	}
	sum += Bstate.end[0];
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <Report_to_Server+0x138>)
 8000b20:	7d1b      	ldrb	r3, [r3, #20]
 8000b22:	461a      	mov	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	4413      	add	r3, r2
 8000b28:	617b      	str	r3, [r7, #20]
	total = sum;
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	60bb      	str	r3, [r7, #8]
	total = total & 0xff;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	60bb      	str	r3, [r7, #8]
	total = ~total + 1;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	425b      	negs	r3, r3
 8000b38:	60bb      	str	r3, [r7, #8]

	sprintf(Txbuffer, "%s%s%s%s%s", Bstate.cmd, Bstate.door, Bstate.lock, Bstate.scan, Bstate.end);
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <Report_to_Server+0x13c>)
 8000b3c:	9302      	str	r3, [sp, #8]
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <Report_to_Server+0x140>)
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <Report_to_Server+0x144>)
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <Report_to_Server+0x148>)
 8000b48:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <Report_to_Server+0x138>)
 8000b4a:	4929      	ldr	r1, [pc, #164]	; (8000bf0 <Report_to_Server+0x14c>)
 8000b4c:	4829      	ldr	r0, [pc, #164]	; (8000bf4 <Report_to_Server+0x150>)
 8000b4e:	f008 f9d9 	bl	8008f04 <siprintf>
	printf(" Txbuffer: %s\r\n", Txbuffer);
 8000b52:	4928      	ldr	r1, [pc, #160]	; (8000bf4 <Report_to_Server+0x150>)
 8000b54:	4828      	ldr	r0, [pc, #160]	; (8000bf8 <Report_to_Server+0x154>)
 8000b56:	f008 f947 	bl	8008de8 <iprintf>

	Txbuffer[10] = total;	//checksum
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <Report_to_Server+0x150>)
 8000b60:	729a      	strb	r2, [r3, #10]

	if (report_path == REPORT_CMD) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d11d      	bne.n	8000ba4 <Report_to_Server+0x100>
		if (Rxcplt_flag == 1) {
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <Report_to_Server+0x158>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d10b      	bne.n	8000b88 <Report_to_Server+0xe4>
			HAL_UART_Transmit(&COMMPORT, (uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer), 0xFFFFFFFF);
 8000b70:	4820      	ldr	r0, [pc, #128]	; (8000bf4 <Report_to_Server+0x150>)
 8000b72:	f7ff faf5 	bl	8000160 <strlen>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	491d      	ldr	r1, [pc, #116]	; (8000bf4 <Report_to_Server+0x150>)
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <Report_to_Server+0x15c>)
 8000b82:	f003 fc26 	bl	80043d2 <HAL_UART_Transmit>
	 } else if(report_path == REPORT_DOOR) {
	 CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t)strlen(Txbuffer));
	 HAL_UART_Transmit(&COMMPORT, (uint8_t *)Txbuffer, (uint16_t)strlen(Txbuffer), 0xFFFFFFFF);
	 }
	 */
}
 8000b86:	e024      	b.n	8000bd2 <Report_to_Server+0x12e>
		} else if (CDC_flag == 1) {
 8000b88:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <Report_to_Server+0x160>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d120      	bne.n	8000bd2 <Report_to_Server+0x12e>
			CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer));
 8000b90:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <Report_to_Server+0x150>)
 8000b92:	f7ff fae5 	bl	8000160 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <Report_to_Server+0x150>)
 8000b9e:	f007 fd0f 	bl	80085c0 <CDC_Transmit_FS>
}
 8000ba2:	e016      	b.n	8000bd2 <Report_to_Server+0x12e>
	} else if (report_path == REPORT_DOOR) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d113      	bne.n	8000bd2 <Report_to_Server+0x12e>
		CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer));
 8000baa:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <Report_to_Server+0x150>)
 8000bac:	f7ff fad8 	bl	8000160 <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <Report_to_Server+0x150>)
 8000bb8:	f007 fd02 	bl	80085c0 <CDC_Transmit_FS>
		HAL_UART_Transmit(&COMMPORT, (uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer), 0xFFFFFFFF);
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <Report_to_Server+0x150>)
 8000bbe:	f7ff facf 	bl	8000160 <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	490a      	ldr	r1, [pc, #40]	; (8000bf4 <Report_to_Server+0x150>)
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <Report_to_Server+0x15c>)
 8000bce:	f003 fc00 	bl	80043d2 <HAL_UART_Transmit>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000014 	.word	0x20000014
 8000be4:	2000000f 	.word	0x2000000f
 8000be8:	2000000a 	.word	0x2000000a
 8000bec:	20000005 	.word	0x20000005
 8000bf0:	0800a578 	.word	0x0800a578
 8000bf4:	200002e4 	.word	0x200002e4
 8000bf8:	0800a584 	.word	0x0800a584
 8000bfc:	20000219 	.word	0x20000219
 8000c00:	2000060c 	.word	0x2000060c
 8000c04:	2000021a 	.word	0x2000021a

08000c08 <Rfid_Scanning>:

void Rfid_Scanning(int speed) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]

	printf(" scanning...... \r\n");
 8000c14:	482b      	ldr	r0, [pc, #172]	; (8000cc4 <Rfid_Scanning+0xbc>)
 8000c16:	f008 f96d 	bl	8008ef4 <puts>
	strcpy(Bstate.scan, "1,");
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <Rfid_Scanning+0xc0>)
 8000c1c:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <Rfid_Scanning+0xc4>)
 8000c1e:	8811      	ldrh	r1, [r2, #0]
 8000c20:	7892      	ldrb	r2, [r2, #2]
 8000c22:	8019      	strh	r1, [r3, #0]
 8000c24:	709a      	strb	r2, [r3, #2]
	Report_to_Server(REPORT_CMD);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff ff3c 	bl	8000aa4 <Report_to_Server>



	///do{
		HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_RESET);	// CW direction
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <Rfid_Scanning+0xc8>)
 8000c32:	f000 febc 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c36:	2064      	movs	r0, #100	; 0x64
 8000c38:	f000 fb76 	bl	8001328 <HAL_Delay>
		HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_RESET);  // AC Motor Power on
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4823      	ldr	r0, [pc, #140]	; (8000cd0 <Rfid_Scanning+0xc8>)
 8000c42:	f000 feb4 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);		// SCAN LED ON
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c4c:	4821      	ldr	r0, [pc, #132]	; (8000cd4 <Rfid_Scanning+0xcc>)
 8000c4e:	f000 feae 	bl	80019ae <HAL_GPIO_WritePin>
	//} while(HAL_GPIO_ReadPin(EI5_TLIMIT_GPIO_Port, EI5_TLIMIT_Pin) == GPIO_PIN_SET);


		while(HAL_GPIO_ReadPin(EI5_TLIMIT_GPIO_Port, EI5_TLIMIT_Pin) == GPIO_PIN_SET);
 8000c52:	bf00      	nop
 8000c54:	2120      	movs	r1, #32
 8000c56:	4820      	ldr	r0, [pc, #128]	; (8000cd8 <Rfid_Scanning+0xd0>)
 8000c58:	f000 fe92 	bl	8001980 <HAL_GPIO_ReadPin>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d0f8      	beq.n	8000c54 <Rfid_Scanning+0x4c>


	HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_SET);	// CW direction
 8000c62:	2201      	movs	r2, #1
 8000c64:	2102      	movs	r1, #2
 8000c66:	481a      	ldr	r0, [pc, #104]	; (8000cd0 <Rfid_Scanning+0xc8>)
 8000c68:	f000 fea1 	bl	80019ae <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 fb5b 	bl	8001328 <HAL_Delay>
	HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);  // AC Motor Power on
 8000c72:	2201      	movs	r2, #1
 8000c74:	2101      	movs	r1, #1
 8000c76:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <Rfid_Scanning+0xc8>)
 8000c78:	f000 fe99 	bl	80019ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_SET);	// CCW direction
	HAL_Delay(500);
	HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_RESET);  // AC Motor Power on
*/

	HAL_GPIO_WritePin(AC_M_ON_GPIO_Port, AC_M_ON_Pin, GPIO_PIN_SET);	// AC Motor Power off
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <Rfid_Scanning+0xc8>)
 8000c82:	f000 fe94 	bl	80019ae <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f000 fb4e 	bl	8001328 <HAL_Delay>
	HAL_GPIO_WritePin(AC_M_FWD_GPIO_Port, AC_M_FWD_Pin, GPIO_PIN_SET);	// CCW direction
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2102      	movs	r1, #2
 8000c90:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <Rfid_Scanning+0xc8>)
 8000c92:	f000 fe8c 	bl	80019ae <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 8000c96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c9a:	f000 fb45 	bl	8001328 <HAL_Delay>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);		// SCAN LED Off
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <Rfid_Scanning+0xcc>)
 8000ca6:	f000 fe82 	bl	80019ae <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		HAL_Delay(500);
	}
	*/

	strcpy(Bstate.scan, "0,");  // 占쏙옙占쏙옙 占쏙옙占쏙옙, 占쏙옙캔 占쏙옙...
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <Rfid_Scanning+0xc0>)
 8000cac:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <Rfid_Scanning+0xd4>)
 8000cae:	8811      	ldrh	r1, [r2, #0]
 8000cb0:	7892      	ldrb	r2, [r2, #2]
 8000cb2:	8019      	strh	r1, [r3, #0]
 8000cb4:	709a      	strb	r2, [r3, #2]
	printf(" scan is completed!!\r\n");
 8000cb6:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <Rfid_Scanning+0xd8>)
 8000cb8:	f008 f91c 	bl	8008ef4 <puts>
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	0800a594 	.word	0x0800a594
 8000cc8:	2000000f 	.word	0x2000000f
 8000ccc:	0800a4dc 	.word	0x0800a4dc
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	0800a4c8 	.word	0x0800a4c8
 8000ce0:	0800a5a8 	.word	0x0800a5a8

08000ce4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	// printf("RxINT_Routine");

	if (huart->Instance == COMMUART) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <HAL_UART_RxCpltCallback+0x60>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d121      	bne.n	8000d3a <HAL_UART_RxCpltCallback+0x56>
		if (COMMDATA == EOT) {
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_UART_RxCpltCallback+0x64>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b0d      	cmp	r3, #13
 8000cfc:	d109      	bne.n	8000d12 <HAL_UART_RxCpltCallback+0x2e>
			Rxbuffer[buf_index] = '\0';
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_UART_RxCpltCallback+0x68>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_UART_RxCpltCallback+0x6c>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	5499      	strb	r1, [r3, r2]
			Rxcplt_flag = 1;
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_UART_RxCpltCallback+0x70>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e00e      	b.n	8000d30 <HAL_UART_RxCpltCallback+0x4c>
		} else if (COMMDATA != 0x00) {			// except NULL(0x00)
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_UART_RxCpltCallback+0x64>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00a      	beq.n	8000d30 <HAL_UART_RxCpltCallback+0x4c>
			Rxbuffer[buf_index++] = COMMDATA;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_UART_RxCpltCallback+0x68>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	b2d1      	uxtb	r1, r2
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_UART_RxCpltCallback+0x68>)
 8000d24:	7011      	strb	r1, [r2, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_UART_RxCpltCallback+0x64>)
 8000d2a:	7819      	ldrb	r1, [r3, #0]
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_UART_RxCpltCallback+0x6c>)
 8000d2e:	5499      	strb	r1, [r3, r2]
		}

		HAL_UART_Receive_IT(&COMMPORT, &COMMDATA, 1);
 8000d30:	2201      	movs	r2, #1
 8000d32:	4905      	ldr	r1, [pc, #20]	; (8000d48 <HAL_UART_RxCpltCallback+0x64>)
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <HAL_UART_RxCpltCallback+0x74>)
 8000d36:	f003 fbde 	bl	80044f6 <HAL_UART_Receive_IT>

	}
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40004400 	.word	0x40004400
 8000d48:	20000580 	.word	0x20000580
 8000d4c:	20000218 	.word	0x20000218
 8000d50:	20000280 	.word	0x20000280
 8000d54:	20000219 	.word	0x20000219
 8000d58:	2000060c 	.word	0x2000060c

08000d5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d104      	bne.n	8000d78 <HAL_TIM_PeriodElapsedCallback+0x1c>
		time_second++;
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d76:	6013      	str	r3, [r2, #0]
		// HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		// printf(" alive_call_fail: %d,  time: %d\r\n", alive_call_fail, time_second);
		// CDC_Transmit_FS("CDC_TX test...\r\n", sizeof("CDC_TX test...\r\n"));
	}
	if (htim->Instance == TIM3) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d102      	bne.n	8000d88 <HAL_TIM_PeriodElapsedCallback+0x2c>
		door_check_enable = 1;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
	}
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40000800 	.word	0x40000800
 8000d98:	200002f0 	.word	0x200002f0
 8000d9c:	40000400 	.word	0x40000400
 8000da0:	20000304 	.word	0x20000304

08000da4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EI5_TLIMIT_Pin) {
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	2b20      	cmp	r3, #32
 8000db2:	d102      	bne.n	8000dba <HAL_GPIO_EXTI_Callback+0x16>
		printf("TLIMIT click!!!\r\n");
 8000db4:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000db6:	f008 f89d 	bl	8008ef4 <puts>
	 }

	if(GPIO_Pin == EI3_BLIMIT_Pin) {
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	d102      	bne.n	8000dc6 <HAL_GPIO_EXTI_Callback+0x22>
		printf("BLIMIT click!!!\r\n");
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000dc2:	f008 f897 	bl	8008ef4 <puts>
	 }

}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	0800a5c0 	.word	0x0800a5c0
 8000dd4:	0800a5d4 	.word	0x0800a5d4

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_MspInit+0x5c>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <HAL_MspInit+0x5c>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6193      	str	r3, [r2, #24]
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_MspInit+0x5c>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x5c>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_MspInit+0x5c>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_MspInit+0x5c>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_MspInit+0x60>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_MspInit+0x60>)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010000 	.word	0x40010000

08000e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <HAL_TIM_Base_MspInit+0x78>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d114      	bne.n	8000e84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <HAL_TIM_Base_MspInit+0x7c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <HAL_TIM_Base_MspInit+0x7c>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_TIM_Base_MspInit+0x7c>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	201d      	movs	r0, #29
 8000e78:	f000 fb51 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f000 fb6a 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e82:	e018      	b.n	8000eb6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_TIM_Base_MspInit+0x80>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d113      	bne.n	8000eb6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_TIM_Base_MspInit+0x7c>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <HAL_TIM_Base_MspInit+0x7c>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_TIM_Base_MspInit+0x7c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	201e      	movs	r0, #30
 8000eac:	f000 fb37 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000eb0:	201e      	movs	r0, #30
 8000eb2:	f000 fb50 	bl	8001556 <HAL_NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40000400 	.word	0x40000400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40000800 	.word	0x40000800

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a3f      	ldr	r2, [pc, #252]	; (8000fe4 <HAL_UART_MspInit+0x118>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d13a      	bne.n	8000f62 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eec:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a3d      	ldr	r2, [pc, #244]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a37      	ldr	r2, [pc, #220]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	482e      	ldr	r0, [pc, #184]	; (8000fec <HAL_UART_MspInit+0x120>)
 8000f32:	f000 fba1 	bl	8001678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4828      	ldr	r0, [pc, #160]	; (8000fec <HAL_UART_MspInit+0x120>)
 8000f4c:	f000 fb94 	bl	8001678 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2025      	movs	r0, #37	; 0x25
 8000f56:	f000 fae2 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f5a:	2025      	movs	r0, #37	; 0x25
 8000f5c:	f000 fafb 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f60:	e03c      	b.n	8000fdc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <HAL_UART_MspInit+0x124>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d137      	bne.n	8000fdc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f76:	61d3      	str	r3, [r2, #28]
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_UART_MspInit+0x11c>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	4619      	mov	r1, r3
 8000fae:	480f      	ldr	r0, [pc, #60]	; (8000fec <HAL_UART_MspInit+0x120>)
 8000fb0:	f000 fb62 	bl	8001678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0318 	add.w	r3, r7, #24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4809      	ldr	r0, [pc, #36]	; (8000fec <HAL_UART_MspInit+0x120>)
 8000fc8:	f000 fb56 	bl	8001678 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2026      	movs	r0, #38	; 0x26
 8000fd2:	f000 faa4 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fd6:	2026      	movs	r0, #38	; 0x26
 8000fd8:	f000 fabd 	bl	8001556 <HAL_NVIC_EnableIRQ>
}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	; 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40013800 	.word	0x40013800
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103a:	f000 f959 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}

08001042 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001046:	2008      	movs	r0, #8
 8001048:	f000 fcca 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001056:	f000 fe0c 	bl	8001c72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200012e4 	.word	0x200012e4

08001064 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001068:	2020      	movs	r0, #32
 800106a:	f000 fcb9 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <TIM3_IRQHandler+0x10>)
 800107a:	f002 fe05 	bl	8003c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000584 	.word	0x20000584

08001088 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <TIM4_IRQHandler+0x10>)
 800108e:	f002 fdfb 	bl	8003c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000538 	.word	0x20000538

0800109c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <USART1_IRQHandler+0x10>)
 80010a2:	f003 fa7d 	bl	80045a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200005cc 	.word	0x200005cc

080010b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <USART2_IRQHandler+0x10>)
 80010b6:	f003 fa73 	bl	80045a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000060c 	.word	0x2000060c

080010c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
	return 1;
 80010c8:	2301      	movs	r3, #1
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <_kill>:

int _kill(int pid, int sig)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010dc:	f007 fe52 	bl	8008d84 <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2216      	movs	r2, #22
 80010e4:	601a      	str	r2, [r3, #0]
	return -1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_exit>:

void _exit (int status)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010fa:	f04f 31ff 	mov.w	r1, #4294967295
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffe7 	bl	80010d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001104:	e7fe      	b.n	8001104 <_exit+0x12>

08001106 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e00a      	b.n	800112e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001118:	f3af 8000 	nop.w
 800111c:	4601      	mov	r1, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	60ba      	str	r2, [r7, #8]
 8001124:	b2ca      	uxtb	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	429a      	cmp	r2, r3
 8001134:	dbf0      	blt.n	8001118 <_read+0x12>
	}

return len;
 8001136:	687b      	ldr	r3, [r7, #4]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	return -1;
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001166:	605a      	str	r2, [r3, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <_isatty>:

int _isatty(int file)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	return 1;
 800117c:	2301      	movs	r3, #1
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
	return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f007 fdd8 	bl	8008d84 <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20005000 	.word	0x20005000
 8001200:	00000400 	.word	0x00000400
 8001204:	20000308 	.word	0x20000308
 8001208:	200015e0 	.word	0x200015e0

0800120c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001218:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800121a:	e003      	b.n	8001224 <LoopCopyDataInit>

0800121c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800121e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001220:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001222:	3104      	adds	r1, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001224:	480a      	ldr	r0, [pc, #40]	; (8001250 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001228:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800122a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800122c:	d3f6      	bcc.n	800121c <CopyDataInit>
  ldr r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001230:	e002      	b.n	8001238 <LoopFillZerobss>

08001232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001234:	f842 3b04 	str.w	r3, [r2], #4

08001238 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800123a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800123c:	d3f9      	bcc.n	8001232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800123e:	f7ff ffe5 	bl	800120c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001242:	f007 fda5 	bl	8008d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001246:	f7fe ffa5 	bl	8000194 <main>
  bx lr
 800124a:	4770      	bx	lr
  ldr r3, =_sidata
 800124c:	0800a8b0 	.word	0x0800a8b0
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001254:	200001fc 	.word	0x200001fc
  ldr r2, =_sbss
 8001258:	200001fc 	.word	0x200001fc
  ldr r3, = _ebss
 800125c:	200015e0 	.word	0x200015e0

08001260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC1_2_IRQHandler>
	...

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_Init+0x28>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_Init+0x28>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f947 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fdb0 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f95f 	bl	8001572 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 f927 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000001c 	.word	0x2000001c
 80012e8:	20000024 	.word	0x20000024
 80012ec:	20000020 	.word	0x20000020

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_IncTick+0x1c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_IncTick+0x20>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <HAL_IncTick+0x20>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	20000024 	.word	0x20000024
 8001310:	2000064c 	.word	0x2000064c

08001314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b02      	ldr	r3, [pc, #8]	; (8001324 <HAL_GetTick+0x10>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	2000064c 	.word	0x2000064c

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff fff0 	bl	8001314 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_Delay+0x44>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffe0 	bl	8001314 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000024 	.word	0x20000024

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4906      	ldr	r1, [pc, #24]	; (8001408 <__NVIC_EnableIRQ+0x34>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff90 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff2d 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff42 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff90 	bl	8001460 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5f 	bl	800140c <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff35 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d005      	beq.n	80015ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2204      	movs	r2, #4
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e051      	b.n	8001652 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 020e 	bic.w	r2, r2, #14
 80015bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_DMA_Abort_IT+0xd0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d029      	beq.n	800162c <HAL_DMA_Abort_IT+0xa0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a20      	ldr	r2, [pc, #128]	; (8001660 <HAL_DMA_Abort_IT+0xd4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d022      	beq.n	8001628 <HAL_DMA_Abort_IT+0x9c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1f      	ldr	r2, [pc, #124]	; (8001664 <HAL_DMA_Abort_IT+0xd8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d01a      	beq.n	8001622 <HAL_DMA_Abort_IT+0x96>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <HAL_DMA_Abort_IT+0xdc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d012      	beq.n	800161c <HAL_DMA_Abort_IT+0x90>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_DMA_Abort_IT+0xe0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d00a      	beq.n	8001616 <HAL_DMA_Abort_IT+0x8a>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <HAL_DMA_Abort_IT+0xe4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d102      	bne.n	8001610 <HAL_DMA_Abort_IT+0x84>
 800160a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800160e:	e00e      	b.n	800162e <HAL_DMA_Abort_IT+0xa2>
 8001610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001614:	e00b      	b.n	800162e <HAL_DMA_Abort_IT+0xa2>
 8001616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161a:	e008      	b.n	800162e <HAL_DMA_Abort_IT+0xa2>
 800161c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001620:	e005      	b.n	800162e <HAL_DMA_Abort_IT+0xa2>
 8001622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001626:	e002      	b.n	800162e <HAL_DMA_Abort_IT+0xa2>
 8001628:	2310      	movs	r3, #16
 800162a:	e000      	b.n	800162e <HAL_DMA_Abort_IT+0xa2>
 800162c:	2301      	movs	r3, #1
 800162e:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_DMA_Abort_IT+0xe8>)
 8001630:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	4798      	blx	r3
    } 
  }
  return status;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020008 	.word	0x40020008
 8001660:	4002001c 	.word	0x4002001c
 8001664:	40020030 	.word	0x40020030
 8001668:	40020044 	.word	0x40020044
 800166c:	40020058 	.word	0x40020058
 8001670:	4002006c 	.word	0x4002006c
 8001674:	40020000 	.word	0x40020000

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b08b      	sub	sp, #44	; 0x2c
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	e169      	b.n	8001960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800168c:	2201      	movs	r2, #1
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 8158 	bne.w	800195a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a9a      	ldr	r2, [pc, #616]	; (8001918 <HAL_GPIO_Init+0x2a0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d05e      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016b4:	4a98      	ldr	r2, [pc, #608]	; (8001918 <HAL_GPIO_Init+0x2a0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d875      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ba:	4a98      	ldr	r2, [pc, #608]	; (800191c <HAL_GPIO_Init+0x2a4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d058      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016c0:	4a96      	ldr	r2, [pc, #600]	; (800191c <HAL_GPIO_Init+0x2a4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d86f      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016c6:	4a96      	ldr	r2, [pc, #600]	; (8001920 <HAL_GPIO_Init+0x2a8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d052      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016cc:	4a94      	ldr	r2, [pc, #592]	; (8001920 <HAL_GPIO_Init+0x2a8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d869      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016d2:	4a94      	ldr	r2, [pc, #592]	; (8001924 <HAL_GPIO_Init+0x2ac>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d04c      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016d8:	4a92      	ldr	r2, [pc, #584]	; (8001924 <HAL_GPIO_Init+0x2ac>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d863      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016de:	4a92      	ldr	r2, [pc, #584]	; (8001928 <HAL_GPIO_Init+0x2b0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d046      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016e4:	4a90      	ldr	r2, [pc, #576]	; (8001928 <HAL_GPIO_Init+0x2b0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d85d      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d82a      	bhi.n	8001744 <HAL_GPIO_Init+0xcc>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d859      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <HAL_GPIO_Init+0x80>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001773 	.word	0x08001773
 80016fc:	0800174d 	.word	0x0800174d
 8001700:	0800175f 	.word	0x0800175f
 8001704:	080017a1 	.word	0x080017a1
 8001708:	080017a7 	.word	0x080017a7
 800170c:	080017a7 	.word	0x080017a7
 8001710:	080017a7 	.word	0x080017a7
 8001714:	080017a7 	.word	0x080017a7
 8001718:	080017a7 	.word	0x080017a7
 800171c:	080017a7 	.word	0x080017a7
 8001720:	080017a7 	.word	0x080017a7
 8001724:	080017a7 	.word	0x080017a7
 8001728:	080017a7 	.word	0x080017a7
 800172c:	080017a7 	.word	0x080017a7
 8001730:	080017a7 	.word	0x080017a7
 8001734:	080017a7 	.word	0x080017a7
 8001738:	080017a7 	.word	0x080017a7
 800173c:	08001755 	.word	0x08001755
 8001740:	08001769 	.word	0x08001769
 8001744:	4a79      	ldr	r2, [pc, #484]	; (800192c <HAL_GPIO_Init+0x2b4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174a:	e02c      	b.n	80017a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e029      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	3304      	adds	r3, #4
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e024      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	3308      	adds	r3, #8
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e01f      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	330c      	adds	r3, #12
 800176e:	623b      	str	r3, [r7, #32]
          break;
 8001770:	e01a      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177a:	2304      	movs	r3, #4
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e013      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	611a      	str	r2, [r3, #16]
          break;
 8001792:	e009      	b.n	80017a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	615a      	str	r2, [r3, #20]
          break;
 800179e:	e003      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          break;
 80017a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d801      	bhi.n	80017b2 <HAL_GPIO_Init+0x13a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_Init+0x13e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
 80017b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2bff      	cmp	r3, #255	; 0xff
 80017bc:	d802      	bhi.n	80017c4 <HAL_GPIO_Init+0x14c>
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x152>
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3b08      	subs	r3, #8
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	210f      	movs	r1, #15
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	6a39      	ldr	r1, [r7, #32]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80b1 	beq.w	800195a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <HAL_GPIO_Init+0x2b8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a4c      	ldr	r2, [pc, #304]	; (8001930 <HAL_GPIO_Init+0x2b8>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_GPIO_Init+0x2b8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001810:	4a48      	ldr	r2, [pc, #288]	; (8001934 <HAL_GPIO_Init+0x2bc>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a40      	ldr	r2, [pc, #256]	; (8001938 <HAL_GPIO_Init+0x2c0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d013      	beq.n	8001864 <HAL_GPIO_Init+0x1ec>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3f      	ldr	r2, [pc, #252]	; (800193c <HAL_GPIO_Init+0x2c4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00d      	beq.n	8001860 <HAL_GPIO_Init+0x1e8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <HAL_GPIO_Init+0x2c8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d007      	beq.n	800185c <HAL_GPIO_Init+0x1e4>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a3d      	ldr	r2, [pc, #244]	; (8001944 <HAL_GPIO_Init+0x2cc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_GPIO_Init+0x1e0>
 8001854:	2303      	movs	r3, #3
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001858:	2304      	movs	r3, #4
 800185a:	e004      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 800185c:	2302      	movs	r3, #2
 800185e:	e002      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001864:	2300      	movs	r3, #0
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001876:	492f      	ldr	r1, [pc, #188]	; (8001934 <HAL_GPIO_Init+0x2bc>)
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001890:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	492c      	ldr	r1, [pc, #176]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4928      	ldr	r1, [pc, #160]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4922      	ldr	r1, [pc, #136]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	491e      	ldr	r1, [pc, #120]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	4918      	ldr	r1, [pc, #96]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4914      	ldr	r1, [pc, #80]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d021      	beq.n	800194c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
 8001914:	e021      	b.n	800195a <HAL_GPIO_Init+0x2e2>
 8001916:	bf00      	nop
 8001918:	10320000 	.word	0x10320000
 800191c:	10310000 	.word	0x10310000
 8001920:	10220000 	.word	0x10220000
 8001924:	10210000 	.word	0x10210000
 8001928:	10120000 	.word	0x10120000
 800192c:	10110000 	.word	0x10110000
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	40010800 	.word	0x40010800
 800193c:	40010c00 	.word	0x40010c00
 8001940:	40011000 	.word	0x40011000
 8001944:	40011400 	.word	0x40011400
 8001948:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_GPIO_Init+0x304>)
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	43db      	mvns	r3, r3
 8001954:	4909      	ldr	r1, [pc, #36]	; (800197c <HAL_GPIO_Init+0x304>)
 8001956:	4013      	ands	r3, r2
 8001958:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	3301      	adds	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	fa22 f303 	lsr.w	r3, r2, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	f47f ae8e 	bne.w	800168c <HAL_GPIO_Init+0x14>
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	372c      	adds	r7, #44	; 0x2c
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	40010400 	.word	0x40010400

08001980 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	e001      	b.n	80019a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	807b      	strh	r3, [r7, #2]
 80019ba:	4613      	mov	r3, r2
 80019bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019be:	787b      	ldrb	r3, [r7, #1]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c4:	887a      	ldrh	r2, [r7, #2]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019ca:	e003      	b.n	80019d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	041a      	lsls	r2, r3, #16
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	611a      	str	r2, [r3, #16]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f9d0 	bl	8000da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40010400 	.word	0x40010400

08001a10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	b08b      	sub	sp, #44	; 0x2c
 8001a14:	af06      	add	r7, sp, #24
 8001a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0fd      	b.n	8001c1e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f006 fef6 	bl	8008828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2203      	movs	r2, #3
 8001a40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 f8d1 	bl	8004bf0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	687e      	ldr	r6, [r7, #4]
 8001a56:	466d      	mov	r5, sp
 8001a58:	f106 0410 	add.w	r4, r6, #16
 8001a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	602b      	str	r3, [r5, #0]
 8001a64:	1d33      	adds	r3, r6, #4
 8001a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a68:	6838      	ldr	r0, [r7, #0]
 8001a6a:	f003 f89b 	bl	8004ba4 <USB_CoreInit>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0ce      	b.n	8001c1e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f8cc 	bl	8004c24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e04c      	b.n	8001b2c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	b298      	uxth	r0, r3
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	3336      	adds	r3, #54	; 0x36
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	3303      	adds	r3, #3
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001aea:	7bfa      	ldrb	r2, [r7, #15]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	440b      	add	r3, r1
 8001af8:	3338      	adds	r3, #56	; 0x38
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	440b      	add	r3, r1
 8001b0c:	333c      	adds	r3, #60	; 0x3c
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3340      	adds	r3, #64	; 0x40
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d3ad      	bcc.n	8001a92 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	e044      	b.n	8001bc6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	440b      	add	r3, r1
 8001b76:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b7e:	7bfa      	ldrb	r2, [r7, #15]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d3b5      	bcc.n	8001b3c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	687e      	ldr	r6, [r7, #4]
 8001bd8:	466d      	mov	r5, sp
 8001bda:	f106 0410 	add.w	r4, r6, #16
 8001bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	602b      	str	r3, [r5, #0]
 8001be6:	1d33      	adds	r3, r6, #4
 8001be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bea:	6838      	ldr	r0, [r7, #0]
 8001bec:	f003 f826 	bl	8004c3c <USB_DevInit>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00d      	b.n	8001c1e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 ffc0 	bl	8006b9c <USB_DevDisconnect>

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_PCD_Start+0x16>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e016      	b.n	8001c6a <HAL_PCD_Start+0x44>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 ffbb 	bl	8004bc4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001c4e:	2101      	movs	r1, #1
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f007 f85c 	bl	8008d0e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 ff94 	bl	8006b88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b088      	sub	sp, #32
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 ff96 	bl	8006bb0 <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c8e:	d102      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fb61 	bl	8002358 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 ff88 	bl	8006bb0 <USB_ReadInterrupts>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001caa:	d112      	bne.n	8001cd2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f006 fe2a 	bl	800891e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f925 	bl	8001f1c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 ff6a 	bl	8006bb0 <USB_ReadInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ce6:	d10b      	bne.n	8001d00 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f004 ff53 	bl	8006bb0 <USB_ReadInterrupts>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d14:	d10b      	bne.n	8001d2e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 ff3c 	bl	8006bb0 <USB_ReadInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d42:	d126      	bne.n	8001d92 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0204 	bic.w	r2, r2, #4
 8001d56:	b292      	uxth	r2, r2
 8001d58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0208 	bic.w	r2, r2, #8
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f006 fe0b 	bl	8008990 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 ff0a 	bl	8006bb0 <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001da6:	f040 8084 	bne.w	8001eb2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	77fb      	strb	r3, [r7, #31]
 8001dae:	e011      	b.n	8001dd4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	441a      	add	r2, r3
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
 8001dbe:	8812      	ldrh	r2, [r2, #0]
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	f107 0120 	add.w	r1, r7, #32
 8001dc8:	440b      	add	r3, r1
 8001dca:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001dce:	7ffb      	ldrb	r3, [r7, #31]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	77fb      	strb	r3, [r7, #31]
 8001dd4:	7ffb      	ldrb	r3, [r7, #31]
 8001dd6:	2b07      	cmp	r3, #7
 8001dd8:	d9ea      	bls.n	8001db0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	b292      	uxth	r2, r2
 8001dee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0201 	bic.w	r2, r2, #1
 8001e04:	b292      	uxth	r2, r2
 8001e06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001e0a:	bf00      	nop
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f6      	beq.n	8001e0c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e30:	b292      	uxth	r2, r2
 8001e32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	77fb      	strb	r3, [r7, #31]
 8001e3a:	e010      	b.n	8001e5e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001e3c:	7ffb      	ldrb	r3, [r7, #31]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4611      	mov	r1, r2
 8001e44:	7ffa      	ldrb	r2, [r7, #31]
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	440a      	add	r2, r1
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	f107 0120 	add.w	r1, r7, #32
 8001e50:	440b      	add	r3, r1
 8001e52:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001e56:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001e58:	7ffb      	ldrb	r3, [r7, #31]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	77fb      	strb	r3, [r7, #31]
 8001e5e:	7ffb      	ldrb	r3, [r7, #31]
 8001e60:	2b07      	cmp	r3, #7
 8001e62:	d9eb      	bls.n	8001e3c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0208 	orr.w	r2, r2, #8
 8001e76:	b292      	uxth	r2, r2
 8001e78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0204 	orr.w	r2, r2, #4
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f006 fd55 	bl	800895c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 fe7a 	bl	8006bb0 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec6:	d10e      	bne.n	8001ee6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eda:	b292      	uxth	r2, r2
 8001edc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f006 fd0e 	bl	8008902 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f004 fe60 	bl	8006bb0 <USB_ReadInterrupts>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efa:	d10b      	bne.n	8001f14 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f0e:	b292      	uxth	r2, r2
 8001f10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_PCD_SetAddress+0x1a>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e013      	b.n	8001f5e <HAL_PCD_SetAddress+0x42>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 fe07 	bl	8006b62 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	4608      	mov	r0, r1
 8001f70:	4611      	mov	r1, r2
 8001f72:	461a      	mov	r2, r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	70fb      	strb	r3, [r7, #3]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	803b      	strh	r3, [r7, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da0e      	bge.n	8001faa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	705a      	strb	r2, [r3, #1]
 8001fa8:	e00e      	b.n	8001fc8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f003 0207 	and.w	r2, r3, #7
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fd4:	883a      	ldrh	r2, [r7, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	78ba      	ldrb	r2, [r7, #2]
 8001fde:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d004      	beq.n	8001ff2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ff2:	78bb      	ldrb	r3, [r7, #2]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d102      	bne.n	8001ffe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_PCD_EP_Open+0xa6>
 8002008:	2302      	movs	r3, #2
 800200a:	e00e      	b.n	800202a <HAL_PCD_EP_Open+0xc4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68f9      	ldr	r1, [r7, #12]
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fe2e 	bl	8004c7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002028:	7afb      	ldrb	r3, [r7, #11]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800203e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002042:	2b00      	cmp	r3, #0
 8002044:	da0e      	bge.n	8002064 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	705a      	strb	r2, [r3, #1]
 8002062:	e00e      	b.n	8002082 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 0207 	and.w	r2, r3, #7
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_PCD_EP_Close+0x6a>
 8002098:	2302      	movs	r3, #2
 800209a:	e00e      	b.n	80020ba <HAL_PCD_EP_Close+0x88>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68f9      	ldr	r1, [r7, #12]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 f950 	bl	8005350 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	460b      	mov	r3, r1
 80020d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d2:	7afb      	ldrb	r3, [r7, #11]
 80020d4:	f003 0207 	and.w	r2, r3, #7
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2200      	movs	r2, #0
 80020fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2200      	movs	r2, #0
 8002100:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002102:	7afb      	ldrb	r3, [r7, #11]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	b2da      	uxtb	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	2b00      	cmp	r3, #0
 8002116:	d106      	bne.n	8002126 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6979      	ldr	r1, [r7, #20]
 800211e:	4618      	mov	r0, r3
 8002120:	f003 fb02 	bl	8005728 <USB_EPStartXfer>
 8002124:	e005      	b.n	8002132 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	4618      	mov	r0, r3
 800212e:	f003 fafb 	bl	8005728 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 0207 	and.w	r2, r3, #7
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	460b      	mov	r3, r1
 8002178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217a:	7afb      	ldrb	r3, [r7, #11]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4413      	add	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2201      	movs	r2, #1
 80021b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b6:	7afb      	ldrb	r3, [r7, #11]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021c2:	7afb      	ldrb	r3, [r7, #11]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6979      	ldr	r1, [r7, #20]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f003 faa8 	bl	8005728 <USB_EPStartXfer>
 80021d8:	e005      	b.n	80021e6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6979      	ldr	r1, [r7, #20]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 faa1 	bl	8005728 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 0207 	and.w	r2, r3, #7
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	d901      	bls.n	800220e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e04c      	b.n	80022a8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800220e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da0e      	bge.n	8002234 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	705a      	strb	r2, [r3, #1]
 8002232:	e00c      	b.n	800224e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	b2da      	uxtb	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_PCD_EP_SetStall+0x7e>
 800226a:	2302      	movs	r3, #2
 800226c:	e01c      	b.n	80022a8 <HAL_PCD_EP_SetStall+0xb8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68f9      	ldr	r1, [r7, #12]
 800227c:	4618      	mov	r0, r3
 800227e:	f004 fb73 	bl	8006968 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f004 fc98 	bl	8006bce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 020f 	and.w	r2, r3, #15
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d901      	bls.n	80022ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e040      	b.n	8002350 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da0e      	bge.n	80022f4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	705a      	strb	r2, [r3, #1]
 80022f2:	e00e      	b.n	8002312 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 0207 	and.w	r2, r3, #7
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	b2da      	uxtb	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_PCD_EP_ClrStall+0x82>
 800232e:	2302      	movs	r3, #2
 8002330:	e00e      	b.n	8002350 <HAL_PCD_EP_ClrStall+0xa0>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68f9      	ldr	r1, [r7, #12]
 8002340:	4618      	mov	r0, r3
 8002342:	f004 fb61 	bl	8006a08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08e      	sub	sp, #56	; 0x38
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002360:	e2df      	b.n	8002922 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800236a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800236c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002378:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 8158 	bne.w	8002632 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002382:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d152      	bne.n	8002432 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239c:	81fb      	strh	r3, [r7, #14]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	89fb      	ldrh	r3, [r7, #14]
 80023a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3328      	adds	r3, #40	; 0x28
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	3302      	adds	r3, #2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	441a      	add	r2, r3
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023f0:	2100      	movs	r1, #0
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f006 fa6b 	bl	80088ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 828e 	beq.w	8002922 <PCD_EP_ISR_Handler+0x5ca>
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8289 	bne.w	8002922 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800241c:	b2da      	uxtb	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	b292      	uxth	r2, r2
 8002424:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002430:	e277      	b.n	8002922 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002442:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002448:	2b00      	cmp	r3, #0
 800244a:	d034      	beq.n	80024b6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002454:	b29b      	uxth	r3, r3
 8002456:	461a      	mov	r2, r3
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	3306      	adds	r3, #6
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800248a:	b29b      	uxth	r3, r3
 800248c:	f004 fbef 	bl	8006c6e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	b29a      	uxth	r2, r3
 8002498:	f640 738f 	movw	r3, #3983	; 0xf8f
 800249c:	4013      	ands	r3, r2
 800249e:	823b      	strh	r3, [r7, #16]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	8a3a      	ldrh	r2, [r7, #16]
 80024a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024aa:	b292      	uxth	r2, r2
 80024ac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f006 f9e0 	bl	8008874 <HAL_PCD_SetupStageCallback>
 80024b4:	e235      	b.n	8002922 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024b6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f280 8231 	bge.w	8002922 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024cc:	4013      	ands	r3, r2
 80024ce:	83bb      	strh	r3, [r7, #28]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	8bba      	ldrh	r2, [r7, #28]
 80024d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024da:	b292      	uxth	r2, r2
 80024dc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	3306      	adds	r3, #6
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d019      	beq.n	8002546 <PCD_EP_ISR_Handler+0x1ee>
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	6959      	ldr	r1, [r3, #20]
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800252a:	b29b      	uxth	r3, r3
 800252c:	f004 fb9f 	bl	8006c6e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	441a      	add	r2, r3
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800253e:	2100      	movs	r1, #0
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f006 f9a9 	bl	8008898 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4413      	add	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d112      	bne.n	8002594 <PCD_EP_ISR_Handler+0x23c>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002578:	b29a      	uxth	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800258c:	b29a      	uxth	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e02f      	b.n	80025f4 <PCD_EP_ISR_Handler+0x29c>
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b3e      	cmp	r3, #62	; 0x3e
 800259a:	d813      	bhi.n	80025c4 <PCD_EP_ISR_Handler+0x26c>
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	085b      	lsrs	r3, r3, #1
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <PCD_EP_ISR_Handler+0x25e>
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	3301      	adds	r3, #1
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	029b      	lsls	r3, r3, #10
 80025bc:	b29a      	uxth	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	801a      	strh	r2, [r3, #0]
 80025c2:	e017      	b.n	80025f4 <PCD_EP_ISR_Handler+0x29c>
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <PCD_EP_ISR_Handler+0x286>
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	3b01      	subs	r3, #1
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	029b      	lsls	r3, r3, #10
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002604:	827b      	strh	r3, [r7, #18]
 8002606:	8a7b      	ldrh	r3, [r7, #18]
 8002608:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800260c:	827b      	strh	r3, [r7, #18]
 800260e:	8a7b      	ldrh	r3, [r7, #18]
 8002610:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002614:	827b      	strh	r3, [r7, #18]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	8a7b      	ldrh	r3, [r7, #18]
 800261c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262c:	b29b      	uxth	r3, r3
 800262e:	8013      	strh	r3, [r2, #0]
 8002630:	e177      	b.n	8002922 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002644:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002648:	2b00      	cmp	r3, #0
 800264a:	f280 80ea 	bge.w	8002822 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29a      	uxth	r2, r3
 8002660:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002664:	4013      	ands	r3, r2
 8002666:	853b      	strh	r3, [r7, #40]	; 0x28
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002678:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800267c:	b292      	uxth	r2, r2
 800267e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002680:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	7b1b      	ldrb	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d122      	bne.n	80026e4 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	3306      	adds	r3, #6
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80026c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8087 	beq.w	80027de <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	6959      	ldr	r1, [r3, #20]
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	88da      	ldrh	r2, [r3, #6]
 80026dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026de:	f004 fac6 	bl	8006c6e <USB_ReadPMA>
 80026e2:	e07c      	b.n	80027de <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	78db      	ldrb	r3, [r3, #3]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d108      	bne.n	80026fe <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ee:	461a      	mov	r2, r3
 80026f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f923 	bl	800293e <HAL_PCD_EP_DB_Receive>
 80026f8:	4603      	mov	r3, r0
 80026fa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026fc:	e06f      	b.n	80027de <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002718:	847b      	strh	r3, [r7, #34]	; 0x22
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	441a      	add	r2, r3
 8002728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800272a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800272e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002736:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800273a:	b29b      	uxth	r3, r3
 800273c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d021      	beq.n	800279c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	3302      	adds	r3, #2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002780:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002782:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002784:	2b00      	cmp	r3, #0
 8002786:	d02a      	beq.n	80027de <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	6959      	ldr	r1, [r3, #20]
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	891a      	ldrh	r2, [r3, #8]
 8002794:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002796:	f004 fa6a 	bl	8006c6e <USB_ReadPMA>
 800279a:	e020      	b.n	80027de <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	3306      	adds	r3, #6
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80027c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	6959      	ldr	r1, [r3, #20]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	895a      	ldrh	r2, [r3, #10]
 80027d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027da:	f004 fa48 	bl	8006c6e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027e4:	441a      	add	r2, r3
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027f0:	441a      	add	r2, r3
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d004      	beq.n	8002808 <PCD_EP_ISR_Handler+0x4b0>
 80027fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d206      	bcs.n	8002816 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f006 f842 	bl	8008898 <HAL_PCD_DataOutStageCallback>
 8002814:	e005      	b.n	8002822 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281c:	4618      	mov	r0, r3
 800281e:	f002 ff83 	bl	8005728 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002822:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b00      	cmp	r3, #0
 800282a:	d07a      	beq.n	8002922 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800282c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285a:	843b      	strh	r3, [r7, #32]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	8c3b      	ldrh	r3, [r7, #32]
 800286c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002874:	b29b      	uxth	r3, r3
 8002876:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	78db      	ldrb	r3, [r3, #3]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d108      	bne.n	8002892 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002884:	2b02      	cmp	r3, #2
 8002886:	d146      	bne.n	8002916 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002888:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d141      	bne.n	8002916 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	3302      	adds	r3, #2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ba:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	8bfb      	ldrh	r3, [r7, #30]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d906      	bls.n	80028d4 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	8bfb      	ldrh	r3, [r7, #30]
 80028cc:	1ad2      	subs	r2, r2, r3
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	619a      	str	r2, [r3, #24]
 80028d2:	e002      	b.n	80028da <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f005 fff0 	bl	80088ce <HAL_PCD_DataInStageCallback>
 80028ee:	e018      	b.n	8002922 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	8bfb      	ldrh	r3, [r7, #30]
 80028f6:	441a      	add	r2, r3
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	8bfb      	ldrh	r3, [r7, #30]
 8002902:	441a      	add	r2, r3
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290e:	4618      	mov	r0, r3
 8002910:	f002 ff0a 	bl	8005728 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002914:	e005      	b.n	8002922 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002916:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002918:	461a      	mov	r2, r3
 800291a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f91b 	bl	8002b58 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800292a:	b29b      	uxth	r3, r3
 800292c:	b21b      	sxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	f6ff ad17 	blt.w	8002362 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3738      	adds	r7, #56	; 0x38
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b088      	sub	sp, #32
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	4613      	mov	r3, r2
 800294a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d07e      	beq.n	8002a54 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800295e:	b29b      	uxth	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	3302      	adds	r3, #2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	4413      	add	r3, r2
 8002974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	8b7b      	ldrh	r3, [r7, #26]
 8002986:	429a      	cmp	r2, r3
 8002988:	d306      	bcc.n	8002998 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	8b7b      	ldrh	r3, [r7, #26]
 8002990:	1ad2      	subs	r2, r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	619a      	str	r2, [r3, #24]
 8002996:	e002      	b.n	800299e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d123      	bne.n	80029ee <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c0:	833b      	strh	r3, [r7, #24]
 80029c2:	8b3b      	ldrh	r3, [r7, #24]
 80029c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029c8:	833b      	strh	r3, [r7, #24]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	441a      	add	r2, r3
 80029d8:	8b3b      	ldrh	r3, [r7, #24]
 80029da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01f      	beq.n	8002a38 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	82fb      	strh	r3, [r7, #22]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	441a      	add	r2, r3
 8002a22:	8afb      	ldrh	r3, [r7, #22]
 8002a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a38:	8b7b      	ldrh	r3, [r7, #26]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8087 	beq.w	8002b4e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6959      	ldr	r1, [r3, #20]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	891a      	ldrh	r2, [r3, #8]
 8002a4c:	8b7b      	ldrh	r3, [r7, #26]
 8002a4e:	f004 f90e 	bl	8006c6e <USB_ReadPMA>
 8002a52:	e07c      	b.n	8002b4e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	3306      	adds	r3, #6
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	8b7b      	ldrh	r3, [r7, #26]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d306      	bcc.n	8002a96 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	699a      	ldr	r2, [r3, #24]
 8002a8c:	8b7b      	ldrh	r3, [r7, #26]
 8002a8e:	1ad2      	subs	r2, r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	619a      	str	r2, [r3, #24]
 8002a94:	e002      	b.n	8002a9c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d123      	bne.n	8002aec <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	83fb      	strh	r3, [r7, #30]
 8002ac0:	8bfb      	ldrh	r3, [r7, #30]
 8002ac2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ac6:	83fb      	strh	r3, [r7, #30]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	441a      	add	r2, r3
 8002ad6:	8bfb      	ldrh	r3, [r7, #30]
 8002ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11f      	bne.n	8002b36 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b10:	83bb      	strh	r3, [r7, #28]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	8bbb      	ldrh	r3, [r7, #28]
 8002b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b36:	8b7b      	ldrh	r3, [r7, #26]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6959      	ldr	r1, [r3, #20]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	895a      	ldrh	r2, [r3, #10]
 8002b48:	8b7b      	ldrh	r3, [r7, #26]
 8002b4a:	f004 f890 	bl	8006c6e <USB_ReadPMA>
    }
  }

  return count;
 8002b4e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b094      	sub	sp, #80	; 0x50
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	4613      	mov	r3, r2
 8002b64:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8138 	beq.w	8002de2 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	3302      	adds	r3, #2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b9a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d907      	bls.n	8002bba <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bb2:	1ad2      	subs	r2, r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	619a      	str	r2, [r3, #24]
 8002bb8:	e002      	b.n	8002bc0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d12c      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f005 fe7d 	bl	80088ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 823a 	beq.w	8003054 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	82fb      	strh	r3, [r7, #22]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	8afb      	ldrh	r3, [r7, #22]
 8002c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	8013      	strh	r3, [r2, #0]
 8002c20:	e218      	b.n	8003054 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01f      	beq.n	8002c6c <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	441a      	add	r2, r3
 8002c56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	f040 81ee 	bne.w	8003054 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c80:	441a      	add	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c8e:	441a      	add	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d309      	bcc.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	6a1a      	ldr	r2, [r3, #32]
 8002caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cac:	1ad2      	subs	r2, r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	621a      	str	r2, [r3, #32]
 8002cb2:	e015      	b.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d107      	bne.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002cbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cc0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cca:	e009      	b.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d155      	bne.n	8002d94 <HAL_PCD_EP_DB_Transmit+0x23c>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	011a      	lsls	r2, r3, #4
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d112      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	801a      	strh	r2, [r3, #0]
 8002d3a:	e047      	b.n	8002dcc <HAL_PCD_EP_DB_Transmit+0x274>
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d3e:	2b3e      	cmp	r3, #62	; 0x3e
 8002d40:	d811      	bhi.n	8002d66 <HAL_PCD_EP_DB_Transmit+0x20e>
 8002d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d44:	085b      	lsrs	r3, r3, #1
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_PCD_EP_DB_Transmit+0x200>
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	3301      	adds	r3, #1
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	029b      	lsls	r3, r3, #10
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	801a      	strh	r2, [r3, #0]
 8002d64:	e032      	b.n	8002dcc <HAL_PCD_EP_DB_Transmit+0x274>
 8002d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x224>
 8002d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	029b      	lsls	r3, r3, #10
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	801a      	strh	r2, [r3, #0]
 8002d92:	e01b      	b.n	8002dcc <HAL_PCD_EP_DB_Transmit+0x274>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	785b      	ldrb	r3, [r3, #1]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d117      	bne.n	8002dcc <HAL_PCD_EP_DB_Transmit+0x274>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	4413      	add	r3, r2
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	011a      	lsls	r2, r3, #4
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dc2:	623b      	str	r3, [r7, #32]
 8002dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6959      	ldr	r1, [r3, #20]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	891a      	ldrh	r2, [r3, #8]
 8002dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f003 ff02 	bl	8006be4 <USB_WritePMA>
 8002de0:	e138      	b.n	8003054 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4413      	add	r3, r2
 8002df6:	3306      	adds	r3, #6
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e0a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d307      	bcc.n	8002e2a <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e22:	1ad2      	subs	r2, r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	619a      	str	r2, [r3, #24]
 8002e28:	e002      	b.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d12e      	bne.n	8002e96 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f005 fd45 	bl	80088ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f040 8102 	bne.w	8003054 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	8013      	strh	r3, [r2, #0]
 8002e94:	e0de      	b.n	8003054 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11f      	bne.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	867b      	strh	r3, [r7, #50]	; 0x32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	f040 80b4 	bne.w	8003054 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ef4:	441a      	add	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f02:	441a      	add	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	6a1a      	ldr	r2, [r3, #32]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d309      	bcc.n	8002f28 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6a1a      	ldr	r2, [r3, #32]
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f20:	1ad2      	subs	r2, r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	621a      	str	r2, [r3, #32]
 8002f26:	e015      	b.n	8002f54 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d107      	bne.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002f30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f34:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f3e:	e009      	b.n	8002f54 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	643b      	str	r3, [r7, #64]	; 0x40
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	785b      	ldrb	r3, [r3, #1]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d155      	bne.n	800300e <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f76:	4413      	add	r3, r2
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	011a      	lsls	r2, r3, #4
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	4413      	add	r3, r2
 8002f84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d112      	bne.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb2:	801a      	strh	r2, [r3, #0]
 8002fb4:	e044      	b.n	8003040 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8002fba:	d811      	bhi.n	8002fe0 <HAL_PCD_EP_DB_Transmit+0x488>
 8002fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fce:	3301      	adds	r3, #1
 8002fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	029b      	lsls	r3, r3, #10
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fdc:	801a      	strh	r2, [r3, #0]
 8002fde:	e02f      	b.n	8003040 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x49e>
 8002ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	029b      	lsls	r3, r3, #10
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003006:	b29a      	uxth	r2, r3
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	801a      	strh	r2, [r3, #0]
 800300c:	e018      	b.n	8003040 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	785b      	ldrb	r3, [r3, #1]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d114      	bne.n	8003040 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301e:	b29b      	uxth	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003024:	4413      	add	r3, r2
 8003026:	643b      	str	r3, [r7, #64]	; 0x40
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	011a      	lsls	r2, r3, #4
 800302e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003030:	4413      	add	r3, r2
 8003032:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303a:	b29a      	uxth	r2, r3
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	6959      	ldr	r1, [r3, #20]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	895a      	ldrh	r2, [r3, #10]
 800304c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304e:	b29b      	uxth	r3, r3
 8003050:	f003 fdc8 	bl	8006be4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800306e:	82bb      	strh	r3, [r7, #20]
 8003070:	8abb      	ldrh	r3, [r7, #20]
 8003072:	f083 0310 	eor.w	r3, r3, #16
 8003076:	82bb      	strh	r3, [r7, #20]
 8003078:	8abb      	ldrh	r3, [r7, #20]
 800307a:	f083 0320 	eor.w	r3, r3, #32
 800307e:	82bb      	strh	r3, [r7, #20]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	8abb      	ldrh	r3, [r7, #20]
 8003090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3750      	adds	r7, #80	; 0x50
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b087      	sub	sp, #28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	817b      	strh	r3, [r7, #10]
 80030bc:	4613      	mov	r3, r2
 80030be:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80030c0:	897b      	ldrh	r3, [r7, #10]
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030cc:	897b      	ldrh	r3, [r7, #10]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e009      	b.n	80030f8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030e4:	897a      	ldrh	r2, [r7, #10]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d107      	bne.n	800310e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	b29a      	uxth	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	80da      	strh	r2, [r3, #6]
 800310c:	e00b      	b.n	8003126 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2201      	movs	r2, #1
 8003112:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	b29a      	uxth	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0c1b      	lsrs	r3, r3, #16
 8003120:	b29a      	uxth	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
	...

08003134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e26c      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8087 	beq.w	8003262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003154:	4b92      	ldr	r3, [pc, #584]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b04      	cmp	r3, #4
 800315e:	d00c      	beq.n	800317a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003160:	4b8f      	ldr	r3, [pc, #572]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d112      	bne.n	8003192 <HAL_RCC_OscConfig+0x5e>
 800316c:	4b8c      	ldr	r3, [pc, #560]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d10b      	bne.n	8003192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317a:	4b89      	ldr	r3, [pc, #548]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d06c      	beq.n	8003260 <HAL_RCC_OscConfig+0x12c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d168      	bne.n	8003260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e246      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x76>
 800319c:	4b80      	ldr	r3, [pc, #512]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a7f      	ldr	r2, [pc, #508]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	e02e      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x98>
 80031b2:	4b7b      	ldr	r3, [pc, #492]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7a      	ldr	r2, [pc, #488]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a77      	ldr	r2, [pc, #476]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e01d      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0xbc>
 80031d6:	4b72      	ldr	r3, [pc, #456]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a71      	ldr	r2, [pc, #452]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a6e      	ldr	r2, [pc, #440]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0xd4>
 80031f0:	4b6b      	ldr	r3, [pc, #428]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a6a      	ldr	r2, [pc, #424]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b68      	ldr	r3, [pc, #416]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a67      	ldr	r2, [pc, #412]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe f880 	bl	8001314 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe f87c 	bl	8001314 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1fa      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b5d      	ldr	r3, [pc, #372]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0xe4>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fe f86c 	bl	8001314 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003240:	f7fe f868 	bl	8001314 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1e6      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x10c>
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800326e:	4b4c      	ldr	r3, [pc, #304]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800327a:	4b49      	ldr	r3, [pc, #292]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x18c>
 8003286:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x176>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e1ba      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4939      	ldr	r1, [pc, #228]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	e03a      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_RCC_OscConfig+0x270>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fe f821 	bl	8001314 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d6:	f7fe f81d 	bl	8001314 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e19b      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4927      	ldr	r1, [pc, #156]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
 8003308:	e015      	b.n	8003336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330a:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <HAL_RCC_OscConfig+0x270>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe f800 	bl	8001314 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003318:	f7fd fffc 	bl	8001314 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e17a      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d03a      	beq.n	80033b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d019      	beq.n	800337e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <HAL_RCC_OscConfig+0x274>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003350:	f7fd ffe0 	bl	8001314 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003358:	f7fd ffdc 	bl	8001314 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e15a      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_RCC_OscConfig+0x26c>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003376:	2001      	movs	r0, #1
 8003378:	f000 fb10 	bl	800399c <RCC_Delay>
 800337c:	e01c      	b.n	80033b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RCC_OscConfig+0x274>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7fd ffc6 	bl	8001314 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338a:	e00f      	b.n	80033ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338c:	f7fd ffc2 	bl	8001314 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d908      	bls.n	80033ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e140      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	42420000 	.word	0x42420000
 80033a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	4b9e      	ldr	r3, [pc, #632]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e9      	bne.n	800338c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a6 	beq.w	8003512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ca:	4b97      	ldr	r3, [pc, #604]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b94      	ldr	r3, [pc, #592]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4a93      	ldr	r2, [pc, #588]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	61d3      	str	r3, [r2, #28]
 80033e2:	4b91      	ldr	r3, [pc, #580]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f2:	4b8e      	ldr	r3, [pc, #568]	; (800362c <HAL_RCC_OscConfig+0x4f8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d118      	bne.n	8003430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033fe:	4b8b      	ldr	r3, [pc, #556]	; (800362c <HAL_RCC_OscConfig+0x4f8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a8a      	ldr	r2, [pc, #552]	; (800362c <HAL_RCC_OscConfig+0x4f8>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340a:	f7fd ff83 	bl	8001314 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7fd ff7f 	bl	8001314 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b64      	cmp	r3, #100	; 0x64
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0fd      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003424:	4b81      	ldr	r3, [pc, #516]	; (800362c <HAL_RCC_OscConfig+0x4f8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x312>
 8003438:	4b7b      	ldr	r3, [pc, #492]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a7a      	ldr	r2, [pc, #488]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	e02d      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x334>
 800344e:	4b76      	ldr	r3, [pc, #472]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	4a75      	ldr	r2, [pc, #468]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	6213      	str	r3, [r2, #32]
 800345a:	4b73      	ldr	r3, [pc, #460]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a72      	ldr	r2, [pc, #456]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	6213      	str	r3, [r2, #32]
 8003466:	e01c      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b05      	cmp	r3, #5
 800346e:	d10c      	bne.n	800348a <HAL_RCC_OscConfig+0x356>
 8003470:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4a6c      	ldr	r2, [pc, #432]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6213      	str	r3, [r2, #32]
 800347c:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4a69      	ldr	r2, [pc, #420]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6213      	str	r3, [r2, #32]
 8003488:	e00b      	b.n	80034a2 <HAL_RCC_OscConfig+0x36e>
 800348a:	4b67      	ldr	r3, [pc, #412]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	4a66      	ldr	r2, [pc, #408]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	6213      	str	r3, [r2, #32]
 8003496:	4b64      	ldr	r3, [pc, #400]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a63      	ldr	r2, [pc, #396]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	f023 0304 	bic.w	r3, r3, #4
 80034a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d015      	beq.n	80034d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7fd ff33 	bl	8001314 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fd ff2f 	bl	8001314 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e0ab      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c8:	4b57      	ldr	r3, [pc, #348]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ee      	beq.n	80034b2 <HAL_RCC_OscConfig+0x37e>
 80034d4:	e014      	b.n	8003500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d6:	f7fd ff1d 	bl	8001314 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fd ff19 	bl	8001314 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e095      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f4:	4b4c      	ldr	r3, [pc, #304]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003506:	4b48      	ldr	r3, [pc, #288]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4a47      	ldr	r2, [pc, #284]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800350c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8081 	beq.w	800361e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800351c:	4b42      	ldr	r3, [pc, #264]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d061      	beq.n	80035ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d146      	bne.n	80035be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003530:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_RCC_OscConfig+0x4fc>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003536:	f7fd feed 	bl	8001314 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fd fee9 	bl	8001314 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e067      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d108      	bne.n	8003578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003566:	4b30      	ldr	r3, [pc, #192]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	492d      	ldr	r1, [pc, #180]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a19      	ldr	r1, [r3, #32]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	430b      	orrs	r3, r1
 800358a:	4927      	ldr	r1, [pc, #156]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <HAL_RCC_OscConfig+0x4fc>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fd febd 	bl	8001314 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359e:	f7fd feb9 	bl	8001314 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e037      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x46a>
 80035bc:	e02f      	b.n	800361e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <HAL_RCC_OscConfig+0x4fc>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd fea6 	bl	8001314 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fd fea2 	bl	8001314 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e020      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035de:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x498>
 80035ea:	e018      	b.n	800361e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e013      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	429a      	cmp	r2, r3
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
 8003630:	42420060 	.word	0x42420060

08003634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0d0      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d910      	bls.n	8003678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b67      	ldr	r3, [pc, #412]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 0207 	bic.w	r2, r3, #7
 800365e:	4965      	ldr	r1, [pc, #404]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b63      	ldr	r3, [pc, #396]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0b8      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d020      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003690:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4a58      	ldr	r2, [pc, #352]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800369a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a8:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a52      	ldr	r2, [pc, #328]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b4:	4b50      	ldr	r3, [pc, #320]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	494d      	ldr	r1, [pc, #308]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d040      	beq.n	8003754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d115      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07f      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e073      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3d      	ldr	r3, [pc, #244]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06b      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4936      	ldr	r1, [pc, #216]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003724:	f7fd fdf6 	bl	8001314 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fd fdf2 	bl	8001314 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e053      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d210      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f023 0207 	bic.w	r2, r3, #7
 800376a:	4922      	ldr	r1, [pc, #136]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e032      	b.n	80037ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4916      	ldr	r1, [pc, #88]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	490e      	ldr	r1, [pc, #56]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037c2:	f000 f859 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 80037c6:	4602      	mov	r2, r0
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	490a      	ldr	r1, [pc, #40]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	5ccb      	ldrb	r3, [r1, r3]
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	4a09      	ldr	r2, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1cc>)
 80037dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037de:	4b09      	ldr	r3, [pc, #36]	; (8003804 <HAL_RCC_ClockConfig+0x1d0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd fd54 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40022000 	.word	0x40022000
 80037f8:	40021000 	.word	0x40021000
 80037fc:	0800a640 	.word	0x0800a640
 8003800:	2000001c 	.word	0x2000001c
 8003804:	20000020 	.word	0x20000020

08003808 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003814:	f107 0318 	add.w	r3, r7, #24
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003826:	2303      	movs	r3, #3
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800382e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003832:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_RCC_MCOConfig+0x68>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <HAL_RCC_MCOConfig+0x68>)
 800383a:	f043 0304 	orr.w	r3, r3, #4
 800383e:	6193      	str	r3, [r2, #24]
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_MCOConfig+0x68>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800384c:	f107 0318 	add.w	r3, r7, #24
 8003850:	4619      	mov	r1, r3
 8003852:	4808      	ldr	r0, [pc, #32]	; (8003874 <HAL_RCC_MCOConfig+0x6c>)
 8003854:	f7fd ff10 	bl	8001678 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_MCOConfig+0x68>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <HAL_RCC_MCOConfig+0x68>)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
}
 8003868:	bf00      	nop
 800386a:	3728      	adds	r7, #40	; 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	40010800 	.word	0x40010800

08003878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	b490      	push	{r4, r7}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003880:	1d3c      	adds	r4, r7, #4
 8003882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003888:	f240 2301 	movw	r3, #513	; 0x201
 800388c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_RCC_GetSysClockFreq+0xb4>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x40>
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d003      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0x46>
 80038b6:	e02d      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ba:	623b      	str	r3, [r7, #32]
      break;
 80038bc:	e02d      	b.n	800391a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	0c9b      	lsrs	r3, r3, #18
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038ca:	4413      	add	r3, r2
 80038cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038dc:	4b13      	ldr	r3, [pc, #76]	; (800392c <HAL_RCC_GetSysClockFreq+0xb4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	0c5b      	lsrs	r3, r3, #17
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038ea:	4413      	add	r3, r2
 80038ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f6:	fb02 f203 	mul.w	r2, r2, r3
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	e004      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003908:	fb02 f303 	mul.w	r3, r2, r3
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	623b      	str	r3, [r7, #32]
      break;
 8003912:	e002      	b.n	800391a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003916:	623b      	str	r3, [r7, #32]
      break;
 8003918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800391a:	6a3b      	ldr	r3, [r7, #32]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3728      	adds	r7, #40	; 0x28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc90      	pop	{r4, r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	0800a5e8 	.word	0x0800a5e8
 800392c:	40021000 	.word	0x40021000
 8003930:	007a1200 	.word	0x007a1200
 8003934:	003d0900 	.word	0x003d0900

08003938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b02      	ldr	r3, [pc, #8]	; (8003948 <HAL_RCC_GetHCLKFreq+0x10>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	2000001c 	.word	0x2000001c

0800394c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003950:	f7ff fff2 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	4903      	ldr	r1, [pc, #12]	; (8003970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	0800a650 	.word	0x0800a650

08003974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003978:	f7ff ffde 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	0adb      	lsrs	r3, r3, #11
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	0800a650 	.word	0x0800a650

0800399c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <RCC_Delay+0x34>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <RCC_Delay+0x38>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	0a5b      	lsrs	r3, r3, #9
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039b8:	bf00      	nop
  }
  while (Delay --);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1e5a      	subs	r2, r3, #1
 80039be:	60fa      	str	r2, [r7, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f9      	bne.n	80039b8 <RCC_Delay+0x1c>
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	2000001c 	.word	0x2000001c
 80039d4:	10624dd3 	.word	0x10624dd3

080039d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d07d      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f8:	4b4f      	ldr	r3, [pc, #316]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10d      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a04:	4b4c      	ldr	r3, [pc, #304]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	4a4b      	ldr	r2, [pc, #300]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	61d3      	str	r3, [r2, #28]
 8003a10:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	4b46      	ldr	r3, [pc, #280]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d118      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2c:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a42      	ldr	r2, [pc, #264]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a38:	f7fd fc6c 	bl	8001314 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3e:	e008      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a40:	f7fd fc68 	bl	8001314 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e06d      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a52:	4b3a      	ldr	r3, [pc, #232]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a5e:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d02e      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d027      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7c:	4b2e      	ldr	r3, [pc, #184]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a86:	4b2e      	ldr	r3, [pc, #184]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8c:	4b2c      	ldr	r3, [pc, #176]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a92:	4a29      	ldr	r2, [pc, #164]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d014      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fd fc37 	bl	8001314 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fd fc33 	bl	8001314 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e036      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0ee      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4917      	ldr	r1, [pc, #92]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ade:	7dfb      	ldrb	r3, [r7, #23]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae4:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	490b      	ldr	r1, [pc, #44]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	4904      	ldr	r1, [pc, #16]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	42420440 	.word	0x42420440

08003b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e041      	b.n	8003bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd f96c 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f000 fa70 	bl	8004068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d001      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e03a      	b.n	8003c72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <HAL_TIM_Base_Start_IT+0x98>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00e      	beq.n	8003c3c <HAL_TIM_Base_Start_IT+0x58>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d009      	beq.n	8003c3c <HAL_TIM_Base_Start_IT+0x58>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d004      	beq.n	8003c3c <HAL_TIM_Base_Start_IT+0x58>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d111      	bne.n	8003c60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b06      	cmp	r3, #6
 8003c4c:	d010      	beq.n	8003c70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5e:	e007      	b.n	8003c70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800

08003c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d122      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d11b      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0202 	mvn.w	r2, #2
 8003cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f9b1 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003cd0:	e005      	b.n	8003cde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f9a4 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f9b3 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d122      	bne.n	8003d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d11b      	bne.n	8003d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0204 	mvn.w	r2, #4
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f987 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f97a 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f989 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d122      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d11b      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0208 	mvn.w	r2, #8
 8003d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2204      	movs	r2, #4
 8003d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f95d 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f950 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f95f 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d122      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d11b      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0210 	mvn.w	r2, #16
 8003db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2208      	movs	r2, #8
 8003db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f933 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003dcc:	e005      	b.n	8003dda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f926 	bl	8004020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f935 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10e      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d107      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0201 	mvn.w	r2, #1
 8003e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fc ffa8 	bl	8000d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b80      	cmp	r3, #128	; 0x80
 8003e18:	d10e      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b80      	cmp	r3, #128	; 0x80
 8003e26:	d107      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa77 	bl	8004326 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d10e      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f8f9 	bl	8004056 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d10e      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d107      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0220 	mvn.w	r2, #32
 8003e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa42 	bl	8004314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIM_ConfigClockSource+0x18>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e0b3      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x180>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee8:	d03e      	beq.n	8003f68 <HAL_TIM_ConfigClockSource+0xd0>
 8003eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eee:	f200 8087 	bhi.w	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef6:	f000 8085 	beq.w	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efe:	d87f      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f00:	2b70      	cmp	r3, #112	; 0x70
 8003f02:	d01a      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0xa2>
 8003f04:	2b70      	cmp	r3, #112	; 0x70
 8003f06:	d87b      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f08:	2b60      	cmp	r3, #96	; 0x60
 8003f0a:	d050      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x116>
 8003f0c:	2b60      	cmp	r3, #96	; 0x60
 8003f0e:	d877      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f10:	2b50      	cmp	r3, #80	; 0x50
 8003f12:	d03c      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0xf6>
 8003f14:	2b50      	cmp	r3, #80	; 0x50
 8003f16:	d873      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d058      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x136>
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d86f      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f20:	2b30      	cmp	r3, #48	; 0x30
 8003f22:	d064      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x156>
 8003f24:	2b30      	cmp	r3, #48	; 0x30
 8003f26:	d86b      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d060      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x156>
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d867      	bhi.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d05c      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x156>
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d05a      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f38:	e062      	b.n	8004000 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6899      	ldr	r1, [r3, #8]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f000 f966 	bl	800421a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	609a      	str	r2, [r3, #8]
      break;
 8003f66:	e04e      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	6899      	ldr	r1, [r3, #8]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f000 f94f 	bl	800421a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f8a:	609a      	str	r2, [r3, #8]
      break;
 8003f8c:	e03b      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6859      	ldr	r1, [r3, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f000 f8c6 	bl	800412c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2150      	movs	r1, #80	; 0x50
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f91d 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 8003fac:	e02b      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 f8e4 	bl	8004188 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2160      	movs	r1, #96	; 0x60
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f90d 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e01b      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 f8a6 	bl	800412c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2140      	movs	r1, #64	; 0x40
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f8fd 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 8003fec:	e00b      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f000 f8f4 	bl	80041e6 <TIM_ITRx_SetConfig>
        break;
 8003ffe:	e002      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004000:	bf00      	nop
 8004002:	e000      	b.n	8004006 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004004:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a29      	ldr	r2, [pc, #164]	; (8004120 <TIM_Base_SetConfig+0xb8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00b      	beq.n	8004098 <TIM_Base_SetConfig+0x30>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d007      	beq.n	8004098 <TIM_Base_SetConfig+0x30>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a26      	ldr	r2, [pc, #152]	; (8004124 <TIM_Base_SetConfig+0xbc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_Base_SetConfig+0x30>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a25      	ldr	r2, [pc, #148]	; (8004128 <TIM_Base_SetConfig+0xc0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d108      	bne.n	80040aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <TIM_Base_SetConfig+0xb8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_Base_SetConfig+0x62>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0x62>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a19      	ldr	r2, [pc, #100]	; (8004124 <TIM_Base_SetConfig+0xbc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0x62>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <TIM_Base_SetConfig+0xc0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d108      	bne.n	80040dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a07      	ldr	r2, [pc, #28]	; (8004120 <TIM_Base_SetConfig+0xb8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d103      	bne.n	8004110 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	615a      	str	r2, [r3, #20]
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800

0800412c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0201 	bic.w	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f023 030a 	bic.w	r3, r3, #10
 8004168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f023 0210 	bic.w	r2, r3, #16
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	031b      	lsls	r3, r3, #12
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	621a      	str	r2, [r3, #32]
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	f043 0307 	orr.w	r3, r3, #7
 8004208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800421a:	b480      	push	{r7}
 800421c:	b087      	sub	sp, #28
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004234:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	021a      	lsls	r2, r3, #8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	431a      	orrs	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4313      	orrs	r3, r2
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	609a      	str	r2, [r3, #8]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800426c:	2302      	movs	r3, #2
 800426e:	e046      	b.n	80042fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a16      	ldr	r2, [pc, #88]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042bc:	d009      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a10      	ldr	r2, [pc, #64]	; (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d10c      	bne.n	80042ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800

08004314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e03f      	b.n	80043ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fc fdb4 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2224      	movs	r2, #36	; 0x24
 8004368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800437a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fb83 	bl	8004a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b08a      	sub	sp, #40	; 0x28
 80043d6:	af02      	add	r7, sp, #8
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d17c      	bne.n	80044ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_UART_Transmit+0x2c>
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e075      	b.n	80044ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_UART_Transmit+0x3e>
 800440c:	2302      	movs	r3, #2
 800440e:	e06e      	b.n	80044ee <HAL_UART_Transmit+0x11c>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2221      	movs	r2, #33	; 0x21
 8004422:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004426:	f7fc ff75 	bl	8001314 <HAL_GetTick>
 800442a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d108      	bne.n	8004454 <HAL_UART_Transmit+0x82>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e003      	b.n	800445c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004464:	e02a      	b.n	80044bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2180      	movs	r1, #128	; 0x80
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f9a7 	bl	80047c4 <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e036      	b.n	80044ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	3302      	adds	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e007      	b.n	80044ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1cf      	bne.n	8004466 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2140      	movs	r1, #64	; 0x40
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f977 	bl	80047c4 <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e006      	b.n	80044ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	4613      	mov	r3, r2
 8004502:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b20      	cmp	r3, #32
 800450e:	d140      	bne.n	8004592 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_UART_Receive_IT+0x26>
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e039      	b.n	8004594 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_UART_Receive_IT+0x38>
 800452a:	2302      	movs	r3, #2
 800452c:	e032      	b.n	8004594 <HAL_UART_Receive_IT+0x9e>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	88fa      	ldrh	r2, [r7, #6]
 8004540:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	88fa      	ldrh	r2, [r7, #6]
 8004546:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2222      	movs	r2, #34	; 0x22
 8004552:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800456c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0220 	orr.w	r2, r2, #32
 800458c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10d      	bne.n	80045f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_UART_IRQHandler+0x52>
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f9cc 	bl	8004988 <UART_Receive_IT>
      return;
 80045f0:	e0d0      	b.n	8004794 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80b0 	beq.w	800475a <HAL_UART_IRQHandler+0x1ba>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_UART_IRQHandler+0x70>
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80a5 	beq.w	800475a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_UART_IRQHandler+0x90>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	f043 0201 	orr.w	r2, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_UART_IRQHandler+0xb0>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	f043 0202 	orr.w	r2, r3, #2
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_UART_IRQHandler+0xd0>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	f043 0204 	orr.w	r2, r3, #4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00f      	beq.n	800469a <HAL_UART_IRQHandler+0xfa>
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d104      	bne.n	800468e <HAL_UART_IRQHandler+0xee>
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	f043 0208 	orr.w	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d077      	beq.n	8004792 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d007      	beq.n	80046bc <HAL_UART_IRQHandler+0x11c>
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f966 	bl	8004988 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bf14      	ite	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	2300      	moveq	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <HAL_UART_IRQHandler+0x144>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d031      	beq.n	8004748 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f8b7 	bl	8004858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d023      	beq.n	8004740 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004706:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	4a21      	ldr	r2, [pc, #132]	; (800479c <HAL_UART_IRQHandler+0x1fc>)
 8004716:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	4618      	mov	r0, r3
 800471e:	f7fc ff35 	bl	800158c <HAL_DMA_Abort_IT>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d016      	beq.n	8004756 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004732:	4610      	mov	r0, r2
 8004734:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004736:	e00e      	b.n	8004756 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f83a 	bl	80047b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473e:	e00a      	b.n	8004756 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f836 	bl	80047b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004746:	e006      	b.n	8004756 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f832 	bl	80047b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004754:	e01d      	b.n	8004792 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004756:	bf00      	nop
    return;
 8004758:	e01b      	b.n	8004792 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_UART_IRQHandler+0x1d6>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f8a3 	bl	80048ba <UART_Transmit_IT>
    return;
 8004774:	e00e      	b.n	8004794 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <HAL_UART_IRQHandler+0x1f4>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f8e4 	bl	8004958 <UART_EndTransmit_IT>
    return;
 8004790:	e000      	b.n	8004794 <HAL_UART_IRQHandler+0x1f4>
    return;
 8004792:	bf00      	nop
  }
}
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	08004893 	.word	0x08004893

080047a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d4:	e02c      	b.n	8004830 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d028      	beq.n	8004830 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047e4:	f7fc fd96 	bl	8001314 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d21d      	bcs.n	8004830 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004802:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e00f      	b.n	8004850 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	429a      	cmp	r2, r3
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	d0c3      	beq.n	80047d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800486e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	bc80      	pop	{r7}
 8004890:	4770      	bx	lr

08004892 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f7ff ff80 	bl	80047b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b21      	cmp	r3, #33	; 0x21
 80048cc:	d13e      	bne.n	800494c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d6:	d114      	bne.n	8004902 <UART_Transmit_IT+0x48>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d110      	bne.n	8004902 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	1c9a      	adds	r2, r3, #2
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	621a      	str	r2, [r3, #32]
 8004900:	e008      	b.n	8004914 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	1c59      	adds	r1, r3, #1
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6211      	str	r1, [r2, #32]
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4619      	mov	r1, r3
 8004922:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10f      	bne.n	8004948 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004936:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004946:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff ff11 	bl	80047a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b22      	cmp	r3, #34	; 0x22
 800499a:	d170      	bne.n	8004a7e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a4:	d117      	bne.n	80049d6 <UART_Receive_IT+0x4e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d113      	bne.n	80049d6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	1c9a      	adds	r2, r3, #2
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28
 80049d4:	e026      	b.n	8004a24 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e8:	d007      	beq.n	80049fa <UART_Receive_IT+0x72>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <UART_Receive_IT+0x80>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	e008      	b.n	8004a1a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4619      	mov	r1, r3
 8004a32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d120      	bne.n	8004a7a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0220 	bic.w	r2, r2, #32
 8004a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0201 	bic.w	r2, r2, #1
 8004a66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fc f937 	bl	8000ce4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e002      	b.n	8004a80 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e000      	b.n	8004a80 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
  }
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ac2:	f023 030c 	bic.w	r3, r3, #12
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	430b      	orrs	r3, r1
 8004ace:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a2c      	ldr	r2, [pc, #176]	; (8004b9c <UART_SetConfig+0x114>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d103      	bne.n	8004af8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004af0:	f7fe ff40 	bl	8003974 <HAL_RCC_GetPCLK2Freq>
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	e002      	b.n	8004afe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fe ff28 	bl	800394c <HAL_RCC_GetPCLK1Freq>
 8004afc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	009a      	lsls	r2, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b14:	4a22      	ldr	r2, [pc, #136]	; (8004ba0 <UART_SetConfig+0x118>)
 8004b16:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	0119      	lsls	r1, r3, #4
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009a      	lsls	r2, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b34:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <UART_SetConfig+0x118>)
 8004b36:	fba3 0302 	umull	r0, r3, r3, r2
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	2064      	movs	r0, #100	; 0x64
 8004b3e:	fb00 f303 	mul.w	r3, r0, r3
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	3332      	adds	r3, #50	; 0x32
 8004b48:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <UART_SetConfig+0x118>)
 8004b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b54:	4419      	add	r1, r3
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009a      	lsls	r2, r3, #2
 8004b60:	441a      	add	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <UART_SetConfig+0x118>)
 8004b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	2064      	movs	r0, #100	; 0x64
 8004b76:	fb00 f303 	mul.w	r3, r0, r3
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	3332      	adds	r3, #50	; 0x32
 8004b80:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <UART_SetConfig+0x118>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	f003 020f 	and.w	r2, r3, #15
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	440a      	add	r2, r1
 8004b92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40013800 	.word	0x40013800
 8004ba0:	51eb851f 	.word	0x51eb851f

08004ba4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	f107 0014 	add.w	r0, r7, #20
 8004bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	b004      	add	sp, #16
 8004bc2:	4770      	bx	lr

08004bc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bd4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004bd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bf8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004bfc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	4013      	ands	r3, r2
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr

08004c3c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	f107 0014 	add.w	r0, r7, #20
 8004c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	b004      	add	sp, #16
 8004c7a:	4770      	bx	lr

08004c7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b09b      	sub	sp, #108	; 0x6c
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	78db      	ldrb	r3, [r3, #3]
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d81f      	bhi.n	8004cee <USB_ActivateEndpoint+0x72>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <USB_ActivateEndpoint+0x38>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004cc5 	.word	0x08004cc5
 8004cb8:	08004ce1 	.word	0x08004ce1
 8004cbc:	08004cf7 	.word	0x08004cf7
 8004cc0:	08004cd3 	.word	0x08004cd3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004cc4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ccc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cd0:	e012      	b.n	8004cf8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004cd2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cd6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004cda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cde:	e00b      	b.n	8004cf8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ce0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ce4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ce8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cec:	e004      	b.n	8004cf8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004cf4:	e000      	b.n	8004cf8 <USB_ActivateEndpoint+0x7c>
      break;
 8004cf6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	441a      	add	r2, r3
 8004d02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	441a      	add	r2, r3
 8004d48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	7b1b      	ldrb	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f040 8149 	bne.w	8004ffc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	785b      	ldrb	r3, [r3, #1]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 8084 	beq.w	8004e7c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	4413      	add	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	011a      	lsls	r2, r3, #4
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	88db      	ldrh	r3, [r3, #6]
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	81fb      	strh	r3, [r7, #14]
 8004db6:	89fb      	ldrh	r3, [r7, #14]
 8004db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01b      	beq.n	8004df8 <USB_ActivateEndpoint+0x17c>
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	81bb      	strh	r3, [r7, #12]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	89bb      	ldrh	r3, [r7, #12]
 8004de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	78db      	ldrb	r3, [r3, #3]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d020      	beq.n	8004e42 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e16:	813b      	strh	r3, [r7, #8]
 8004e18:	893b      	ldrh	r3, [r7, #8]
 8004e1a:	f083 0320 	eor.w	r3, r3, #32
 8004e1e:	813b      	strh	r3, [r7, #8]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	441a      	add	r2, r3
 8004e2a:	893b      	ldrh	r3, [r7, #8]
 8004e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]
 8004e40:	e27f      	b.n	8005342 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e58:	817b      	strh	r3, [r7, #10]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	441a      	add	r2, r3
 8004e64:	897b      	ldrh	r3, [r7, #10]
 8004e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	8013      	strh	r3, [r2, #0]
 8004e7a:	e262      	b.n	8005342 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	4413      	add	r3, r2
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	011a      	lsls	r2, r3, #4
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	88db      	ldrh	r3, [r3, #6]
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	4413      	add	r3, r2
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	011a      	lsls	r2, r3, #4
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	4413      	add	r3, r2
 8004ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ed2:	623b      	str	r3, [r7, #32]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d112      	bne.n	8004f02 <USB_ActivateEndpoint+0x286>
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	e02f      	b.n	8004f62 <USB_ActivateEndpoint+0x2e6>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b3e      	cmp	r3, #62	; 0x3e
 8004f08:	d813      	bhi.n	8004f32 <USB_ActivateEndpoint+0x2b6>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	663b      	str	r3, [r7, #96]	; 0x60
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <USB_ActivateEndpoint+0x2a8>
 8004f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f20:	3301      	adds	r3, #1
 8004f22:	663b      	str	r3, [r7, #96]	; 0x60
 8004f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	029b      	lsls	r3, r3, #10
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	e017      	b.n	8004f62 <USB_ActivateEndpoint+0x2e6>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	663b      	str	r3, [r7, #96]	; 0x60
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <USB_ActivateEndpoint+0x2d0>
 8004f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	029b      	lsls	r3, r3, #10
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	83fb      	strh	r3, [r7, #30]
 8004f70:	8bfb      	ldrh	r3, [r7, #30]
 8004f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01b      	beq.n	8004fb2 <USB_ActivateEndpoint+0x336>
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f90:	83bb      	strh	r3, [r7, #28]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	8bbb      	ldrh	r3, [r7, #28]
 8004f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	837b      	strh	r3, [r7, #26]
 8004fca:	8b7b      	ldrh	r3, [r7, #26]
 8004fcc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fd0:	837b      	strh	r3, [r7, #26]
 8004fd2:	8b7b      	ldrh	r3, [r7, #26]
 8004fd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fd8:	837b      	strh	r3, [r7, #26]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	441a      	add	r2, r3
 8004fe4:	8b7b      	ldrh	r3, [r7, #26]
 8004fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	8013      	strh	r3, [r2, #0]
 8004ffa:	e1a2      	b.n	8005342 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005012:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	441a      	add	r2, r3
 8005020:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005034:	b29b      	uxth	r3, r3
 8005036:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	65bb      	str	r3, [r7, #88]	; 0x58
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005042:	b29b      	uxth	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005048:	4413      	add	r3, r2
 800504a:	65bb      	str	r3, [r7, #88]	; 0x58
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	011a      	lsls	r2, r3, #4
 8005052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005054:	4413      	add	r3, r2
 8005056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505a:	657b      	str	r3, [r7, #84]	; 0x54
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	891b      	ldrh	r3, [r3, #8]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	b29b      	uxth	r3, r3
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800506a:	801a      	strh	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	653b      	str	r3, [r7, #80]	; 0x50
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005076:	b29b      	uxth	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507c:	4413      	add	r3, r2
 800507e:	653b      	str	r3, [r7, #80]	; 0x50
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	011a      	lsls	r2, r3, #4
 8005086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005088:	4413      	add	r3, r2
 800508a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800508e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	895b      	ldrh	r3, [r3, #10]
 8005094:	085b      	lsrs	r3, r3, #1
 8005096:	b29b      	uxth	r3, r3
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f040 8091 	bne.w	80051cc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80050b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01b      	beq.n	80050fa <USB_ActivateEndpoint+0x47e>
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80050e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	873b      	strh	r3, [r7, #56]	; 0x38
 8005108:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01b      	beq.n	800514a <USB_ActivateEndpoint+0x4ce>
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	86fb      	strh	r3, [r7, #54]	; 0x36
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	441a      	add	r2, r3
 8005134:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005146:	b29b      	uxth	r3, r3
 8005148:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800515c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005160:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005162:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005164:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005168:	86bb      	strh	r3, [r7, #52]	; 0x34
 800516a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800516c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005170:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	441a      	add	r2, r3
 800517c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800517e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518e:	b29b      	uxth	r3, r3
 8005190:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	441a      	add	r2, r3
 80051b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80051b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	8013      	strh	r3, [r2, #0]
 80051ca:	e0ba      	b.n	8005342 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80051dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80051e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01d      	beq.n	8005224 <USB_ActivateEndpoint+0x5a8>
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	441a      	add	r2, r3
 800520c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800521c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005220:	b29b      	uxth	r3, r3
 8005222:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005234:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01d      	beq.n	800527c <USB_ActivateEndpoint+0x600>
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005274:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005278:	b29b      	uxth	r3, r3
 800527a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	78db      	ldrb	r3, [r3, #3]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d024      	beq.n	80052ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800529e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052a2:	f083 0320 	eor.w	r3, r3, #32
 80052a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	441a      	add	r2, r3
 80052b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8013      	strh	r3, [r2, #0]
 80052cc:	e01d      	b.n	800530a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	441a      	add	r2, r3
 80052f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80052f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005306:	b29b      	uxth	r3, r3
 8005308:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b29b      	uxth	r3, r3
 8005318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	441a      	add	r2, r3
 800532c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800532e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533e:	b29b      	uxth	r3, r3
 8005340:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005342:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005346:	4618      	mov	r0, r3
 8005348:	376c      	adds	r7, #108	; 0x6c
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005350:	b480      	push	{r7}
 8005352:	b08d      	sub	sp, #52	; 0x34
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	7b1b      	ldrb	r3, [r3, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f040 808e 	bne.w	8005480 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d044      	beq.n	80053f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	81bb      	strh	r3, [r7, #12]
 800537a:	89bb      	ldrh	r3, [r7, #12]
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01b      	beq.n	80053bc <USB_DeactivateEndpoint+0x6c>
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	817b      	strh	r3, [r7, #10]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	441a      	add	r2, r3
 80053a6:	897b      	ldrh	r3, [r7, #10]
 80053a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d2:	813b      	strh	r3, [r7, #8]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	441a      	add	r2, r3
 80053de:	893b      	ldrh	r3, [r7, #8]
 80053e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	8013      	strh	r3, [r2, #0]
 80053f4:	e192      	b.n	800571c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	827b      	strh	r3, [r7, #18]
 8005404:	8a7b      	ldrh	r3, [r7, #18]
 8005406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01b      	beq.n	8005446 <USB_DeactivateEndpoint+0xf6>
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005424:	823b      	strh	r3, [r7, #16]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	441a      	add	r2, r3
 8005430:	8a3b      	ldrh	r3, [r7, #16]
 8005432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800543e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	81fb      	strh	r3, [r7, #14]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	89fb      	ldrh	r3, [r7, #14]
 800546a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]
 800547e:	e14d      	b.n	800571c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f040 80a5 	bne.w	80055d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	843b      	strh	r3, [r7, #32]
 8005498:	8c3b      	ldrh	r3, [r7, #32]
 800549a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01b      	beq.n	80054da <USB_DeactivateEndpoint+0x18a>
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	83fb      	strh	r3, [r7, #30]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	441a      	add	r2, r3
 80054c4:	8bfb      	ldrh	r3, [r7, #30]
 80054c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	83bb      	strh	r3, [r7, #28]
 80054e8:	8bbb      	ldrh	r3, [r7, #28]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01b      	beq.n	800552a <USB_DeactivateEndpoint+0x1da>
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005508:	837b      	strh	r3, [r7, #26]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	441a      	add	r2, r3
 8005514:	8b7b      	ldrh	r3, [r7, #26]
 8005516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800551a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005522:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005526:	b29b      	uxth	r3, r3
 8005528:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	833b      	strh	r3, [r7, #24]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	441a      	add	r2, r3
 800554c:	8b3b      	ldrh	r3, [r7, #24]
 800554e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800555e:	b29b      	uxth	r3, r3
 8005560:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005578:	82fb      	strh	r3, [r7, #22]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	8afb      	ldrh	r3, [r7, #22]
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b0:	82bb      	strh	r3, [r7, #20]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	441a      	add	r2, r3
 80055bc:	8abb      	ldrh	r3, [r7, #20]
 80055be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	8013      	strh	r3, [r2, #0]
 80055d2:	e0a3      	b.n	800571c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01b      	beq.n	8005624 <USB_DeactivateEndpoint+0x2d4>
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	441a      	add	r2, r3
 800560e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005620:	b29b      	uxth	r3, r3
 8005622:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005632:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01b      	beq.n	8005674 <USB_DeactivateEndpoint+0x324>
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	853b      	strh	r3, [r7, #40]	; 0x28
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	441a      	add	r2, r3
 800565e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005670:	b29b      	uxth	r3, r3
 8005672:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	441a      	add	r2, r3
 80056ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	441a      	add	r2, r3
 8005706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005718:	b29b      	uxth	r3, r3
 800571a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3734      	adds	r7, #52	; 0x34
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr

08005728 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b0c4      	sub	sp, #272	; 0x110
 800572c:	af00      	add	r7, sp, #0
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	6018      	str	r0, [r3, #0]
 8005732:	463b      	mov	r3, r7
 8005734:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005736:	463b      	mov	r3, r7
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	f040 8557 	bne.w	80061f0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005742:	463b      	mov	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	463b      	mov	r3, r7
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	429a      	cmp	r2, r3
 8005750:	d905      	bls.n	800575e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005752:	463b      	mov	r3, r7
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800575c:	e004      	b.n	8005768 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	7b1b      	ldrb	r3, [r3, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d12c      	bne.n	80057cc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005772:	463b      	mov	r3, r7
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6959      	ldr	r1, [r3, #20]
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	88da      	ldrh	r2, [r3, #6]
 800577e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005782:	b29b      	uxth	r3, r3
 8005784:	1d38      	adds	r0, r7, #4
 8005786:	6800      	ldr	r0, [r0, #0]
 8005788:	f001 fa2c 	bl	8006be4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800578c:	1d3b      	adds	r3, r7, #4
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	4413      	add	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	463b      	mov	r3, r7
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	011a      	lsls	r2, r3, #4
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	4413      	add	r3, r2
 80057b0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80057b4:	f107 0310 	add.w	r3, r7, #16
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f107 0310 	add.w	r3, r7, #16
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	f000 bcdd 	b.w	8006186 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80057cc:	463b      	mov	r3, r7
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	78db      	ldrb	r3, [r3, #3]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	f040 8347 	bne.w	8005e66 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6a1a      	ldr	r2, [r3, #32]
 80057de:	463b      	mov	r3, r7
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	f240 82eb 	bls.w	8005dc0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80057ea:	1d3b      	adds	r3, r7, #4
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	463b      	mov	r3, r7
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005804:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005808:	1d3b      	adds	r3, r7, #4
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	463b      	mov	r3, r7
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	441a      	add	r2, r3
 8005816:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800581a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005822:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582a:	b29b      	uxth	r3, r3
 800582c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	463b      	mov	r3, r7
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	463b      	mov	r3, r7
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 8159 	beq.w	8005b0e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800585c:	1d3b      	adds	r3, r7, #4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d164      	bne.n	8005936 <USB_EPStartXfer+0x20e>
 800586c:	1d3b      	adds	r3, r7, #4
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005872:	1d3b      	adds	r3, r7, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800587a:	b29b      	uxth	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	4413      	add	r3, r2
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005884:	463b      	mov	r3, r7
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	011a      	lsls	r2, r3, #4
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	4413      	add	r3, r2
 8005890:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005894:	62bb      	str	r3, [r7, #40]	; 0x28
 8005896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d112      	bne.n	80058c4 <USB_EPStartXfer+0x19c>
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058bc:	b29a      	uxth	r2, r3
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	e054      	b.n	800596e <USB_EPStartXfer+0x246>
 80058c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c8:	2b3e      	cmp	r3, #62	; 0x3e
 80058ca:	d817      	bhi.n	80058fc <USB_EPStartXfer+0x1d4>
 80058cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <USB_EPStartXfer+0x1c4>
 80058e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e6:	3301      	adds	r3, #1
 80058e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	029b      	lsls	r3, r3, #10
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	e038      	b.n	800596e <USB_EPStartXfer+0x246>
 80058fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <USB_EPStartXfer+0x1f4>
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005916:	3b01      	subs	r3, #1
 8005918:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800591c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005920:	b29b      	uxth	r3, r3
 8005922:	029b      	lsls	r3, r3, #10
 8005924:	b29b      	uxth	r3, r3
 8005926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592e:	b29a      	uxth	r2, r3
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	e01b      	b.n	800596e <USB_EPStartXfer+0x246>
 8005936:	463b      	mov	r3, r7
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	785b      	ldrb	r3, [r3, #1]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d116      	bne.n	800596e <USB_EPStartXfer+0x246>
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005948:	b29b      	uxth	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594e:	4413      	add	r3, r2
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	011a      	lsls	r2, r3, #4
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	4413      	add	r3, r2
 800595e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005962:	633b      	str	r3, [r7, #48]	; 0x30
 8005964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005968:	b29a      	uxth	r2, r3
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800596e:	463b      	mov	r3, r7
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	895b      	ldrh	r3, [r3, #10]
 8005974:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005978:	463b      	mov	r3, r7
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6959      	ldr	r1, [r3, #20]
 800597e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005982:	b29b      	uxth	r3, r3
 8005984:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005988:	1d38      	adds	r0, r7, #4
 800598a:	6800      	ldr	r0, [r0, #0]
 800598c:	f001 f92a 	bl	8006be4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005990:	463b      	mov	r3, r7
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800599a:	441a      	add	r2, r3
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059a2:	463b      	mov	r3, r7
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	463b      	mov	r3, r7
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d909      	bls.n	80059c6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80059b2:	463b      	mov	r3, r7
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a1a      	ldr	r2, [r3, #32]
 80059b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059bc:	1ad2      	subs	r2, r2, r3
 80059be:	463b      	mov	r3, r7
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	621a      	str	r2, [r3, #32]
 80059c4:	e008      	b.n	80059d8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80059c6:	463b      	mov	r3, r7
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80059d0:	463b      	mov	r3, r7
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2200      	movs	r2, #0
 80059d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059d8:	463b      	mov	r3, r7
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d164      	bne.n	8005aac <USB_EPStartXfer+0x384>
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	61fb      	str	r3, [r7, #28]
 80059fa:	463b      	mov	r3, r7
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	011a      	lsls	r2, r3, #4
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d112      	bne.n	8005a3a <USB_EPStartXfer+0x312>
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	e057      	b.n	8005aea <USB_EPStartXfer+0x3c2>
 8005a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a40:	d817      	bhi.n	8005a72 <USB_EPStartXfer+0x34a>
 8005a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <USB_EPStartXfer+0x33a>
 8005a58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	e03b      	b.n	8005aea <USB_EPStartXfer+0x3c2>
 8005a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <USB_EPStartXfer+0x36a>
 8005a88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	029b      	lsls	r3, r3, #10
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	e01e      	b.n	8005aea <USB_EPStartXfer+0x3c2>
 8005aac:	463b      	mov	r3, r7
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d119      	bne.n	8005aea <USB_EPStartXfer+0x3c2>
 8005ab6:	1d3b      	adds	r3, r7, #4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
 8005abc:	1d3b      	adds	r3, r7, #4
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	4413      	add	r3, r2
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ace:	463b      	mov	r3, r7
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	011a      	lsls	r2, r3, #4
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	4413      	add	r3, r2
 8005ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ade:	623b      	str	r3, [r7, #32]
 8005ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005aea:	463b      	mov	r3, r7
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	891b      	ldrh	r3, [r3, #8]
 8005af0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6959      	ldr	r1, [r3, #20]
 8005afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005b04:	1d38      	adds	r0, r7, #4
 8005b06:	6800      	ldr	r0, [r0, #0]
 8005b08:	f001 f86c 	bl	8006be4 <USB_WritePMA>
 8005b0c:	e33b      	b.n	8006186 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b0e:	463b      	mov	r3, r7
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d164      	bne.n	8005be2 <USB_EPStartXfer+0x4ba>
 8005b18:	1d3b      	adds	r3, r7, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2c:	4413      	add	r3, r2
 8005b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b30:	463b      	mov	r3, r7
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	011a      	lsls	r2, r3, #4
 8005b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d112      	bne.n	8005b70 <USB_EPStartXfer+0x448>
 8005b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b6c:	801a      	strh	r2, [r3, #0]
 8005b6e:	e057      	b.n	8005c20 <USB_EPStartXfer+0x4f8>
 8005b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b74:	2b3e      	cmp	r3, #62	; 0x3e
 8005b76:	d817      	bhi.n	8005ba8 <USB_EPStartXfer+0x480>
 8005b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d004      	beq.n	8005b98 <USB_EPStartXfer+0x470>
 8005b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b92:	3301      	adds	r3, #1
 8005b94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	029b      	lsls	r3, r3, #10
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e03b      	b.n	8005c20 <USB_EPStartXfer+0x4f8>
 8005ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb6:	f003 031f 	and.w	r3, r3, #31
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d104      	bne.n	8005bc8 <USB_EPStartXfer+0x4a0>
 8005bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	029b      	lsls	r3, r3, #10
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e01e      	b.n	8005c20 <USB_EPStartXfer+0x4f8>
 8005be2:	463b      	mov	r3, r7
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d119      	bne.n	8005c20 <USB_EPStartXfer+0x4f8>
 8005bec:	1d3b      	adds	r3, r7, #4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8005bf2:	1d3b      	adds	r3, r7, #4
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c00:	4413      	add	r3, r2
 8005c02:	657b      	str	r3, [r7, #84]	; 0x54
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	011a      	lsls	r2, r3, #4
 8005c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0e:	4413      	add	r3, r2
 8005c10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c14:	653b      	str	r3, [r7, #80]	; 0x50
 8005c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c20:	463b      	mov	r3, r7
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	891b      	ldrh	r3, [r3, #8]
 8005c26:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6959      	ldr	r1, [r3, #20]
 8005c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c3a:	1d38      	adds	r0, r7, #4
 8005c3c:	6800      	ldr	r0, [r0, #0]
 8005c3e:	f000 ffd1 	bl	8006be4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c42:	463b      	mov	r3, r7
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695a      	ldr	r2, [r3, #20]
 8005c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4c:	441a      	add	r2, r3
 8005c4e:	463b      	mov	r3, r7
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c54:	463b      	mov	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a1a      	ldr	r2, [r3, #32]
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d909      	bls.n	8005c78 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005c64:	463b      	mov	r3, r7
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6a1a      	ldr	r2, [r3, #32]
 8005c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c6e:	1ad2      	subs	r2, r2, r3
 8005c70:	463b      	mov	r3, r7
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	621a      	str	r2, [r3, #32]
 8005c76:	e008      	b.n	8005c8a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c78:	463b      	mov	r3, r7
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2200      	movs	r2, #0
 8005c88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c8a:	1d3b      	adds	r3, r7, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c90:	463b      	mov	r3, r7
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d164      	bne.n	8005d64 <USB_EPStartXfer+0x63c>
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca0:	1d3b      	adds	r3, r7, #4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cae:	4413      	add	r3, r2
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	011a      	lsls	r2, r3, #4
 8005cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d112      	bne.n	8005cf2 <USB_EPStartXfer+0x5ca>
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	801a      	strh	r2, [r3, #0]
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	e054      	b.n	8005d9c <USB_EPStartXfer+0x674>
 8005cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8005cf8:	d817      	bhi.n	8005d2a <USB_EPStartXfer+0x602>
 8005cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d004      	beq.n	8005d1a <USB_EPStartXfer+0x5f2>
 8005d10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d14:	3301      	adds	r3, #1
 8005d16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	029b      	lsls	r3, r3, #10
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	e038      	b.n	8005d9c <USB_EPStartXfer+0x674>
 8005d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <USB_EPStartXfer+0x622>
 8005d40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d44:	3b01      	subs	r3, #1
 8005d46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	029b      	lsls	r3, r3, #10
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	e01b      	b.n	8005d9c <USB_EPStartXfer+0x674>
 8005d64:	463b      	mov	r3, r7
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d116      	bne.n	8005d9c <USB_EPStartXfer+0x674>
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7c:	4413      	add	r3, r2
 8005d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d80:	463b      	mov	r3, r7
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	011a      	lsls	r2, r3, #4
 8005d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d90:	643b      	str	r3, [r7, #64]	; 0x40
 8005d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	895b      	ldrh	r3, [r3, #10]
 8005da2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005da6:	463b      	mov	r3, r7
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6959      	ldr	r1, [r3, #20]
 8005dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005db6:	1d38      	adds	r0, r7, #4
 8005db8:	6800      	ldr	r0, [r0, #0]
 8005dba:	f000 ff13 	bl	8006be4 <USB_WritePMA>
 8005dbe:	e1e2      	b.n	8006186 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005dca:	1d3b      	adds	r3, r7, #4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	463b      	mov	r3, r7
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005de8:	1d3b      	adds	r3, r7, #4
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	463b      	mov	r3, r7
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	441a      	add	r2, r3
 8005df6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e0e:	1d3b      	adds	r3, r7, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	663b      	str	r3, [r7, #96]	; 0x60
 8005e14:	1d3b      	adds	r3, r7, #4
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e22:	4413      	add	r3, r2
 8005e24:	663b      	str	r3, [r7, #96]	; 0x60
 8005e26:	463b      	mov	r3, r7
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	011a      	lsls	r2, r3, #4
 8005e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e30:	4413      	add	r3, r2
 8005e32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e42:	463b      	mov	r3, r7
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	891b      	ldrh	r3, [r3, #8]
 8005e48:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6959      	ldr	r1, [r3, #20]
 8005e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005e5c:	1d38      	adds	r0, r7, #4
 8005e5e:	6800      	ldr	r0, [r0, #0]
 8005e60:	f000 fec0 	bl	8006be4 <USB_WritePMA>
 8005e64:	e18f      	b.n	8006186 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e66:	1d3b      	adds	r3, r7, #4
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 808f 	beq.w	8005fa0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e82:	1d3b      	adds	r3, r7, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e88:	463b      	mov	r3, r7
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d164      	bne.n	8005f5c <USB_EPStartXfer+0x834>
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	673b      	str	r3, [r7, #112]	; 0x70
 8005e98:	1d3b      	adds	r3, r7, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea6:	4413      	add	r3, r2
 8005ea8:	673b      	str	r3, [r7, #112]	; 0x70
 8005eaa:	463b      	mov	r3, r7
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	011a      	lsls	r2, r3, #4
 8005eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d112      	bne.n	8005eea <USB_EPStartXfer+0x7c2>
 8005ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	801a      	strh	r2, [r3, #0]
 8005ee8:	e054      	b.n	8005f94 <USB_EPStartXfer+0x86c>
 8005eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eee:	2b3e      	cmp	r3, #62	; 0x3e
 8005ef0:	d817      	bhi.n	8005f22 <USB_EPStartXfer+0x7fa>
 8005ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <USB_EPStartXfer+0x7ea>
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	029b      	lsls	r3, r3, #10
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e038      	b.n	8005f94 <USB_EPStartXfer+0x86c>
 8005f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <USB_EPStartXfer+0x81a>
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	029b      	lsls	r3, r3, #10
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	e01b      	b.n	8005f94 <USB_EPStartXfer+0x86c>
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d116      	bne.n	8005f94 <USB_EPStartXfer+0x86c>
 8005f66:	1d3b      	adds	r3, r7, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f74:	4413      	add	r3, r2
 8005f76:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	011a      	lsls	r2, r3, #4
 8005f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f82:	4413      	add	r3, r2
 8005f84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f88:	677b      	str	r3, [r7, #116]	; 0x74
 8005f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f94:	463b      	mov	r3, r7
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	895b      	ldrh	r3, [r3, #10]
 8005f9a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005f9e:	e097      	b.n	80060d0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d168      	bne.n	800607c <USB_EPStartXfer+0x954>
 8005faa:	1d3b      	adds	r3, r7, #4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fb2:	1d3b      	adds	r3, r7, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fc8:	463b      	mov	r3, r7
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	011a      	lsls	r2, r3, #4
 8005fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d112      	bne.n	800600a <USB_EPStartXfer+0x8e2>
 8005fe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006002:	b29a      	uxth	r2, r3
 8006004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	e05d      	b.n	80060c6 <USB_EPStartXfer+0x99e>
 800600a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800600e:	2b3e      	cmp	r3, #62	; 0x3e
 8006010:	d817      	bhi.n	8006042 <USB_EPStartXfer+0x91a>
 8006012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800601c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d004      	beq.n	8006032 <USB_EPStartXfer+0x90a>
 8006028:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800602c:	3301      	adds	r3, #1
 800602e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006032:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006036:	b29b      	uxth	r3, r3
 8006038:	029b      	lsls	r3, r3, #10
 800603a:	b29a      	uxth	r2, r3
 800603c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800603e:	801a      	strh	r2, [r3, #0]
 8006040:	e041      	b.n	80060c6 <USB_EPStartXfer+0x99e>
 8006042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800604c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <USB_EPStartXfer+0x93a>
 8006058:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800605c:	3b01      	subs	r3, #1
 800605e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006062:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006066:	b29b      	uxth	r3, r3
 8006068:	029b      	lsls	r3, r3, #10
 800606a:	b29b      	uxth	r3, r3
 800606c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006074:	b29a      	uxth	r2, r3
 8006076:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e024      	b.n	80060c6 <USB_EPStartXfer+0x99e>
 800607c:	463b      	mov	r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d11f      	bne.n	80060c6 <USB_EPStartXfer+0x99e>
 8006086:	1d3b      	adds	r3, r7, #4
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800608e:	1d3b      	adds	r3, r7, #4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006096:	b29b      	uxth	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800609e:	4413      	add	r3, r2
 80060a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060a4:	463b      	mov	r3, r7
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	011a      	lsls	r2, r3, #4
 80060ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060b0:	4413      	add	r3, r2
 80060b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060be:	b29a      	uxth	r2, r3
 80060c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060c6:	463b      	mov	r3, r7
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	891b      	ldrh	r3, [r3, #8]
 80060cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060d0:	463b      	mov	r3, r7
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6959      	ldr	r1, [r3, #20]
 80060d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80060e0:	1d38      	adds	r0, r7, #4
 80060e2:	6800      	ldr	r0, [r0, #0]
 80060e4:	f000 fd7e 	bl	8006be4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80060e8:	463b      	mov	r3, r7
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d122      	bne.n	8006138 <USB_EPStartXfer+0xa10>
 80060f2:	1d3b      	adds	r3, r7, #4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	463b      	mov	r3, r7
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006110:	1d3b      	adds	r3, r7, #4
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	463b      	mov	r3, r7
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	441a      	add	r2, r3
 800611e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006132:	b29b      	uxth	r3, r3
 8006134:	8013      	strh	r3, [r2, #0]
 8006136:	e026      	b.n	8006186 <USB_EPStartXfer+0xa5e>
 8006138:	463b      	mov	r3, r7
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d121      	bne.n	8006186 <USB_EPStartXfer+0xa5e>
 8006142:	1d3b      	adds	r3, r7, #4
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	463b      	mov	r3, r7
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006160:	1d3b      	adds	r3, r7, #4
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	463b      	mov	r3, r7
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800617e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006182:	b29b      	uxth	r3, r3
 8006184:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006186:	1d3b      	adds	r3, r7, #4
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	463b      	mov	r3, r7
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f107 020e 	add.w	r2, r7, #14
 800619c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a4:	8013      	strh	r3, [r2, #0]
 80061a6:	f107 030e 	add.w	r3, r7, #14
 80061aa:	f107 020e 	add.w	r2, r7, #14
 80061ae:	8812      	ldrh	r2, [r2, #0]
 80061b0:	f082 0210 	eor.w	r2, r2, #16
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	f107 030e 	add.w	r3, r7, #14
 80061ba:	f107 020e 	add.w	r2, r7, #14
 80061be:	8812      	ldrh	r2, [r2, #0]
 80061c0:	f082 0220 	eor.w	r2, r2, #32
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	1d3b      	adds	r3, r7, #4
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	463b      	mov	r3, r7
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	441a      	add	r2, r3
 80061d4:	f107 030e 	add.w	r3, r7, #14
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	8013      	strh	r3, [r2, #0]
 80061ee:	e3b5      	b.n	800695c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80061f0:	463b      	mov	r3, r7
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	7b1b      	ldrb	r3, [r3, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f040 8090 	bne.w	800631c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	463b      	mov	r3, r7
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	429a      	cmp	r2, r3
 800620a:	d90e      	bls.n	800622a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800620c:	463b      	mov	r3, r7
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006216:	463b      	mov	r3, r7
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699a      	ldr	r2, [r3, #24]
 800621c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006220:	1ad2      	subs	r2, r2, r3
 8006222:	463b      	mov	r3, r7
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	619a      	str	r2, [r3, #24]
 8006228:	e008      	b.n	800623c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800622a:	463b      	mov	r3, r7
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006234:	463b      	mov	r3, r7
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2200      	movs	r2, #0
 800623a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800623c:	1d3b      	adds	r3, r7, #4
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006244:	1d3b      	adds	r3, r7, #4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624c:	b29b      	uxth	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006254:	4413      	add	r3, r2
 8006256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	011a      	lsls	r2, r3, #4
 8006262:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006266:	4413      	add	r3, r2
 8006268:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800626c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d116      	bne.n	80062a6 <USB_EPStartXfer+0xb7e>
 8006278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006284:	b29a      	uxth	r2, r3
 8006286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	b29b      	uxth	r3, r3
 8006294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629c:	b29a      	uxth	r2, r3
 800629e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	e32c      	b.n	8006900 <USB_EPStartXfer+0x11d8>
 80062a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062aa:	2b3e      	cmp	r3, #62	; 0x3e
 80062ac:	d818      	bhi.n	80062e0 <USB_EPStartXfer+0xbb8>
 80062ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <USB_EPStartXfer+0xba6>
 80062c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062c8:	3301      	adds	r3, #1
 80062ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	029b      	lsls	r3, r3, #10
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e30f      	b.n	8006900 <USB_EPStartXfer+0x11d8>
 80062e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e4:	095b      	lsrs	r3, r3, #5
 80062e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d104      	bne.n	8006300 <USB_EPStartXfer+0xbd8>
 80062f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062fa:	3b01      	subs	r3, #1
 80062fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006300:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006304:	b29b      	uxth	r3, r3
 8006306:	029b      	lsls	r3, r3, #10
 8006308:	b29b      	uxth	r3, r3
 800630a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800630e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006312:	b29a      	uxth	r2, r3
 8006314:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006318:	801a      	strh	r2, [r3, #0]
 800631a:	e2f1      	b.n	8006900 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	78db      	ldrb	r3, [r3, #3]
 8006322:	2b02      	cmp	r3, #2
 8006324:	f040 818f 	bne.w	8006646 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006328:	463b      	mov	r3, r7
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	785b      	ldrb	r3, [r3, #1]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d175      	bne.n	800641e <USB_EPStartXfer+0xcf6>
 8006332:	1d3b      	adds	r3, r7, #4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006342:	b29b      	uxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800634a:	4413      	add	r3, r2
 800634c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006350:	463b      	mov	r3, r7
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	011a      	lsls	r2, r3, #4
 8006358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800635c:	4413      	add	r3, r2
 800635e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006366:	463b      	mov	r3, r7
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d116      	bne.n	800639e <USB_EPStartXfer+0xc76>
 8006370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006394:	b29a      	uxth	r2, r3
 8006396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	e065      	b.n	800646a <USB_EPStartXfer+0xd42>
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b3e      	cmp	r3, #62	; 0x3e
 80063a6:	d81a      	bhi.n	80063de <USB_EPStartXfer+0xcb6>
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063b4:	463b      	mov	r3, r7
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <USB_EPStartXfer+0xca4>
 80063c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063c6:	3301      	adds	r3, #1
 80063c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063da:	801a      	strh	r2, [r3, #0]
 80063dc:	e045      	b.n	800646a <USB_EPStartXfer+0xd42>
 80063de:	463b      	mov	r3, r7
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	095b      	lsrs	r3, r3, #5
 80063e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063ea:	463b      	mov	r3, r7
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d104      	bne.n	8006402 <USB_EPStartXfer+0xcda>
 80063f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063fc:	3b01      	subs	r3, #1
 80063fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006402:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006406:	b29b      	uxth	r3, r3
 8006408:	029b      	lsls	r3, r3, #10
 800640a:	b29b      	uxth	r3, r3
 800640c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006414:	b29a      	uxth	r2, r3
 8006416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800641a:	801a      	strh	r2, [r3, #0]
 800641c:	e025      	b.n	800646a <USB_EPStartXfer+0xd42>
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d120      	bne.n	800646a <USB_EPStartXfer+0xd42>
 8006428:	1d3b      	adds	r3, r7, #4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006430:	1d3b      	adds	r3, r7, #4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006438:	b29b      	uxth	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006440:	4413      	add	r3, r2
 8006442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	011a      	lsls	r2, r3, #4
 800644e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006452:	4413      	add	r3, r2
 8006454:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800645c:	463b      	mov	r3, r7
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	b29a      	uxth	r2, r3
 8006464:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	1d3b      	adds	r3, r7, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006472:	463b      	mov	r3, r7
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d175      	bne.n	8006568 <USB_EPStartXfer+0xe40>
 800647c:	1d3b      	adds	r3, r7, #4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006484:	1d3b      	adds	r3, r7, #4
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648c:	b29b      	uxth	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006494:	4413      	add	r3, r2
 8006496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800649a:	463b      	mov	r3, r7
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	011a      	lsls	r2, r3, #4
 80064a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064a6:	4413      	add	r3, r2
 80064a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064b0:	463b      	mov	r3, r7
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d116      	bne.n	80064e8 <USB_EPStartXfer+0xdc0>
 80064ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	e061      	b.n	80065ac <USB_EPStartXfer+0xe84>
 80064e8:	463b      	mov	r3, r7
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b3e      	cmp	r3, #62	; 0x3e
 80064f0:	d81a      	bhi.n	8006528 <USB_EPStartXfer+0xe00>
 80064f2:	463b      	mov	r3, r7
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	085b      	lsrs	r3, r3, #1
 80064fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064fe:	463b      	mov	r3, r7
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <USB_EPStartXfer+0xdee>
 800650c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006510:	3301      	adds	r3, #1
 8006512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651a:	b29b      	uxth	r3, r3
 800651c:	029b      	lsls	r3, r3, #10
 800651e:	b29a      	uxth	r2, r3
 8006520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006524:	801a      	strh	r2, [r3, #0]
 8006526:	e041      	b.n	80065ac <USB_EPStartXfer+0xe84>
 8006528:	463b      	mov	r3, r7
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006534:	463b      	mov	r3, r7
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <USB_EPStartXfer+0xe24>
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006546:	3b01      	subs	r3, #1
 8006548:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006550:	b29b      	uxth	r3, r3
 8006552:	029b      	lsls	r3, r3, #10
 8006554:	b29b      	uxth	r3, r3
 8006556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	e021      	b.n	80065ac <USB_EPStartXfer+0xe84>
 8006568:	463b      	mov	r3, r7
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d11c      	bne.n	80065ac <USB_EPStartXfer+0xe84>
 8006572:	1d3b      	adds	r3, r7, #4
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800657a:	b29b      	uxth	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006582:	4413      	add	r3, r2
 8006584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006588:	463b      	mov	r3, r7
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	011a      	lsls	r2, r3, #4
 8006590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006594:	4413      	add	r3, r2
 8006596:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800659a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065aa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80065ac:	463b      	mov	r3, r7
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 81a4 	beq.w	8006900 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80065b8:	1d3b      	adds	r3, r7, #4
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	463b      	mov	r3, r7
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065cc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80065d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <USB_EPStartXfer+0xebc>
 80065d8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10d      	bne.n	8006600 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065e4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80065e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 8187 	bne.w	8006900 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f040 8180 	bne.w	8006900 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006600:	1d3b      	adds	r3, r7, #4
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	463b      	mov	r3, r7
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800661e:	1d3b      	adds	r3, r7, #4
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	441a      	add	r2, r3
 800662c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006640:	b29b      	uxth	r3, r3
 8006642:	8013      	strh	r3, [r2, #0]
 8006644:	e15c      	b.n	8006900 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006646:	463b      	mov	r3, r7
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	78db      	ldrb	r3, [r3, #3]
 800664c:	2b01      	cmp	r3, #1
 800664e:	f040 8155 	bne.w	80068fc <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	699a      	ldr	r2, [r3, #24]
 8006658:	463b      	mov	r3, r7
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d90e      	bls.n	8006680 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006662:	463b      	mov	r3, r7
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800666c:	463b      	mov	r3, r7
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006676:	1ad2      	subs	r2, r2, r3
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	619a      	str	r2, [r3, #24]
 800667e:	e008      	b.n	8006692 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006680:	463b      	mov	r3, r7
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800668a:	463b      	mov	r3, r7
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2200      	movs	r2, #0
 8006690:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006692:	463b      	mov	r3, r7
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d16f      	bne.n	800677c <USB_EPStartXfer+0x1054>
 800669c:	1d3b      	adds	r3, r7, #4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066a4:	1d3b      	adds	r3, r7, #4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066b4:	4413      	add	r3, r2
 80066b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	011a      	lsls	r2, r3, #4
 80066c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066c6:	4413      	add	r3, r2
 80066c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d116      	bne.n	8006706 <USB_EPStartXfer+0xfde>
 80066d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066ea:	801a      	strh	r2, [r3, #0]
 80066ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	e05f      	b.n	80067c6 <USB_EPStartXfer+0x109e>
 8006706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800670a:	2b3e      	cmp	r3, #62	; 0x3e
 800670c:	d818      	bhi.n	8006740 <USB_EPStartXfer+0x1018>
 800670e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <USB_EPStartXfer+0x1006>
 8006724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006728:	3301      	adds	r3, #1
 800672a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800672e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006732:	b29b      	uxth	r3, r3
 8006734:	029b      	lsls	r3, r3, #10
 8006736:	b29a      	uxth	r2, r3
 8006738:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800673c:	801a      	strh	r2, [r3, #0]
 800673e:	e042      	b.n	80067c6 <USB_EPStartXfer+0x109e>
 8006740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006744:	095b      	lsrs	r3, r3, #5
 8006746:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800674a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	2b00      	cmp	r3, #0
 8006754:	d104      	bne.n	8006760 <USB_EPStartXfer+0x1038>
 8006756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675a:	3b01      	subs	r3, #1
 800675c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006764:	b29b      	uxth	r3, r3
 8006766:	029b      	lsls	r3, r3, #10
 8006768:	b29b      	uxth	r3, r3
 800676a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800676e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006772:	b29a      	uxth	r2, r3
 8006774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e024      	b.n	80067c6 <USB_EPStartXfer+0x109e>
 800677c:	463b      	mov	r3, r7
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	785b      	ldrb	r3, [r3, #1]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d11f      	bne.n	80067c6 <USB_EPStartXfer+0x109e>
 8006786:	1d3b      	adds	r3, r7, #4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800678e:	1d3b      	adds	r3, r7, #4
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006796:	b29b      	uxth	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800679e:	4413      	add	r3, r2
 80067a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067a4:	463b      	mov	r3, r7
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	011a      	lsls	r2, r3, #4
 80067ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80067ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067be:	b29a      	uxth	r2, r3
 80067c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c4:	801a      	strh	r2, [r3, #0]
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067ce:	463b      	mov	r3, r7
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d16f      	bne.n	80068b8 <USB_EPStartXfer+0x1190>
 80067d8:	1d3b      	adds	r3, r7, #4
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067e0:	1d3b      	adds	r3, r7, #4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067f0:	4413      	add	r3, r2
 80067f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067f6:	463b      	mov	r3, r7
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	011a      	lsls	r2, r3, #4
 80067fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006802:	4413      	add	r3, r2
 8006804:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800680c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d116      	bne.n	8006842 <USB_EPStartXfer+0x111a>
 8006814:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006820:	b29a      	uxth	r2, r3
 8006822:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	b29b      	uxth	r3, r3
 8006830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006838:	b29a      	uxth	r2, r3
 800683a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e05e      	b.n	8006900 <USB_EPStartXfer+0x11d8>
 8006842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006846:	2b3e      	cmp	r3, #62	; 0x3e
 8006848:	d818      	bhi.n	800687c <USB_EPStartXfer+0x1154>
 800684a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800684e:	085b      	lsrs	r3, r3, #1
 8006850:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <USB_EPStartXfer+0x1142>
 8006860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006864:	3301      	adds	r3, #1
 8006866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800686e:	b29b      	uxth	r3, r3
 8006870:	029b      	lsls	r3, r3, #10
 8006872:	b29a      	uxth	r2, r3
 8006874:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006878:	801a      	strh	r2, [r3, #0]
 800687a:	e041      	b.n	8006900 <USB_EPStartXfer+0x11d8>
 800687c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800688a:	f003 031f 	and.w	r3, r3, #31
 800688e:	2b00      	cmp	r3, #0
 8006890:	d104      	bne.n	800689c <USB_EPStartXfer+0x1174>
 8006892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006896:	3b01      	subs	r3, #1
 8006898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800689c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	029b      	lsls	r3, r3, #10
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068b4:	801a      	strh	r2, [r3, #0]
 80068b6:	e023      	b.n	8006900 <USB_EPStartXfer+0x11d8>
 80068b8:	463b      	mov	r3, r7
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	785b      	ldrb	r3, [r3, #1]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d11e      	bne.n	8006900 <USB_EPStartXfer+0x11d8>
 80068c2:	1d3b      	adds	r3, r7, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068d2:	4413      	add	r3, r2
 80068d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068d8:	463b      	mov	r3, r7
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	011a      	lsls	r2, r3, #4
 80068e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068e4:	4413      	add	r3, r2
 80068e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	e001      	b.n	8006900 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e02e      	b.n	800695e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006900:	1d3b      	adds	r3, r7, #4
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	463b      	mov	r3, r7
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800691e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006922:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006926:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800692a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800692e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006932:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	463b      	mov	r3, r7
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006958:	b29b      	uxth	r3, r3
 800695a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	785b      	ldrb	r3, [r3, #1]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d020      	beq.n	80069bc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006990:	81bb      	strh	r3, [r7, #12]
 8006992:	89bb      	ldrh	r3, [r7, #12]
 8006994:	f083 0310 	eor.w	r3, r3, #16
 8006998:	81bb      	strh	r3, [r7, #12]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	89bb      	ldrh	r3, [r7, #12]
 80069a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	8013      	strh	r3, [r2, #0]
 80069ba:	e01f      	b.n	80069fc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	81fb      	strh	r3, [r7, #14]
 80069d4:	89fb      	ldrh	r3, [r7, #14]
 80069d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069da:	81fb      	strh	r3, [r7, #14]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	441a      	add	r2, r3
 80069e6:	89fb      	ldrh	r3, [r7, #14]
 80069e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	7b1b      	ldrb	r3, [r3, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f040 809d 	bne.w	8006b56 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d04c      	beq.n	8006abe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	823b      	strh	r3, [r7, #16]
 8006a32:	8a3b      	ldrh	r3, [r7, #16]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01b      	beq.n	8006a74 <USB_EPClearStall+0x6c>
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	81fb      	strh	r3, [r7, #14]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	441a      	add	r2, r3
 8006a5e:	89fb      	ldrh	r3, [r7, #14]
 8006a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	78db      	ldrb	r3, [r3, #3]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d06c      	beq.n	8006b56 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a92:	81bb      	strh	r3, [r7, #12]
 8006a94:	89bb      	ldrh	r3, [r7, #12]
 8006a96:	f083 0320 	eor.w	r3, r3, #32
 8006a9a:	81bb      	strh	r3, [r7, #12]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	441a      	add	r2, r3
 8006aa6:	89bb      	ldrh	r3, [r7, #12]
 8006aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	8013      	strh	r3, [r2, #0]
 8006abc:	e04b      	b.n	8006b56 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	82fb      	strh	r3, [r7, #22]
 8006acc:	8afb      	ldrh	r3, [r7, #22]
 8006ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d01b      	beq.n	8006b0e <USB_EPClearStall+0x106>
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aec:	82bb      	strh	r3, [r7, #20]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	441a      	add	r2, r3
 8006af8:	8abb      	ldrh	r3, [r7, #20]
 8006afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b24:	827b      	strh	r3, [r7, #18]
 8006b26:	8a7b      	ldrh	r3, [r7, #18]
 8006b28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b2c:	827b      	strh	r3, [r7, #18]
 8006b2e:	8a7b      	ldrh	r3, [r7, #18]
 8006b30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b34:	827b      	strh	r3, [r7, #18]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	441a      	add	r2, r3
 8006b40:	8a7b      	ldrh	r3, [r7, #18]
 8006b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr

08006b62 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d103      	bne.n	8006b7c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2280      	movs	r2, #128	; 0x80
 8006b78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr

08006b88 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr

08006b9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr

08006bce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b08d      	sub	sp, #52	; 0x34
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4611      	mov	r1, r2
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	80fb      	strh	r3, [r7, #6]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bfa:	88bb      	ldrh	r3, [r7, #4]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	085b      	lsrs	r3, r3, #1
 8006c00:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	005a      	lsls	r2, r3, #1
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1c:	e01e      	b.n	8006c5c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	3301      	adds	r3, #1
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	3302      	adds	r3, #2
 8006c48:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	3301      	adds	r3, #1
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1dd      	bne.n	8006c1e <USB_WritePMA+0x3a>
  }
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	3734      	adds	r7, #52	; 0x34
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr

08006c6e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b08b      	sub	sp, #44	; 0x2c
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	4611      	mov	r1, r2
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	80fb      	strh	r3, [r7, #6]
 8006c80:	4613      	mov	r3, r2
 8006c82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c84:	88bb      	ldrh	r3, [r7, #4]
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c94:	88fb      	ldrh	r3, [r7, #6]
 8006c96:	005a      	lsls	r2, r3, #1
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca6:	e01b      	b.n	8006ce0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	3302      	adds	r3, #2
 8006cd8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e0      	bne.n	8006ca8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006ce6:	88bb      	ldrh	r3, [r7, #4]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	701a      	strb	r2, [r3, #0]
  }
}
 8006d02:	bf00      	nop
 8006d04:	372c      	adds	r7, #44	; 0x2c
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr

08006d0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7c1b      	ldrb	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d115      	bne.n	8006d50 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d28:	2202      	movs	r2, #2
 8006d2a:	2181      	movs	r1, #129	; 0x81
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 feb2 	bl	8008a96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	2101      	movs	r1, #1
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 fea8 	bl	8008a96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006d4e:	e012      	b.n	8006d76 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d50:	2340      	movs	r3, #64	; 0x40
 8006d52:	2202      	movs	r2, #2
 8006d54:	2181      	movs	r1, #129	; 0x81
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fe9d 	bl	8008a96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	2202      	movs	r2, #2
 8006d66:	2101      	movs	r1, #1
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fe94 	bl	8008a96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d76:	2308      	movs	r3, #8
 8006d78:	2203      	movs	r2, #3
 8006d7a:	2182      	movs	r1, #130	; 0x82
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 fe8a 	bl	8008a96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d8c:	f001 ffaa 	bl	8008ce4 <USBD_static_malloc>
 8006d90:	4602      	mov	r2, r0
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]
 8006da6:	e026      	b.n	8006df6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	7c1b      	ldrb	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ddc:	2101      	movs	r1, #1
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 ff4a 	bl	8008c78 <USBD_LL_PrepareReceive>
 8006de4:	e007      	b.n	8006df6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dec:	2340      	movs	r3, #64	; 0x40
 8006dee:	2101      	movs	r1, #1
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 ff41 	bl	8008c78 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e10:	2181      	movs	r1, #129	; 0x81
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 fe65 	bl	8008ae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e1e:	2101      	movs	r1, #1
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fe5e 	bl	8008ae2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e2e:	2182      	movs	r1, #130	; 0x82
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 fe56 	bl	8008ae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00e      	beq.n	8006e64 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 ff50 	bl	8008cfc <USBD_static_free>
    pdev->pClassData = NULL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d039      	beq.n	8006f0c <USBD_CDC_Setup+0x9e>
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d17f      	bne.n	8006f9c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	88db      	ldrh	r3, [r3, #6]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d029      	beq.n	8006ef8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b25b      	sxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da11      	bge.n	8006ed2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006eba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	88d2      	ldrh	r2, [r2, #6]
 8006ec0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ec2:	6939      	ldr	r1, [r7, #16]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	88db      	ldrh	r3, [r3, #6]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fa09 	bl	80082e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006ed0:	e06b      	b.n	8006faa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	785a      	ldrb	r2, [r3, #1]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	88db      	ldrh	r3, [r3, #6]
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ee8:	6939      	ldr	r1, [r7, #16]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	88db      	ldrh	r3, [r3, #6]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 fa24 	bl	800833e <USBD_CtlPrepareRx>
      break;
 8006ef6:	e058      	b.n	8006faa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	7850      	ldrb	r0, [r2, #1]
 8006f04:	2200      	movs	r2, #0
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	4798      	blx	r3
      break;
 8006f0a:	e04e      	b.n	8006faa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b0b      	cmp	r3, #11
 8006f12:	d02e      	beq.n	8006f72 <USBD_CDC_Setup+0x104>
 8006f14:	2b0b      	cmp	r3, #11
 8006f16:	dc38      	bgt.n	8006f8a <USBD_CDC_Setup+0x11c>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <USBD_CDC_Setup+0xb4>
 8006f1c:	2b0a      	cmp	r3, #10
 8006f1e:	d014      	beq.n	8006f4a <USBD_CDC_Setup+0xdc>
 8006f20:	e033      	b.n	8006f8a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d107      	bne.n	8006f3c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f2c:	f107 030c 	add.w	r3, r7, #12
 8006f30:	2202      	movs	r2, #2
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 f9d4 	bl	80082e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f3a:	e02e      	b.n	8006f9a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 f965 	bl	800820e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f44:	2302      	movs	r3, #2
 8006f46:	75fb      	strb	r3, [r7, #23]
          break;
 8006f48:	e027      	b.n	8006f9a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d107      	bne.n	8006f64 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f54:	f107 030f 	add.w	r3, r7, #15
 8006f58:	2201      	movs	r2, #1
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 f9c0 	bl	80082e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f62:	e01a      	b.n	8006f9a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f951 	bl	800820e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	75fb      	strb	r3, [r7, #23]
          break;
 8006f70:	e013      	b.n	8006f9a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d00d      	beq.n	8006f98 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 f945 	bl	800820e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f84:	2302      	movs	r3, #2
 8006f86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f88:	e006      	b.n	8006f98 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 f93e 	bl	800820e <USBD_CtlError>
          ret = USBD_FAIL;
 8006f92:	2302      	movs	r3, #2
 8006f94:	75fb      	strb	r3, [r7, #23]
          break;
 8006f96:	e000      	b.n	8006f9a <USBD_CDC_Setup+0x12c>
          break;
 8006f98:	bf00      	nop
      }
      break;
 8006f9a:	e006      	b.n	8006faa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 f935 	bl	800820e <USBD_CtlError>
      ret = USBD_FAIL;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa8:	bf00      	nop
  }

  return ret;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d03a      	beq.n	8007050 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	331c      	adds	r3, #28
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d029      	beq.n	8007044 <USBD_CDC_DataIn+0x90>
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	331c      	adds	r3, #28
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	78f9      	ldrb	r1, [r7, #3]
 8007004:	68b8      	ldr	r0, [r7, #8]
 8007006:	460b      	mov	r3, r1
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4403      	add	r3, r0
 8007010:	3338      	adds	r3, #56	; 0x38
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	fbb2 f1f3 	udiv	r1, r2, r3
 8007018:	fb03 f301 	mul.w	r3, r3, r1
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d110      	bne.n	8007044 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	331c      	adds	r3, #28
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007036:	78f9      	ldrb	r1, [r7, #3]
 8007038:	2300      	movs	r3, #0
 800703a:	2200      	movs	r2, #0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fdf8 	bl	8008c32 <USBD_LL_Transmit>
 8007042:	e003      	b.n	800704c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	e000      	b.n	8007052 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007050:	2302      	movs	r3, #2
  }
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 fe23 	bl	8008cbe <USBD_LL_GetRxDataSize>
 8007078:	4602      	mov	r2, r0
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00d      	beq.n	80070a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800709e:	4611      	mov	r1, r2
 80070a0:	4798      	blx	r3

    return USBD_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e000      	b.n	80070a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80070a6:	2302      	movs	r3, #2
  }
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d015      	beq.n	80070f6 <USBD_CDC_EP0_RxReady+0x46>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070d0:	2bff      	cmp	r3, #255	; 0xff
 80070d2:	d010      	beq.n	80070f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80070e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070ea:	b292      	uxth	r2, r2
 80070ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	22ff      	movs	r2, #255	; 0xff
 80070f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2243      	movs	r2, #67	; 0x43
 800710c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800710e:	4b03      	ldr	r3, [pc, #12]	; (800711c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007110:	4618      	mov	r0, r3
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	200000b0 	.word	0x200000b0

08007120 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2243      	movs	r2, #67	; 0x43
 800712c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800712e:	4b03      	ldr	r3, [pc, #12]	; (800713c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	bc80      	pop	{r7}
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	2000006c 	.word	0x2000006c

08007140 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2243      	movs	r2, #67	; 0x43
 800714c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800714e:	4b03      	ldr	r3, [pc, #12]	; (800715c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	bc80      	pop	{r7}
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	200000f4 	.word	0x200000f4

08007160 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	220a      	movs	r2, #10
 800716c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800716e:	4b03      	ldr	r3, [pc, #12]	; (800717c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000028 	.word	0x20000028

08007180 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800718a:	2302      	movs	r3, #2
 800718c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr

080071ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr

080071de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80071de:	b480      	push	{r7}
 80071e0:	b085      	sub	sp, #20
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	bc80      	pop	{r7}
 8007202:	4770      	bx	lr

08007204 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007212:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01c      	beq.n	8007258 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007224:	2b00      	cmp	r3, #0
 8007226:	d115      	bne.n	8007254 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007246:	b29b      	uxth	r3, r3
 8007248:	2181      	movs	r1, #129	; 0x81
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fcf1 	bl	8008c32 <USBD_LL_Transmit>

      return USBD_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	e002      	b.n	800725a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007254:	2301      	movs	r3, #1
 8007256:	e000      	b.n	800725a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007258:	2302      	movs	r3, #2
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007270:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007278:	2b00      	cmp	r3, #0
 800727a:	d017      	beq.n	80072ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	7c1b      	ldrb	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d109      	bne.n	8007298 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800728a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800728e:	2101      	movs	r1, #1
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fcf1 	bl	8008c78 <USBD_LL_PrepareReceive>
 8007296:	e007      	b.n	80072a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800729e:	2340      	movs	r3, #64	; 0x40
 80072a0:	2101      	movs	r1, #1
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fce8 	bl	8008c78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e000      	b.n	80072ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80072ac:	2302      	movs	r3, #2
  }
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	60f8      	str	r0, [r7, #12]
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	4613      	mov	r3, r2
 80072c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80072ca:	2302      	movs	r3, #2
 80072cc:	e01a      	b.n	8007304 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	79fa      	ldrb	r2, [r7, #7]
 80072fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f001 fb55 	bl	80089ac <USBD_LL_Init>

  return USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
 800732c:	e001      	b.n	8007332 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800732e:	2302      	movs	r3, #2
 8007330:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007332:	7bfb      	ldrb	r3, [r7, #15]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr

0800733e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fb8a 	bl	8008a60 <USBD_LL_Start>

  return USBD_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr

0800736a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007376:	2302      	movs	r3, #2
 8007378:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00c      	beq.n	800739e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	78fa      	ldrb	r2, [r7, #3]
 800738e:	4611      	mov	r1, r2
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	78fa      	ldrb	r2, [r7, #3]
 80073be:	4611      	mov	r1, r2
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	4798      	blx	r3

  return USBD_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fed8 	bl	8008196 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073f4:	461a      	mov	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	2b02      	cmp	r3, #2
 8007408:	d016      	beq.n	8007438 <USBD_LL_SetupStage+0x6a>
 800740a:	2b02      	cmp	r3, #2
 800740c:	d81c      	bhi.n	8007448 <USBD_LL_SetupStage+0x7a>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <USBD_LL_SetupStage+0x4a>
 8007412:	2b01      	cmp	r3, #1
 8007414:	d008      	beq.n	8007428 <USBD_LL_SetupStage+0x5a>
 8007416:	e017      	b.n	8007448 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f9cb 	bl	80077bc <USBD_StdDevReq>
      break;
 8007426:	e01a      	b.n	800745e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fa2d 	bl	8007890 <USBD_StdItfReq>
      break;
 8007436:	e012      	b.n	800745e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fa6d 	bl	8007920 <USBD_StdEPReq>
      break;
 8007446:	e00a      	b.n	800745e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800744e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007452:	b2db      	uxtb	r3, r3
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 fb62 	bl	8008b20 <USBD_LL_StallEP>
      break;
 800745c:	bf00      	nop
  }

  return USBD_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	460b      	mov	r3, r1
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d14b      	bne.n	8007514 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007482:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800748a:	2b03      	cmp	r3, #3
 800748c:	d134      	bne.n	80074f8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	429a      	cmp	r2, r3
 8007498:	d919      	bls.n	80074ce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	1ad2      	subs	r2, r2, r3
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d203      	bcs.n	80074bc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	e002      	b.n	80074c2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 ff57 	bl	800837a <USBD_CtlContinueRx>
 80074cc:	e038      	b.n	8007540 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d105      	bne.n	80074f0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 ff54 	bl	800839e <USBD_CtlSendStatus>
 80074f6:	e023      	b.n	8007540 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074fe:	2b05      	cmp	r3, #5
 8007500:	d11e      	bne.n	8007540 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800750a:	2100      	movs	r1, #0
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f001 fb07 	bl	8008b20 <USBD_LL_StallEP>
 8007512:	e015      	b.n	8007540 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00d      	beq.n	800753c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007526:	2b03      	cmp	r3, #3
 8007528:	d108      	bne.n	800753c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	7afa      	ldrb	r2, [r7, #11]
 8007534:	4611      	mov	r1, r2
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	4798      	blx	r3
 800753a:	e001      	b.n	8007540 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800753c:	2302      	movs	r3, #2
 800753e:	e000      	b.n	8007542 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b086      	sub	sp, #24
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	460b      	mov	r3, r1
 8007554:	607a      	str	r2, [r7, #4]
 8007556:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007558:	7afb      	ldrb	r3, [r7, #11]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d17f      	bne.n	800765e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3314      	adds	r3, #20
 8007562:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800756a:	2b02      	cmp	r3, #2
 800756c:	d15c      	bne.n	8007628 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	429a      	cmp	r2, r3
 8007578:	d915      	bls.n	80075a6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	1ad2      	subs	r2, r2, r3
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	b29b      	uxth	r3, r3
 800758e:	461a      	mov	r2, r3
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fec1 	bl	800831a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007598:	2300      	movs	r3, #0
 800759a:	2200      	movs	r2, #0
 800759c:	2100      	movs	r1, #0
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f001 fb6a 	bl	8008c78 <USBD_LL_PrepareReceive>
 80075a4:	e04e      	b.n	8007644 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	6912      	ldr	r2, [r2, #16]
 80075ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80075b2:	fb02 f201 	mul.w	r2, r2, r1
 80075b6:	1a9b      	subs	r3, r3, r2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d11c      	bne.n	80075f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d316      	bcc.n	80075f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d20f      	bcs.n	80075f6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075d6:	2200      	movs	r2, #0
 80075d8:	2100      	movs	r1, #0
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fe9d 	bl	800831a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075e8:	2300      	movs	r3, #0
 80075ea:	2200      	movs	r2, #0
 80075ec:	2100      	movs	r1, #0
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f001 fb42 	bl	8008c78 <USBD_LL_PrepareReceive>
 80075f4:	e026      	b.n	8007644 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00a      	beq.n	8007618 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007608:	2b03      	cmp	r3, #3
 800760a:	d105      	bne.n	8007618 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007618:	2180      	movs	r1, #128	; 0x80
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f001 fa80 	bl	8008b20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fecf 	bl	80083c4 <USBD_CtlReceiveStatus>
 8007626:	e00d      	b.n	8007644 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800762e:	2b04      	cmp	r3, #4
 8007630:	d004      	beq.n	800763c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800763c:	2180      	movs	r1, #128	; 0x80
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f001 fa6e 	bl	8008b20 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800764a:	2b01      	cmp	r3, #1
 800764c:	d11d      	bne.n	800768a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f7ff fe81 	bl	8007356 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800765c:	e015      	b.n	800768a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00d      	beq.n	8007686 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007670:	2b03      	cmp	r3, #3
 8007672:	d108      	bne.n	8007686 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	7afa      	ldrb	r2, [r7, #11]
 800767e:	4611      	mov	r1, r2
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	4798      	blx	r3
 8007684:	e001      	b.n	800768a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007686:	2302      	movs	r3, #2
 8007688:	e000      	b.n	800768c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800769c:	2340      	movs	r3, #64	; 0x40
 800769e:	2200      	movs	r2, #0
 80076a0:	2100      	movs	r1, #0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 f9f7 	bl	8008a96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2240      	movs	r2, #64	; 0x40
 80076b4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076b8:	2340      	movs	r3, #64	; 0x40
 80076ba:	2200      	movs	r2, #0
 80076bc:	2180      	movs	r1, #128	; 0x80
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 f9e9 	bl	8008a96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2240      	movs	r2, #64	; 0x40
 80076ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d009      	beq.n	800770c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6852      	ldr	r2, [r2, #4]
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	4611      	mov	r1, r2
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	4798      	blx	r3
  }

  return USBD_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	78fa      	ldrb	r2, [r7, #3]
 8007726:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	bc80      	pop	{r7}
 8007732:	4770      	bx	lr

08007734 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2204      	movs	r2, #4
 800774c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr

0800775c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776a:	2b04      	cmp	r3, #4
 800776c:	d105      	bne.n	800777a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	bc80      	pop	{r7}
 8007784:	4770      	bx	lr

08007786 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007794:	2b03      	cmp	r3, #3
 8007796:	d10b      	bne.n	80077b0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	d005      	beq.n	80077e2 <USBD_StdDevReq+0x26>
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d84f      	bhi.n	800787a <USBD_StdDevReq+0xbe>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d009      	beq.n	80077f2 <USBD_StdDevReq+0x36>
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d14b      	bne.n	800787a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
      break;
 80077f0:	e048      	b.n	8007884 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	2b09      	cmp	r3, #9
 80077f8:	d839      	bhi.n	800786e <USBD_StdDevReq+0xb2>
 80077fa:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <USBD_StdDevReq+0x44>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007851 	.word	0x08007851
 8007804:	08007865 	.word	0x08007865
 8007808:	0800786f 	.word	0x0800786f
 800780c:	0800785b 	.word	0x0800785b
 8007810:	0800786f 	.word	0x0800786f
 8007814:	08007833 	.word	0x08007833
 8007818:	08007829 	.word	0x08007829
 800781c:	0800786f 	.word	0x0800786f
 8007820:	08007847 	.word	0x08007847
 8007824:	0800783d 	.word	0x0800783d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f9dc 	bl	8007be8 <USBD_GetDescriptor>
          break;
 8007830:	e022      	b.n	8007878 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fb3f 	bl	8007eb8 <USBD_SetAddress>
          break;
 800783a:	e01d      	b.n	8007878 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fb7e 	bl	8007f40 <USBD_SetConfig>
          break;
 8007844:	e018      	b.n	8007878 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fc07 	bl	800805c <USBD_GetConfig>
          break;
 800784e:	e013      	b.n	8007878 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fc37 	bl	80080c6 <USBD_GetStatus>
          break;
 8007858:	e00e      	b.n	8007878 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fc65 	bl	800812c <USBD_SetFeature>
          break;
 8007862:	e009      	b.n	8007878 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fc74 	bl	8008154 <USBD_ClrFeature>
          break;
 800786c:	e004      	b.n	8007878 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fccc 	bl	800820e <USBD_CtlError>
          break;
 8007876:	bf00      	nop
      }
      break;
 8007878:	e004      	b.n	8007884 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fcc6 	bl	800820e <USBD_CtlError>
      break;
 8007882:	bf00      	nop
  }

  return ret;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop

08007890 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078a6:	2b40      	cmp	r3, #64	; 0x40
 80078a8:	d005      	beq.n	80078b6 <USBD_StdItfReq+0x26>
 80078aa:	2b40      	cmp	r3, #64	; 0x40
 80078ac:	d82e      	bhi.n	800790c <USBD_StdItfReq+0x7c>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <USBD_StdItfReq+0x26>
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d12a      	bne.n	800790c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078bc:	3b01      	subs	r3, #1
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d81d      	bhi.n	80078fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	889b      	ldrh	r3, [r3, #4]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d813      	bhi.n	80078f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	88db      	ldrh	r3, [r3, #6]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d110      	bne.n	8007908 <USBD_StdItfReq+0x78>
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10d      	bne.n	8007908 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fd56 	bl	800839e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078f2:	e009      	b.n	8007908 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fc89 	bl	800820e <USBD_CtlError>
          break;
 80078fc:	e004      	b.n	8007908 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fc84 	bl	800820e <USBD_CtlError>
          break;
 8007906:	e000      	b.n	800790a <USBD_StdItfReq+0x7a>
          break;
 8007908:	bf00      	nop
      }
      break;
 800790a:	e004      	b.n	8007916 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fc7d 	bl	800820e <USBD_CtlError>
      break;
 8007914:	bf00      	nop
  }

  return USBD_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	889b      	ldrh	r3, [r3, #4]
 8007932:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800793c:	2b40      	cmp	r3, #64	; 0x40
 800793e:	d007      	beq.n	8007950 <USBD_StdEPReq+0x30>
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	f200 8146 	bhi.w	8007bd2 <USBD_StdEPReq+0x2b2>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <USBD_StdEPReq+0x40>
 800794a:	2b20      	cmp	r3, #32
 800794c:	f040 8141 	bne.w	8007bd2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
      break;
 800795e:	e13d      	b.n	8007bdc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007968:	2b20      	cmp	r3, #32
 800796a:	d10a      	bne.n	8007982 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
 800797a:	4603      	mov	r3, r0
 800797c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	e12d      	b.n	8007bde <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2b03      	cmp	r3, #3
 8007988:	d007      	beq.n	800799a <USBD_StdEPReq+0x7a>
 800798a:	2b03      	cmp	r3, #3
 800798c:	f300 811b 	bgt.w	8007bc6 <USBD_StdEPReq+0x2a6>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d072      	beq.n	8007a7a <USBD_StdEPReq+0x15a>
 8007994:	2b01      	cmp	r3, #1
 8007996:	d03a      	beq.n	8007a0e <USBD_StdEPReq+0xee>
 8007998:	e115      	b.n	8007bc6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d002      	beq.n	80079aa <USBD_StdEPReq+0x8a>
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	d015      	beq.n	80079d4 <USBD_StdEPReq+0xb4>
 80079a8:	e02b      	b.n	8007a02 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00c      	beq.n	80079ca <USBD_StdEPReq+0xaa>
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	d009      	beq.n	80079ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 f8b0 	bl	8008b20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079c0:	2180      	movs	r1, #128	; 0x80
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 f8ac 	bl	8008b20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079c8:	e020      	b.n	8007a0c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc1e 	bl	800820e <USBD_CtlError>
              break;
 80079d2:	e01b      	b.n	8007a0c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	885b      	ldrh	r3, [r3, #2]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10e      	bne.n	80079fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <USBD_StdEPReq+0xda>
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	2b80      	cmp	r3, #128	; 0x80
 80079e6:	d008      	beq.n	80079fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	88db      	ldrh	r3, [r3, #6]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 f893 	bl	8008b20 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fccf 	bl	800839e <USBD_CtlSendStatus>

              break;
 8007a00:	e004      	b.n	8007a0c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 fc02 	bl	800820e <USBD_CtlError>
              break;
 8007a0a:	bf00      	nop
          }
          break;
 8007a0c:	e0e0      	b.n	8007bd0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d002      	beq.n	8007a1e <USBD_StdEPReq+0xfe>
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d015      	beq.n	8007a48 <USBD_StdEPReq+0x128>
 8007a1c:	e026      	b.n	8007a6c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00c      	beq.n	8007a3e <USBD_StdEPReq+0x11e>
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b80      	cmp	r3, #128	; 0x80
 8007a28:	d009      	beq.n	8007a3e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 f876 	bl	8008b20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a34:	2180      	movs	r1, #128	; 0x80
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 f872 	bl	8008b20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a3c:	e01c      	b.n	8007a78 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fbe4 	bl	800820e <USBD_CtlError>
              break;
 8007a46:	e017      	b.n	8007a78 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	885b      	ldrh	r3, [r3, #2]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d112      	bne.n	8007a76 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 f87d 	bl	8008b5e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fc9a 	bl	800839e <USBD_CtlSendStatus>
              }
              break;
 8007a6a:	e004      	b.n	8007a76 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fbcd 	bl	800820e <USBD_CtlError>
              break;
 8007a74:	e000      	b.n	8007a78 <USBD_StdEPReq+0x158>
              break;
 8007a76:	bf00      	nop
          }
          break;
 8007a78:	e0aa      	b.n	8007bd0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d002      	beq.n	8007a8a <USBD_StdEPReq+0x16a>
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d032      	beq.n	8007aee <USBD_StdEPReq+0x1ce>
 8007a88:	e097      	b.n	8007bba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <USBD_StdEPReq+0x180>
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b80      	cmp	r3, #128	; 0x80
 8007a94:	d004      	beq.n	8007aa0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fbb8 	bl	800820e <USBD_CtlError>
                break;
 8007a9e:	e091      	b.n	8007bc4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	da0b      	bge.n	8007ac0 <USBD_StdEPReq+0x1a0>
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	3310      	adds	r3, #16
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	4413      	add	r3, r2
 8007abc:	3304      	adds	r3, #4
 8007abe:	e00b      	b.n	8007ad8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fbfb 	bl	80082e2 <USBD_CtlSendData>
              break;
 8007aec:	e06a      	b.n	8007bc4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	da11      	bge.n	8007b1a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	f003 020f 	and.w	r2, r3, #15
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	440b      	add	r3, r1
 8007b08:	3318      	adds	r3, #24
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d117      	bne.n	8007b40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fb7b 	bl	800820e <USBD_CtlError>
                  break;
 8007b18:	e054      	b.n	8007bc4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	f003 020f 	and.w	r2, r3, #15
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d104      	bne.n	8007b40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fb68 	bl	800820e <USBD_CtlError>
                  break;
 8007b3e:	e041      	b.n	8007bc4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	da0b      	bge.n	8007b60 <USBD_StdEPReq+0x240>
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	3310      	adds	r3, #16
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	e00b      	b.n	8007b78 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	4413      	add	r3, r2
 8007b76:	3304      	adds	r3, #4
 8007b78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <USBD_StdEPReq+0x266>
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b80      	cmp	r3, #128	; 0x80
 8007b84:	d103      	bne.n	8007b8e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	e00e      	b.n	8007bac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 f802 	bl	8008b9c <USBD_LL_IsStallEP>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	e002      	b.n	8007bac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fb95 	bl	80082e2 <USBD_CtlSendData>
              break;
 8007bb8:	e004      	b.n	8007bc4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fb26 	bl	800820e <USBD_CtlError>
              break;
 8007bc2:	bf00      	nop
          }
          break;
 8007bc4:	e004      	b.n	8007bd0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fb20 	bl	800820e <USBD_CtlError>
          break;
 8007bce:	bf00      	nop
      }
      break;
 8007bd0:	e004      	b.n	8007bdc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fb1a 	bl	800820e <USBD_CtlError>
      break;
 8007bda:	bf00      	nop
  }

  return ret;
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	885b      	ldrh	r3, [r3, #2]
 8007c02:	0a1b      	lsrs	r3, r3, #8
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	2b06      	cmp	r3, #6
 8007c0a:	f200 8128 	bhi.w	8007e5e <USBD_GetDescriptor+0x276>
 8007c0e:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <USBD_GetDescriptor+0x2c>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c31 	.word	0x08007c31
 8007c18:	08007c49 	.word	0x08007c49
 8007c1c:	08007c89 	.word	0x08007c89
 8007c20:	08007e5f 	.word	0x08007e5f
 8007c24:	08007e5f 	.word	0x08007e5f
 8007c28:	08007dff 	.word	0x08007dff
 8007c2c:	08007e2b 	.word	0x08007e2b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7c12      	ldrb	r2, [r2, #16]
 8007c3c:	f107 0108 	add.w	r1, r7, #8
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
 8007c44:	60f8      	str	r0, [r7, #12]
      break;
 8007c46:	e112      	b.n	8007e6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	7c1b      	ldrb	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10d      	bne.n	8007c6c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	f107 0208 	add.w	r2, r7, #8
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
 8007c60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3301      	adds	r3, #1
 8007c66:	2202      	movs	r2, #2
 8007c68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c6a:	e100      	b.n	8007e6e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	f107 0208 	add.w	r2, r7, #8
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
 8007c7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3301      	adds	r3, #1
 8007c82:	2202      	movs	r2, #2
 8007c84:	701a      	strb	r2, [r3, #0]
      break;
 8007c86:	e0f2      	b.n	8007e6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	885b      	ldrh	r3, [r3, #2]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	f200 80ac 	bhi.w	8007dec <USBD_GetDescriptor+0x204>
 8007c94:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <USBD_GetDescriptor+0xb4>)
 8007c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9a:	bf00      	nop
 8007c9c:	08007cb5 	.word	0x08007cb5
 8007ca0:	08007ce9 	.word	0x08007ce9
 8007ca4:	08007d1d 	.word	0x08007d1d
 8007ca8:	08007d51 	.word	0x08007d51
 8007cac:	08007d85 	.word	0x08007d85
 8007cb0:	08007db9 	.word	0x08007db9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd6:	e091      	b.n	8007dfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa97 	bl	800820e <USBD_CtlError>
            err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce6:	e089      	b.n	8007dfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7c12      	ldrb	r2, [r2, #16]
 8007d00:	f107 0108 	add.w	r1, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0a:	e077      	b.n	8007dfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa7d 	bl	800820e <USBD_CtlError>
            err++;
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	3301      	adds	r3, #1
 8007d18:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1a:	e06f      	b.n	8007dfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7c12      	ldrb	r2, [r2, #16]
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d3e:	e05d      	b.n	8007dfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa63 	bl	800820e <USBD_CtlError>
            err++;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d4e:	e055      	b.n	8007dfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7c12      	ldrb	r2, [r2, #16]
 8007d68:	f107 0108 	add.w	r1, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d72:	e043      	b.n	8007dfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa49 	bl	800820e <USBD_CtlError>
            err++;
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	72fb      	strb	r3, [r7, #11]
          break;
 8007d82:	e03b      	b.n	8007dfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	7c12      	ldrb	r2, [r2, #16]
 8007d9c:	f107 0108 	add.w	r1, r7, #8
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007da6:	e029      	b.n	8007dfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa2f 	bl	800820e <USBD_CtlError>
            err++;
 8007db0:	7afb      	ldrb	r3, [r7, #11]
 8007db2:	3301      	adds	r3, #1
 8007db4:	72fb      	strb	r3, [r7, #11]
          break;
 8007db6:	e021      	b.n	8007dfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00b      	beq.n	8007ddc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	7c12      	ldrb	r2, [r2, #16]
 8007dd0:	f107 0108 	add.w	r1, r7, #8
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
 8007dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dda:	e00f      	b.n	8007dfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fa15 	bl	800820e <USBD_CtlError>
            err++;
 8007de4:	7afb      	ldrb	r3, [r7, #11]
 8007de6:	3301      	adds	r3, #1
 8007de8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dea:	e007      	b.n	8007dfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fa0d 	bl	800820e <USBD_CtlError>
          err++;
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	3301      	adds	r3, #1
 8007df8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007dfa:	e038      	b.n	8007e6e <USBD_GetDescriptor+0x286>
 8007dfc:	e037      	b.n	8007e6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	7c1b      	ldrb	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0e:	f107 0208 	add.w	r2, r7, #8
 8007e12:	4610      	mov	r0, r2
 8007e14:	4798      	blx	r3
 8007e16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e18:	e029      	b.n	8007e6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f9f6 	bl	800820e <USBD_CtlError>
        err++;
 8007e22:	7afb      	ldrb	r3, [r7, #11]
 8007e24:	3301      	adds	r3, #1
 8007e26:	72fb      	strb	r3, [r7, #11]
      break;
 8007e28:	e021      	b.n	8007e6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	7c1b      	ldrb	r3, [r3, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10d      	bne.n	8007e4e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	f107 0208 	add.w	r2, r7, #8
 8007e3e:	4610      	mov	r0, r2
 8007e40:	4798      	blx	r3
 8007e42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	2207      	movs	r2, #7
 8007e4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e4c:	e00f      	b.n	8007e6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f9dc 	bl	800820e <USBD_CtlError>
        err++;
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e5c:	e007      	b.n	8007e6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f9d4 	bl	800820e <USBD_CtlError>
      err++;
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e6c:	bf00      	nop
  }

  if (err != 0U)
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d11c      	bne.n	8007eae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e74:	893b      	ldrh	r3, [r7, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d011      	beq.n	8007e9e <USBD_GetDescriptor+0x2b6>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	88db      	ldrh	r3, [r3, #6]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00d      	beq.n	8007e9e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	88da      	ldrh	r2, [r3, #6]
 8007e86:	893b      	ldrh	r3, [r7, #8]
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	bf28      	it	cs
 8007e8c:	4613      	movcs	r3, r2
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e92:	893b      	ldrh	r3, [r7, #8]
 8007e94:	461a      	mov	r2, r3
 8007e96:	68f9      	ldr	r1, [r7, #12]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fa22 	bl	80082e2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	88db      	ldrh	r3, [r3, #6]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa79 	bl	800839e <USBD_CtlSendStatus>
 8007eac:	e000      	b.n	8007eb0 <USBD_GetDescriptor+0x2c8>
    return;
 8007eae:	bf00      	nop
    }
  }
}
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop

08007eb8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	889b      	ldrh	r3, [r3, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d130      	bne.n	8007f2c <USBD_SetAddress+0x74>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	88db      	ldrh	r3, [r3, #6]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d12c      	bne.n	8007f2c <USBD_SetAddress+0x74>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	885b      	ldrh	r3, [r3, #2]
 8007ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ed8:	d828      	bhi.n	8007f2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	885b      	ldrh	r3, [r3, #2]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d104      	bne.n	8007efa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f98b 	bl	800820e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef8:	e01d      	b.n	8007f36 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	7bfa      	ldrb	r2, [r7, #15]
 8007efe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fe74 	bl	8008bf4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fa46 	bl	800839e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f20:	e009      	b.n	8007f36 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2a:	e004      	b.n	8007f36 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f96d 	bl	800820e <USBD_CtlError>
  }
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	885b      	ldrh	r3, [r3, #2]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	4b41      	ldr	r3, [pc, #260]	; (8008058 <USBD_SetConfig+0x118>)
 8007f52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f54:	4b40      	ldr	r3, [pc, #256]	; (8008058 <USBD_SetConfig+0x118>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d904      	bls.n	8007f66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f955 	bl	800820e <USBD_CtlError>
 8007f64:	e075      	b.n	8008052 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d002      	beq.n	8007f76 <USBD_SetConfig+0x36>
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d023      	beq.n	8007fbc <USBD_SetConfig+0x7c>
 8007f74:	e062      	b.n	800803c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f76:	4b38      	ldr	r3, [pc, #224]	; (8008058 <USBD_SetConfig+0x118>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01a      	beq.n	8007fb4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007f7e:	4b36      	ldr	r3, [pc, #216]	; (8008058 <USBD_SetConfig+0x118>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f90:	4b31      	ldr	r3, [pc, #196]	; (8008058 <USBD_SetConfig+0x118>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff f9e7 	bl	800736a <USBD_SetClassConfig>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d104      	bne.n	8007fac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f932 	bl	800820e <USBD_CtlError>
            return;
 8007faa:	e052      	b.n	8008052 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f9f6 	bl	800839e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fb2:	e04e      	b.n	8008052 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f9f2 	bl	800839e <USBD_CtlSendStatus>
        break;
 8007fba:	e04a      	b.n	8008052 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007fbc:	4b26      	ldr	r3, [pc, #152]	; (8008058 <USBD_SetConfig+0x118>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d112      	bne.n	8007fea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007fcc:	4b22      	ldr	r3, [pc, #136]	; (8008058 <USBD_SetConfig+0x118>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007fd6:	4b20      	ldr	r3, [pc, #128]	; (8008058 <USBD_SetConfig+0x118>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff f9e3 	bl	80073a8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f9db 	bl	800839e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fe8:	e033      	b.n	8008052 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007fea:	4b1b      	ldr	r3, [pc, #108]	; (8008058 <USBD_SetConfig+0x118>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d01d      	beq.n	8008034 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff f9d1 	bl	80073a8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <USBD_SetConfig+0x118>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008010:	4b11      	ldr	r3, [pc, #68]	; (8008058 <USBD_SetConfig+0x118>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff f9a7 	bl	800736a <USBD_SetClassConfig>
 800801c:	4603      	mov	r3, r0
 800801e:	2b02      	cmp	r3, #2
 8008020:	d104      	bne.n	800802c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8f2 	bl	800820e <USBD_CtlError>
            return;
 800802a:	e012      	b.n	8008052 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f9b6 	bl	800839e <USBD_CtlSendStatus>
        break;
 8008032:	e00e      	b.n	8008052 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f9b2 	bl	800839e <USBD_CtlSendStatus>
        break;
 800803a:	e00a      	b.n	8008052 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8e5 	bl	800820e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008044:	4b04      	ldr	r3, [pc, #16]	; (8008058 <USBD_SetConfig+0x118>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff f9ac 	bl	80073a8 <USBD_ClrClassConfig>
        break;
 8008050:	bf00      	nop
    }
  }
}
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	2000030c 	.word	0x2000030c

0800805c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	88db      	ldrh	r3, [r3, #6]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d004      	beq.n	8008078 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f8cc 	bl	800820e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008076:	e022      	b.n	80080be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807e:	2b02      	cmp	r3, #2
 8008080:	dc02      	bgt.n	8008088 <USBD_GetConfig+0x2c>
 8008082:	2b00      	cmp	r3, #0
 8008084:	dc03      	bgt.n	800808e <USBD_GetConfig+0x32>
 8008086:	e015      	b.n	80080b4 <USBD_GetConfig+0x58>
 8008088:	2b03      	cmp	r3, #3
 800808a:	d00b      	beq.n	80080a4 <USBD_GetConfig+0x48>
 800808c:	e012      	b.n	80080b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3308      	adds	r3, #8
 8008098:	2201      	movs	r2, #1
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f920 	bl	80082e2 <USBD_CtlSendData>
        break;
 80080a2:	e00c      	b.n	80080be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3304      	adds	r3, #4
 80080a8:	2201      	movs	r2, #1
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f918 	bl	80082e2 <USBD_CtlSendData>
        break;
 80080b2:	e004      	b.n	80080be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f8a9 	bl	800820e <USBD_CtlError>
        break;
 80080bc:	bf00      	nop
}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d6:	3b01      	subs	r3, #1
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d81e      	bhi.n	800811a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	88db      	ldrh	r3, [r3, #6]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d004      	beq.n	80080ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f891 	bl	800820e <USBD_CtlError>
        break;
 80080ec:	e01a      	b.n	8008124 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f043 0202 	orr.w	r2, r3, #2
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	330c      	adds	r3, #12
 800810e:	2202      	movs	r2, #2
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f8e5 	bl	80082e2 <USBD_CtlSendData>
      break;
 8008118:	e004      	b.n	8008124 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f876 	bl	800820e <USBD_CtlError>
      break;
 8008122:	bf00      	nop
  }
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	885b      	ldrh	r3, [r3, #2]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d106      	bne.n	800814c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f929 	bl	800839e <USBD_CtlSendStatus>
  }
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008164:	3b01      	subs	r3, #1
 8008166:	2b02      	cmp	r3, #2
 8008168:	d80b      	bhi.n	8008182 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	885b      	ldrh	r3, [r3, #2]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d10c      	bne.n	800818c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f90f 	bl	800839e <USBD_CtlSendStatus>
      }
      break;
 8008180:	e004      	b.n	800818c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f842 	bl	800820e <USBD_CtlError>
      break;
 800818a:	e000      	b.n	800818e <USBD_ClrFeature+0x3a>
      break;
 800818c:	bf00      	nop
  }
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	785a      	ldrb	r2, [r3, #1]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	3302      	adds	r3, #2
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	3303      	adds	r3, #3
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	4413      	add	r3, r2
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	3304      	adds	r3, #4
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	3305      	adds	r3, #5
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	b29b      	uxth	r3, r3
 80081e0:	4413      	add	r3, r2
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	3306      	adds	r3, #6
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	3307      	adds	r3, #7
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4413      	add	r3, r2
 80081fe:	b29a      	uxth	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	80da      	strh	r2, [r3, #6]

}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bc80      	pop	{r7}
 800820c:	4770      	bx	lr

0800820e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008218:	2180      	movs	r1, #128	; 0x80
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fc80 	bl	8008b20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008220:	2100      	movs	r1, #0
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fc7c 	bl	8008b20 <USBD_LL_StallEP>
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800823c:	2300      	movs	r3, #0
 800823e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d032      	beq.n	80082ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 f834 	bl	80082b4 <USBD_GetLen>
 800824c:	4603      	mov	r3, r0
 800824e:	3301      	adds	r3, #1
 8008250:	b29b      	uxth	r3, r3
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	b29a      	uxth	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800825a:	7dfb      	ldrb	r3, [r7, #23]
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	75fa      	strb	r2, [r7, #23]
 8008260:	461a      	mov	r2, r3
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	4413      	add	r3, r2
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	7812      	ldrb	r2, [r2, #0]
 800826a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	75fa      	strb	r2, [r7, #23]
 8008272:	461a      	mov	r2, r3
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	4413      	add	r3, r2
 8008278:	2203      	movs	r2, #3
 800827a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800827c:	e012      	b.n	80082a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	60fa      	str	r2, [r7, #12]
 8008284:	7dfa      	ldrb	r2, [r7, #23]
 8008286:	1c51      	adds	r1, r2, #1
 8008288:	75f9      	strb	r1, [r7, #23]
 800828a:	4611      	mov	r1, r2
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	440a      	add	r2, r1
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	75fa      	strb	r2, [r7, #23]
 800829a:	461a      	mov	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4413      	add	r3, r2
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e8      	bne.n	800827e <USBD_GetString+0x4e>
    }
  }
}
 80082ac:	bf00      	nop
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80082c0:	e005      	b.n	80082ce <USBD_GetLen+0x1a>
  {
    len++;
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	3301      	adds	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3301      	adds	r3, #1
 80082cc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1f5      	bne.n	80082c2 <USBD_GetLen+0xe>
  }

  return len;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	4613      	mov	r3, r2
 80082ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082f8:	88fa      	ldrh	r2, [r7, #6]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80082fe:	88fa      	ldrh	r2, [r7, #6]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008304:	88fb      	ldrh	r3, [r7, #6]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	2100      	movs	r1, #0
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fc91 	bl	8008c32 <USBD_LL_Transmit>

  return USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	4613      	mov	r3, r2
 8008326:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008328:	88fb      	ldrh	r3, [r7, #6]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	2100      	movs	r1, #0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fc7f 	bl	8008c32 <USBD_LL_Transmit>

  return USBD_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	4613      	mov	r3, r2
 800834a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2203      	movs	r2, #3
 8008350:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008354:	88fa      	ldrh	r2, [r7, #6]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800835c:	88fa      	ldrh	r2, [r7, #6]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	2100      	movs	r1, #0
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fc84 	bl	8008c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	4613      	mov	r3, r2
 8008386:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008388:	88fb      	ldrh	r3, [r7, #6]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	2100      	movs	r1, #0
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fc72 	bl	8008c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2204      	movs	r2, #4
 80083aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083ae:	2300      	movs	r3, #0
 80083b0:	2200      	movs	r2, #0
 80083b2:	2100      	movs	r1, #0
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc3c 	bl	8008c32 <USBD_LL_Transmit>

  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2205      	movs	r2, #5
 80083d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083d4:	2300      	movs	r3, #0
 80083d6:	2200      	movs	r2, #0
 80083d8:	2100      	movs	r1, #0
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fc4c 	bl	8008c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083f0:	2200      	movs	r2, #0
 80083f2:	4912      	ldr	r1, [pc, #72]	; (800843c <MX_USB_DEVICE_Init+0x50>)
 80083f4:	4812      	ldr	r0, [pc, #72]	; (8008440 <MX_USB_DEVICE_Init+0x54>)
 80083f6:	f7fe ff5e 	bl	80072b6 <USBD_Init>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008400:	f7f8 fcea 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008404:	490f      	ldr	r1, [pc, #60]	; (8008444 <MX_USB_DEVICE_Init+0x58>)
 8008406:	480e      	ldr	r0, [pc, #56]	; (8008440 <MX_USB_DEVICE_Init+0x54>)
 8008408:	f7fe ff80 	bl	800730c <USBD_RegisterClass>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008412:	f7f8 fce1 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008416:	490c      	ldr	r1, [pc, #48]	; (8008448 <MX_USB_DEVICE_Init+0x5c>)
 8008418:	4809      	ldr	r0, [pc, #36]	; (8008440 <MX_USB_DEVICE_Init+0x54>)
 800841a:	f7fe feb1 	bl	8007180 <USBD_CDC_RegisterInterface>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008424:	f7f8 fcd8 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008428:	4805      	ldr	r0, [pc, #20]	; (8008440 <MX_USB_DEVICE_Init+0x54>)
 800842a:	f7fe ff88 	bl	800733e <USBD_Start>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008434:	f7f8 fcd0 	bl	8000dd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008438:	bf00      	nop
 800843a:	bd80      	pop	{r7, pc}
 800843c:	20000148 	.word	0x20000148
 8008440:	20000650 	.word	0x20000650
 8008444:	20000034 	.word	0x20000034
 8008448:	20000138 	.word	0x20000138

0800844c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008450:	2200      	movs	r2, #0
 8008452:	4905      	ldr	r1, [pc, #20]	; (8008468 <CDC_Init_FS+0x1c>)
 8008454:	4805      	ldr	r0, [pc, #20]	; (800846c <CDC_Init_FS+0x20>)
 8008456:	f7fe fea9 	bl	80071ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800845a:	4905      	ldr	r1, [pc, #20]	; (8008470 <CDC_Init_FS+0x24>)
 800845c:	4803      	ldr	r0, [pc, #12]	; (800846c <CDC_Init_FS+0x20>)
 800845e:	f7fe febe 	bl	80071de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008462:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008464:	4618      	mov	r0, r3
 8008466:	bd80      	pop	{r7, pc}
 8008468:	20000cfc 	.word	0x20000cfc
 800846c:	20000650 	.word	0x20000650
 8008470:	20000914 	.word	0x20000914

08008474 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008478:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800847a:	4618      	mov	r0, r3
 800847c:	46bd      	mov	sp, r7
 800847e:	bc80      	pop	{r7}
 8008480:	4770      	bx	lr
	...

08008484 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	6039      	str	r1, [r7, #0]
 800848e:	71fb      	strb	r3, [r7, #7]
 8008490:	4613      	mov	r3, r2
 8008492:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	2b23      	cmp	r3, #35	; 0x23
 8008498:	d84a      	bhi.n	8008530 <CDC_Control_FS+0xac>
 800849a:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <CDC_Control_FS+0x1c>)
 800849c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a0:	08008531 	.word	0x08008531
 80084a4:	08008531 	.word	0x08008531
 80084a8:	08008531 	.word	0x08008531
 80084ac:	08008531 	.word	0x08008531
 80084b0:	08008531 	.word	0x08008531
 80084b4:	08008531 	.word	0x08008531
 80084b8:	08008531 	.word	0x08008531
 80084bc:	08008531 	.word	0x08008531
 80084c0:	08008531 	.word	0x08008531
 80084c4:	08008531 	.word	0x08008531
 80084c8:	08008531 	.word	0x08008531
 80084cc:	08008531 	.word	0x08008531
 80084d0:	08008531 	.word	0x08008531
 80084d4:	08008531 	.word	0x08008531
 80084d8:	08008531 	.word	0x08008531
 80084dc:	08008531 	.word	0x08008531
 80084e0:	08008531 	.word	0x08008531
 80084e4:	08008531 	.word	0x08008531
 80084e8:	08008531 	.word	0x08008531
 80084ec:	08008531 	.word	0x08008531
 80084f0:	08008531 	.word	0x08008531
 80084f4:	08008531 	.word	0x08008531
 80084f8:	08008531 	.word	0x08008531
 80084fc:	08008531 	.word	0x08008531
 8008500:	08008531 	.word	0x08008531
 8008504:	08008531 	.word	0x08008531
 8008508:	08008531 	.word	0x08008531
 800850c:	08008531 	.word	0x08008531
 8008510:	08008531 	.word	0x08008531
 8008514:	08008531 	.word	0x08008531
 8008518:	08008531 	.word	0x08008531
 800851c:	08008531 	.word	0x08008531
 8008520:	08008531 	.word	0x08008531
 8008524:	08008531 	.word	0x08008531
 8008528:	08008531 	.word	0x08008531
 800852c:	08008531 	.word	0x08008531
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008530:	bf00      	nop
  }

  return (USBD_OK);
 8008532:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop

08008540 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
 /*  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	4819      	ldr	r0, [pc, #100]	; (80085b4 <CDC_Receive_FS+0x74>)
 800854e:	f7fe fe46 	bl	80071de <USBD_CDC_SetRxBuffer>
  for(int16_t i=0; i<*Len; i++) {
 8008552:	2300      	movs	r3, #0
 8008554:	81fb      	strh	r3, [r7, #14]
 8008556:	e01c      	b.n	8008592 <CDC_Receive_FS+0x52>
	  if(Buf[i] != '\r') {
 8008558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	4413      	add	r3, r2
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	2b0d      	cmp	r3, #13
 8008564:	d009      	beq.n	800857a <CDC_Receive_FS+0x3a>
		  CDCbuffer[i] = Buf[i];
 8008566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	441a      	add	r2, r3
 800856e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008572:	7811      	ldrb	r1, [r2, #0]
 8008574:	4a10      	ldr	r2, [pc, #64]	; (80085b8 <CDC_Receive_FS+0x78>)
 8008576:	54d1      	strb	r1, [r2, r3]
 8008578:	e005      	b.n	8008586 <CDC_Receive_FS+0x46>
	  }
	  else {
		  CDCbuffer[i] = '\0';
 800857a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800857e:	4a0e      	ldr	r2, [pc, #56]	; (80085b8 <CDC_Receive_FS+0x78>)
 8008580:	2100      	movs	r1, #0
 8008582:	54d1      	strb	r1, [r2, r3]
		  break;
 8008584:	e00b      	b.n	800859e <CDC_Receive_FS+0x5e>
  for(int16_t i=0; i<*Len; i++) {
 8008586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800858a:	b29b      	uxth	r3, r3
 800858c:	3301      	adds	r3, #1
 800858e:	b29b      	uxth	r3, r3
 8008590:	81fb      	strh	r3, [r7, #14]
 8008592:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d3dc      	bcc.n	8008558 <CDC_Receive_FS+0x18>
	  }
  }
  CDC_flag = 1;
 800859e:	4b07      	ldr	r3, [pc, #28]	; (80085bc <CDC_Receive_FS+0x7c>)
 80085a0:	2201      	movs	r2, #1
 80085a2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085a4:	4803      	ldr	r0, [pc, #12]	; (80085b4 <CDC_Receive_FS+0x74>)
 80085a6:	f7fe fe5c 	bl	8007262 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085aa:	2300      	movs	r3, #0


  /* USER CODE END 6 */
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20000650 	.word	0x20000650
 80085b8:	2000021c 	.word	0x2000021c
 80085bc:	2000021a 	.word	0x2000021a

080085c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085d0:	4b0d      	ldr	r3, [pc, #52]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e00b      	b.n	80085fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4806      	ldr	r0, [pc, #24]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085ee:	f7fe fddd 	bl	80071ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085f4:	f7fe fe06 	bl	8007204 <USBD_CDC_TransmitPacket>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000650 	.word	0x20000650

0800860c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	6039      	str	r1, [r7, #0]
 8008616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2212      	movs	r2, #18
 800861c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800861e:	4b03      	ldr	r3, [pc, #12]	; (800862c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	20000164 	.word	0x20000164

08008630 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2204      	movs	r2, #4
 8008640:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008642:	4b03      	ldr	r3, [pc, #12]	; (8008650 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20000178 	.word	0x20000178

08008654 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d105      	bne.n	8008672 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	4907      	ldr	r1, [pc, #28]	; (8008688 <USBD_FS_ProductStrDescriptor+0x34>)
 800866a:	4808      	ldr	r0, [pc, #32]	; (800868c <USBD_FS_ProductStrDescriptor+0x38>)
 800866c:	f7ff fde0 	bl	8008230 <USBD_GetString>
 8008670:	e004      	b.n	800867c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	4904      	ldr	r1, [pc, #16]	; (8008688 <USBD_FS_ProductStrDescriptor+0x34>)
 8008676:	4805      	ldr	r0, [pc, #20]	; (800868c <USBD_FS_ProductStrDescriptor+0x38>)
 8008678:	f7ff fdda 	bl	8008230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	200010e4 	.word	0x200010e4
 800868c:	0800a5f8 	.word	0x0800a5f8

08008690 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	6039      	str	r1, [r7, #0]
 800869a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	4904      	ldr	r1, [pc, #16]	; (80086b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086a0:	4804      	ldr	r0, [pc, #16]	; (80086b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086a2:	f7ff fdc5 	bl	8008230 <USBD_GetString>
  return USBD_StrDesc;
 80086a6:	4b02      	ldr	r3, [pc, #8]	; (80086b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	200010e4 	.word	0x200010e4
 80086b4:	0800a610 	.word	0x0800a610

080086b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	4603      	mov	r3, r0
 80086c0:	6039      	str	r1, [r7, #0]
 80086c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	221a      	movs	r2, #26
 80086c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086ca:	f000 f843 	bl	8008754 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086ce:	4b02      	ldr	r3, [pc, #8]	; (80086d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	2000017c 	.word	0x2000017c

080086dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	6039      	str	r1, [r7, #0]
 80086e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d105      	bne.n	80086fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	4907      	ldr	r1, [pc, #28]	; (8008710 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086f2:	4808      	ldr	r0, [pc, #32]	; (8008714 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086f4:	f7ff fd9c 	bl	8008230 <USBD_GetString>
 80086f8:	e004      	b.n	8008704 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	4904      	ldr	r1, [pc, #16]	; (8008710 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086fe:	4805      	ldr	r0, [pc, #20]	; (8008714 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008700:	f7ff fd96 	bl	8008230 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008704:	4b02      	ldr	r3, [pc, #8]	; (8008710 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200010e4 	.word	0x200010e4
 8008714:	0800a624 	.word	0x0800a624

08008718 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	6039      	str	r1, [r7, #0]
 8008722:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	4907      	ldr	r1, [pc, #28]	; (800874c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800872e:	4808      	ldr	r0, [pc, #32]	; (8008750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008730:	f7ff fd7e 	bl	8008230 <USBD_GetString>
 8008734:	e004      	b.n	8008740 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	4904      	ldr	r1, [pc, #16]	; (800874c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800873a:	4805      	ldr	r0, [pc, #20]	; (8008750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800873c:	f7ff fd78 	bl	8008230 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008740:	4b02      	ldr	r3, [pc, #8]	; (800874c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	200010e4 	.word	0x200010e4
 8008750:	0800a630 	.word	0x0800a630

08008754 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800875a:	4b0f      	ldr	r3, [pc, #60]	; (8008798 <Get_SerialNum+0x44>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008760:	4b0e      	ldr	r3, [pc, #56]	; (800879c <Get_SerialNum+0x48>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008766:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <Get_SerialNum+0x4c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4413      	add	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d009      	beq.n	800878e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800877a:	2208      	movs	r2, #8
 800877c:	4909      	ldr	r1, [pc, #36]	; (80087a4 <Get_SerialNum+0x50>)
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 f814 	bl	80087ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008784:	2204      	movs	r2, #4
 8008786:	4908      	ldr	r1, [pc, #32]	; (80087a8 <Get_SerialNum+0x54>)
 8008788:	68b8      	ldr	r0, [r7, #8]
 800878a:	f000 f80f 	bl	80087ac <IntToUnicode>
  }
}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	1ffff7e8 	.word	0x1ffff7e8
 800879c:	1ffff7ec 	.word	0x1ffff7ec
 80087a0:	1ffff7f0 	.word	0x1ffff7f0
 80087a4:	2000017e 	.word	0x2000017e
 80087a8:	2000018e 	.word	0x2000018e

080087ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b087      	sub	sp, #28
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	4613      	mov	r3, r2
 80087b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087be:	2300      	movs	r3, #0
 80087c0:	75fb      	strb	r3, [r7, #23]
 80087c2:	e027      	b.n	8008814 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	0f1b      	lsrs	r3, r3, #28
 80087c8:	2b09      	cmp	r3, #9
 80087ca:	d80b      	bhi.n	80087e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	0f1b      	lsrs	r3, r3, #28
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	4619      	mov	r1, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	440b      	add	r3, r1
 80087dc:	3230      	adds	r2, #48	; 0x30
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	e00a      	b.n	80087fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	0f1b      	lsrs	r3, r3, #28
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	4619      	mov	r1, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	440b      	add	r3, r1
 80087f4:	3237      	adds	r2, #55	; 0x37
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	3301      	adds	r3, #1
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	4413      	add	r3, r2
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	3301      	adds	r3, #1
 8008812:	75fb      	strb	r3, [r7, #23]
 8008814:	7dfa      	ldrb	r2, [r7, #23]
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	429a      	cmp	r2, r3
 800881a:	d3d3      	bcc.n	80087c4 <IntToUnicode+0x18>
  }
}
 800881c:	bf00      	nop
 800881e:	bf00      	nop
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	bc80      	pop	{r7}
 8008826:	4770      	bx	lr

08008828 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a0d      	ldr	r2, [pc, #52]	; (800886c <HAL_PCD_MspInit+0x44>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d113      	bne.n	8008862 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800883a:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <HAL_PCD_MspInit+0x48>)
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	4a0c      	ldr	r2, [pc, #48]	; (8008870 <HAL_PCD_MspInit+0x48>)
 8008840:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008844:	61d3      	str	r3, [r2, #28]
 8008846:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <HAL_PCD_MspInit+0x48>)
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008852:	2200      	movs	r2, #0
 8008854:	2100      	movs	r1, #0
 8008856:	2014      	movs	r0, #20
 8008858:	f7f8 fe61 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800885c:	2014      	movs	r0, #20
 800885e:	f7f8 fe7a 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40005c00 	.word	0x40005c00
 8008870:	40021000 	.word	0x40021000

08008874 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008888:	4619      	mov	r1, r3
 800888a:	4610      	mov	r0, r2
 800888c:	f7fe fd9f 	bl	80073ce <USBD_LL_SetupStage>
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	440b      	add	r3, r1
 80088b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	4619      	mov	r1, r3
 80088c2:	f7fe fdd1 	bl	8007468 <USBD_LL_DataOutStage>
}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80088e0:	78fa      	ldrb	r2, [r7, #3]
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	440b      	add	r3, r1
 80088ee:	333c      	adds	r3, #60	; 0x3c
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	4619      	mov	r1, r3
 80088f6:	f7fe fe28 	bl	800754a <USBD_LL_DataInStage>
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe ff38 	bl	8007786 <USBD_LL_SOF>
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008926:	2301      	movs	r3, #1
 8008928:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d001      	beq.n	8008936 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008932:	f7f8 fa51 	bl	8000dd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800893c:	7bfa      	ldrb	r2, [r7, #15]
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f7fe fee8 	bl	8007716 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe fea1 	bl	8007694 <USBD_LL_Reset>
}
 8008952:	bf00      	nop
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fee2 	bl	8007734 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008978:	4b04      	ldr	r3, [pc, #16]	; (800898c <HAL_PCD_SuspendCallback+0x30>)
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	4a03      	ldr	r2, [pc, #12]	; (800898c <HAL_PCD_SuspendCallback+0x30>)
 800897e:	f043 0306 	orr.w	r3, r3, #6
 8008982:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	e000ed00 	.word	0xe000ed00

08008990 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fedc 	bl	800775c <USBD_LL_Resume>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089b4:	4a28      	ldr	r2, [pc, #160]	; (8008a58 <USBD_LL_Init+0xac>)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a26      	ldr	r2, [pc, #152]	; (8008a58 <USBD_LL_Init+0xac>)
 80089c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80089c4:	4b24      	ldr	r3, [pc, #144]	; (8008a58 <USBD_LL_Init+0xac>)
 80089c6:	4a25      	ldr	r2, [pc, #148]	; (8008a5c <USBD_LL_Init+0xb0>)
 80089c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <USBD_LL_Init+0xac>)
 80089cc:	2208      	movs	r2, #8
 80089ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089d0:	4b21      	ldr	r3, [pc, #132]	; (8008a58 <USBD_LL_Init+0xac>)
 80089d2:	2202      	movs	r2, #2
 80089d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089d6:	4b20      	ldr	r3, [pc, #128]	; (8008a58 <USBD_LL_Init+0xac>)
 80089d8:	2200      	movs	r2, #0
 80089da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80089dc:	4b1e      	ldr	r3, [pc, #120]	; (8008a58 <USBD_LL_Init+0xac>)
 80089de:	2200      	movs	r2, #0
 80089e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089e2:	4b1d      	ldr	r3, [pc, #116]	; (8008a58 <USBD_LL_Init+0xac>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089e8:	481b      	ldr	r0, [pc, #108]	; (8008a58 <USBD_LL_Init+0xac>)
 80089ea:	f7f9 f811 	bl	8001a10 <HAL_PCD_Init>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80089f4:	f7f8 f9f0 	bl	8000dd8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089fe:	2318      	movs	r3, #24
 8008a00:	2200      	movs	r2, #0
 8008a02:	2100      	movs	r1, #0
 8008a04:	f7fa fb53 	bl	80030ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a0e:	2358      	movs	r3, #88	; 0x58
 8008a10:	2200      	movs	r2, #0
 8008a12:	2180      	movs	r1, #128	; 0x80
 8008a14:	f7fa fb4b 	bl	80030ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a1e:	23c0      	movs	r3, #192	; 0xc0
 8008a20:	2200      	movs	r2, #0
 8008a22:	2181      	movs	r1, #129	; 0x81
 8008a24:	f7fa fb43 	bl	80030ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008a32:	2200      	movs	r2, #0
 8008a34:	2101      	movs	r1, #1
 8008a36:	f7fa fb3a 	bl	80030ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a44:	2200      	movs	r2, #0
 8008a46:	2182      	movs	r1, #130	; 0x82
 8008a48:	f7fa fb31 	bl	80030ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	200012e4 	.word	0x200012e4
 8008a5c:	40005c00 	.word	0x40005c00

08008a60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7f9 f8d5 	bl	8001c26 <HAL_PCD_Start>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 f94e 	bl	8008d24 <USBD_Get_USB_Status>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	4608      	mov	r0, r1
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	70fb      	strb	r3, [r7, #3]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70bb      	strb	r3, [r7, #2]
 8008aac:	4613      	mov	r3, r2
 8008aae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008abe:	78bb      	ldrb	r3, [r7, #2]
 8008ac0:	883a      	ldrh	r2, [r7, #0]
 8008ac2:	78f9      	ldrb	r1, [r7, #3]
 8008ac4:	f7f9 fa4f 	bl	8001f66 <HAL_PCD_EP_Open>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f928 	bl	8008d24 <USBD_Get_USB_Status>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7f9 fa96 	bl	8002032 <HAL_PCD_EP_Close>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f909 	bl	8008d24 <USBD_Get_USB_Status>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b3a:	78fa      	ldrb	r2, [r7, #3]
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7f9 fb56 	bl	80021f0 <HAL_PCD_EP_SetStall>
 8008b44:	4603      	mov	r3, r0
 8008b46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f8ea 	bl	8008d24 <USBD_Get_USB_Status>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	460b      	mov	r3, r1
 8008b68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7f9 fb97 	bl	80022b0 <HAL_PCD_EP_ClrStall>
 8008b82:	4603      	mov	r3, r0
 8008b84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 f8cb 	bl	8008d24 <USBD_Get_USB_Status>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da0c      	bge.n	8008bd2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bb8:	78fb      	ldrb	r3, [r7, #3]
 8008bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	00db      	lsls	r3, r3, #3
 8008bca:	440b      	add	r3, r1
 8008bcc:	3302      	adds	r3, #2
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	e00b      	b.n	8008bea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bd2:	78fb      	ldrb	r3, [r7, #3]
 8008bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bd8:	68f9      	ldr	r1, [r7, #12]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	440b      	add	r3, r1
 8008be4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008be8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr

08008bf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7f9 f982 	bl	8001f1c <HAL_PCD_SetAddress>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 f880 	bl	8008d24 <USBD_Get_USB_Status>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b086      	sub	sp, #24
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	460b      	mov	r3, r1
 8008c40:	72fb      	strb	r3, [r7, #11]
 8008c42:	4613      	mov	r3, r2
 8008c44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c54:	893b      	ldrh	r3, [r7, #8]
 8008c56:	7af9      	ldrb	r1, [r7, #11]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	f7f9 fa86 	bl	800216a <HAL_PCD_EP_Transmit>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 f85d 	bl	8008d24 <USBD_Get_USB_Status>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	607a      	str	r2, [r7, #4]
 8008c82:	461a      	mov	r2, r3
 8008c84:	460b      	mov	r3, r1
 8008c86:	72fb      	strb	r3, [r7, #11]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c9a:	893b      	ldrh	r3, [r7, #8]
 8008c9c:	7af9      	ldrb	r1, [r7, #11]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	f7f9 fa0f 	bl	80020c2 <HAL_PCD_EP_Receive>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 f83a 	bl	8008d24 <USBD_Get_USB_Status>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cb4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cd0:	78fa      	ldrb	r2, [r7, #3]
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7f9 fa31 	bl	800213c <HAL_PCD_EP_GetRxCount>
 8008cda:	4603      	mov	r3, r0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008cec:	4b02      	ldr	r3, [pc, #8]	; (8008cf8 <USBD_static_malloc+0x14>)
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bc80      	pop	{r7}
 8008cf6:	4770      	bx	lr
 8008cf8:	20000310 	.word	0x20000310

08008cfc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]

}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr

08008d0e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	460b      	mov	r3, r1
 8008d18:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d817      	bhi.n	8008d68 <USBD_Get_USB_Status+0x44>
 8008d38:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <USBD_Get_USB_Status+0x1c>)
 8008d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3e:	bf00      	nop
 8008d40:	08008d51 	.word	0x08008d51
 8008d44:	08008d57 	.word	0x08008d57
 8008d48:	08008d5d 	.word	0x08008d5d
 8008d4c:	08008d63 	.word	0x08008d63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73fb      	strb	r3, [r7, #15]
    break;
 8008d54:	e00b      	b.n	8008d6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d56:	2302      	movs	r3, #2
 8008d58:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5a:	e008      	b.n	8008d6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d60:	e005      	b.n	8008d6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d62:	2302      	movs	r3, #2
 8008d64:	73fb      	strb	r3, [r7, #15]
    break;
 8008d66:	e002      	b.n	8008d6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d68:	2302      	movs	r3, #2
 8008d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6c:	bf00      	nop
  }
  return usb_status;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop

08008d7c <atoi>:
 8008d7c:	220a      	movs	r2, #10
 8008d7e:	2100      	movs	r1, #0
 8008d80:	f000 b9c2 	b.w	8009108 <strtol>

08008d84 <__errno>:
 8008d84:	4b01      	ldr	r3, [pc, #4]	; (8008d8c <__errno+0x8>)
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	20000198 	.word	0x20000198

08008d90 <__libc_init_array>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	2600      	movs	r6, #0
 8008d94:	4d0c      	ldr	r5, [pc, #48]	; (8008dc8 <__libc_init_array+0x38>)
 8008d96:	4c0d      	ldr	r4, [pc, #52]	; (8008dcc <__libc_init_array+0x3c>)
 8008d98:	1b64      	subs	r4, r4, r5
 8008d9a:	10a4      	asrs	r4, r4, #2
 8008d9c:	42a6      	cmp	r6, r4
 8008d9e:	d109      	bne.n	8008db4 <__libc_init_array+0x24>
 8008da0:	f001 fb3a 	bl	800a418 <_init>
 8008da4:	2600      	movs	r6, #0
 8008da6:	4d0a      	ldr	r5, [pc, #40]	; (8008dd0 <__libc_init_array+0x40>)
 8008da8:	4c0a      	ldr	r4, [pc, #40]	; (8008dd4 <__libc_init_array+0x44>)
 8008daa:	1b64      	subs	r4, r4, r5
 8008dac:	10a4      	asrs	r4, r4, #2
 8008dae:	42a6      	cmp	r6, r4
 8008db0:	d105      	bne.n	8008dbe <__libc_init_array+0x2e>
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db8:	4798      	blx	r3
 8008dba:	3601      	adds	r6, #1
 8008dbc:	e7ee      	b.n	8008d9c <__libc_init_array+0xc>
 8008dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc2:	4798      	blx	r3
 8008dc4:	3601      	adds	r6, #1
 8008dc6:	e7f2      	b.n	8008dae <__libc_init_array+0x1e>
 8008dc8:	0800a8a8 	.word	0x0800a8a8
 8008dcc:	0800a8a8 	.word	0x0800a8a8
 8008dd0:	0800a8a8 	.word	0x0800a8a8
 8008dd4:	0800a8ac 	.word	0x0800a8ac

08008dd8 <memset>:
 8008dd8:	4603      	mov	r3, r0
 8008dda:	4402      	add	r2, r0
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d100      	bne.n	8008de2 <memset+0xa>
 8008de0:	4770      	bx	lr
 8008de2:	f803 1b01 	strb.w	r1, [r3], #1
 8008de6:	e7f9      	b.n	8008ddc <memset+0x4>

08008de8 <iprintf>:
 8008de8:	b40f      	push	{r0, r1, r2, r3}
 8008dea:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <iprintf+0x2c>)
 8008dec:	b513      	push	{r0, r1, r4, lr}
 8008dee:	681c      	ldr	r4, [r3, #0]
 8008df0:	b124      	cbz	r4, 8008dfc <iprintf+0x14>
 8008df2:	69a3      	ldr	r3, [r4, #24]
 8008df4:	b913      	cbnz	r3, 8008dfc <iprintf+0x14>
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 fb88 	bl	800950c <__sinit>
 8008dfc:	ab05      	add	r3, sp, #20
 8008dfe:	4620      	mov	r0, r4
 8008e00:	9a04      	ldr	r2, [sp, #16]
 8008e02:	68a1      	ldr	r1, [r4, #8]
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	f000 fec9 	bl	8009b9c <_vfiprintf_r>
 8008e0a:	b002      	add	sp, #8
 8008e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e10:	b004      	add	sp, #16
 8008e12:	4770      	bx	lr
 8008e14:	20000198 	.word	0x20000198

08008e18 <_puts_r>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	460e      	mov	r6, r1
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	b118      	cbz	r0, 8008e28 <_puts_r+0x10>
 8008e20:	6983      	ldr	r3, [r0, #24]
 8008e22:	b90b      	cbnz	r3, 8008e28 <_puts_r+0x10>
 8008e24:	f000 fb72 	bl	800950c <__sinit>
 8008e28:	69ab      	ldr	r3, [r5, #24]
 8008e2a:	68ac      	ldr	r4, [r5, #8]
 8008e2c:	b913      	cbnz	r3, 8008e34 <_puts_r+0x1c>
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f000 fb6c 	bl	800950c <__sinit>
 8008e34:	4b2c      	ldr	r3, [pc, #176]	; (8008ee8 <_puts_r+0xd0>)
 8008e36:	429c      	cmp	r4, r3
 8008e38:	d120      	bne.n	8008e7c <_puts_r+0x64>
 8008e3a:	686c      	ldr	r4, [r5, #4]
 8008e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e3e:	07db      	lsls	r3, r3, #31
 8008e40:	d405      	bmi.n	8008e4e <_puts_r+0x36>
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	0598      	lsls	r0, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_puts_r+0x36>
 8008e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e4a:	f000 fc0f 	bl	800966c <__retarget_lock_acquire_recursive>
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	0719      	lsls	r1, r3, #28
 8008e52:	d51d      	bpl.n	8008e90 <_puts_r+0x78>
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	b1db      	cbz	r3, 8008e90 <_puts_r+0x78>
 8008e58:	3e01      	subs	r6, #1
 8008e5a:	68a3      	ldr	r3, [r4, #8]
 8008e5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e60:	3b01      	subs	r3, #1
 8008e62:	60a3      	str	r3, [r4, #8]
 8008e64:	bb39      	cbnz	r1, 8008eb6 <_puts_r+0x9e>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	da38      	bge.n	8008edc <_puts_r+0xc4>
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	210a      	movs	r1, #10
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f000 f954 	bl	800911c <__swbuf_r>
 8008e74:	3001      	adds	r0, #1
 8008e76:	d011      	beq.n	8008e9c <_puts_r+0x84>
 8008e78:	250a      	movs	r5, #10
 8008e7a:	e011      	b.n	8008ea0 <_puts_r+0x88>
 8008e7c:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <_puts_r+0xd4>)
 8008e7e:	429c      	cmp	r4, r3
 8008e80:	d101      	bne.n	8008e86 <_puts_r+0x6e>
 8008e82:	68ac      	ldr	r4, [r5, #8]
 8008e84:	e7da      	b.n	8008e3c <_puts_r+0x24>
 8008e86:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <_puts_r+0xd8>)
 8008e88:	429c      	cmp	r4, r3
 8008e8a:	bf08      	it	eq
 8008e8c:	68ec      	ldreq	r4, [r5, #12]
 8008e8e:	e7d5      	b.n	8008e3c <_puts_r+0x24>
 8008e90:	4621      	mov	r1, r4
 8008e92:	4628      	mov	r0, r5
 8008e94:	f000 f994 	bl	80091c0 <__swsetup_r>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d0dd      	beq.n	8008e58 <_puts_r+0x40>
 8008e9c:	f04f 35ff 	mov.w	r5, #4294967295
 8008ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ea2:	07da      	lsls	r2, r3, #31
 8008ea4:	d405      	bmi.n	8008eb2 <_puts_r+0x9a>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	059b      	lsls	r3, r3, #22
 8008eaa:	d402      	bmi.n	8008eb2 <_puts_r+0x9a>
 8008eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eae:	f000 fbde 	bl	800966e <__retarget_lock_release_recursive>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	bd70      	pop	{r4, r5, r6, pc}
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da04      	bge.n	8008ec4 <_puts_r+0xac>
 8008eba:	69a2      	ldr	r2, [r4, #24]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	dc06      	bgt.n	8008ece <_puts_r+0xb6>
 8008ec0:	290a      	cmp	r1, #10
 8008ec2:	d004      	beq.n	8008ece <_puts_r+0xb6>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	6022      	str	r2, [r4, #0]
 8008eca:	7019      	strb	r1, [r3, #0]
 8008ecc:	e7c5      	b.n	8008e5a <_puts_r+0x42>
 8008ece:	4622      	mov	r2, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f000 f923 	bl	800911c <__swbuf_r>
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	d1bf      	bne.n	8008e5a <_puts_r+0x42>
 8008eda:	e7df      	b.n	8008e9c <_puts_r+0x84>
 8008edc:	250a      	movs	r5, #10
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	6022      	str	r2, [r4, #0]
 8008ee4:	701d      	strb	r5, [r3, #0]
 8008ee6:	e7db      	b.n	8008ea0 <_puts_r+0x88>
 8008ee8:	0800a834 	.word	0x0800a834
 8008eec:	0800a854 	.word	0x0800a854
 8008ef0:	0800a814 	.word	0x0800a814

08008ef4 <puts>:
 8008ef4:	4b02      	ldr	r3, [pc, #8]	; (8008f00 <puts+0xc>)
 8008ef6:	4601      	mov	r1, r0
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	f7ff bf8d 	b.w	8008e18 <_puts_r>
 8008efe:	bf00      	nop
 8008f00:	20000198 	.word	0x20000198

08008f04 <siprintf>:
 8008f04:	b40e      	push	{r1, r2, r3}
 8008f06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f0a:	b500      	push	{lr}
 8008f0c:	b09c      	sub	sp, #112	; 0x70
 8008f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f10:	9002      	str	r0, [sp, #8]
 8008f12:	9006      	str	r0, [sp, #24]
 8008f14:	9107      	str	r1, [sp, #28]
 8008f16:	9104      	str	r1, [sp, #16]
 8008f18:	4808      	ldr	r0, [pc, #32]	; (8008f3c <siprintf+0x38>)
 8008f1a:	4909      	ldr	r1, [pc, #36]	; (8008f40 <siprintf+0x3c>)
 8008f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f20:	9105      	str	r1, [sp, #20]
 8008f22:	6800      	ldr	r0, [r0, #0]
 8008f24:	a902      	add	r1, sp, #8
 8008f26:	9301      	str	r3, [sp, #4]
 8008f28:	f000 fd10 	bl	800994c <_svfiprintf_r>
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	9b02      	ldr	r3, [sp, #8]
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	b01c      	add	sp, #112	; 0x70
 8008f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f38:	b003      	add	sp, #12
 8008f3a:	4770      	bx	lr
 8008f3c:	20000198 	.word	0x20000198
 8008f40:	ffff0208 	.word	0xffff0208

08008f44 <strtok>:
 8008f44:	4b16      	ldr	r3, [pc, #88]	; (8008fa0 <strtok+0x5c>)
 8008f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4a:	681f      	ldr	r7, [r3, #0]
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8008f50:	460e      	mov	r6, r1
 8008f52:	b9ec      	cbnz	r4, 8008f90 <strtok+0x4c>
 8008f54:	2050      	movs	r0, #80	; 0x50
 8008f56:	f000 fbef 	bl	8009738 <malloc>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	65b8      	str	r0, [r7, #88]	; 0x58
 8008f5e:	b920      	cbnz	r0, 8008f6a <strtok+0x26>
 8008f60:	2157      	movs	r1, #87	; 0x57
 8008f62:	4b10      	ldr	r3, [pc, #64]	; (8008fa4 <strtok+0x60>)
 8008f64:	4810      	ldr	r0, [pc, #64]	; (8008fa8 <strtok+0x64>)
 8008f66:	f000 f999 	bl	800929c <__assert_func>
 8008f6a:	e9c0 4400 	strd	r4, r4, [r0]
 8008f6e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008f72:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008f76:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008f7a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008f7e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008f82:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008f86:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008f8a:	6184      	str	r4, [r0, #24]
 8008f8c:	7704      	strb	r4, [r0, #28]
 8008f8e:	6244      	str	r4, [r0, #36]	; 0x24
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f96:	2301      	movs	r3, #1
 8008f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9c:	f000 b806 	b.w	8008fac <__strtok_r>
 8008fa0:	20000198 	.word	0x20000198
 8008fa4:	0800a65c 	.word	0x0800a65c
 8008fa8:	0800a673 	.word	0x0800a673

08008fac <__strtok_r>:
 8008fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fae:	b908      	cbnz	r0, 8008fb4 <__strtok_r+0x8>
 8008fb0:	6810      	ldr	r0, [r2, #0]
 8008fb2:	b188      	cbz	r0, 8008fd8 <__strtok_r+0x2c>
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	460f      	mov	r7, r1
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008fbe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008fc2:	b91e      	cbnz	r6, 8008fcc <__strtok_r+0x20>
 8008fc4:	b965      	cbnz	r5, 8008fe0 <__strtok_r+0x34>
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	6015      	str	r5, [r2, #0]
 8008fca:	e005      	b.n	8008fd8 <__strtok_r+0x2c>
 8008fcc:	42b5      	cmp	r5, r6
 8008fce:	d1f6      	bne.n	8008fbe <__strtok_r+0x12>
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1f0      	bne.n	8008fb6 <__strtok_r+0xa>
 8008fd4:	6014      	str	r4, [r2, #0]
 8008fd6:	7003      	strb	r3, [r0, #0]
 8008fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fda:	461c      	mov	r4, r3
 8008fdc:	e00c      	b.n	8008ff8 <__strtok_r+0x4c>
 8008fde:	b915      	cbnz	r5, 8008fe6 <__strtok_r+0x3a>
 8008fe0:	460e      	mov	r6, r1
 8008fe2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fe6:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008fea:	42ab      	cmp	r3, r5
 8008fec:	d1f7      	bne.n	8008fde <__strtok_r+0x32>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0f3      	beq.n	8008fda <__strtok_r+0x2e>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008ff8:	6014      	str	r4, [r2, #0]
 8008ffa:	e7ed      	b.n	8008fd8 <__strtok_r+0x2c>

08008ffc <_strtol_l.isra.0>:
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009002:	4686      	mov	lr, r0
 8009004:	d001      	beq.n	800900a <_strtol_l.isra.0+0xe>
 8009006:	2b24      	cmp	r3, #36	; 0x24
 8009008:	d906      	bls.n	8009018 <_strtol_l.isra.0+0x1c>
 800900a:	f7ff febb 	bl	8008d84 <__errno>
 800900e:	2316      	movs	r3, #22
 8009010:	6003      	str	r3, [r0, #0]
 8009012:	2000      	movs	r0, #0
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	468c      	mov	ip, r1
 800901a:	4e3a      	ldr	r6, [pc, #232]	; (8009104 <_strtol_l.isra.0+0x108>)
 800901c:	4660      	mov	r0, ip
 800901e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009022:	5da5      	ldrb	r5, [r4, r6]
 8009024:	f015 0508 	ands.w	r5, r5, #8
 8009028:	d1f8      	bne.n	800901c <_strtol_l.isra.0+0x20>
 800902a:	2c2d      	cmp	r4, #45	; 0x2d
 800902c:	d133      	bne.n	8009096 <_strtol_l.isra.0+0x9a>
 800902e:	f04f 0801 	mov.w	r8, #1
 8009032:	f89c 4000 	ldrb.w	r4, [ip]
 8009036:	f100 0c02 	add.w	ip, r0, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d05d      	beq.n	80090fa <_strtol_l.isra.0+0xfe>
 800903e:	2b10      	cmp	r3, #16
 8009040:	d10c      	bne.n	800905c <_strtol_l.isra.0+0x60>
 8009042:	2c30      	cmp	r4, #48	; 0x30
 8009044:	d10a      	bne.n	800905c <_strtol_l.isra.0+0x60>
 8009046:	f89c 0000 	ldrb.w	r0, [ip]
 800904a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800904e:	2858      	cmp	r0, #88	; 0x58
 8009050:	d14e      	bne.n	80090f0 <_strtol_l.isra.0+0xf4>
 8009052:	2310      	movs	r3, #16
 8009054:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009058:	f10c 0c02 	add.w	ip, ip, #2
 800905c:	2500      	movs	r5, #0
 800905e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009062:	3f01      	subs	r7, #1
 8009064:	fbb7 f9f3 	udiv	r9, r7, r3
 8009068:	4628      	mov	r0, r5
 800906a:	fb03 7a19 	mls	sl, r3, r9, r7
 800906e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009072:	2e09      	cmp	r6, #9
 8009074:	d818      	bhi.n	80090a8 <_strtol_l.isra.0+0xac>
 8009076:	4634      	mov	r4, r6
 8009078:	42a3      	cmp	r3, r4
 800907a:	dd24      	ble.n	80090c6 <_strtol_l.isra.0+0xca>
 800907c:	2d00      	cmp	r5, #0
 800907e:	db1f      	blt.n	80090c0 <_strtol_l.isra.0+0xc4>
 8009080:	4581      	cmp	r9, r0
 8009082:	d31d      	bcc.n	80090c0 <_strtol_l.isra.0+0xc4>
 8009084:	d101      	bne.n	800908a <_strtol_l.isra.0+0x8e>
 8009086:	45a2      	cmp	sl, r4
 8009088:	db1a      	blt.n	80090c0 <_strtol_l.isra.0+0xc4>
 800908a:	2501      	movs	r5, #1
 800908c:	fb00 4003 	mla	r0, r0, r3, r4
 8009090:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009094:	e7eb      	b.n	800906e <_strtol_l.isra.0+0x72>
 8009096:	2c2b      	cmp	r4, #43	; 0x2b
 8009098:	bf08      	it	eq
 800909a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800909e:	46a8      	mov	r8, r5
 80090a0:	bf08      	it	eq
 80090a2:	f100 0c02 	addeq.w	ip, r0, #2
 80090a6:	e7c8      	b.n	800903a <_strtol_l.isra.0+0x3e>
 80090a8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80090ac:	2e19      	cmp	r6, #25
 80090ae:	d801      	bhi.n	80090b4 <_strtol_l.isra.0+0xb8>
 80090b0:	3c37      	subs	r4, #55	; 0x37
 80090b2:	e7e1      	b.n	8009078 <_strtol_l.isra.0+0x7c>
 80090b4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80090b8:	2e19      	cmp	r6, #25
 80090ba:	d804      	bhi.n	80090c6 <_strtol_l.isra.0+0xca>
 80090bc:	3c57      	subs	r4, #87	; 0x57
 80090be:	e7db      	b.n	8009078 <_strtol_l.isra.0+0x7c>
 80090c0:	f04f 35ff 	mov.w	r5, #4294967295
 80090c4:	e7e4      	b.n	8009090 <_strtol_l.isra.0+0x94>
 80090c6:	2d00      	cmp	r5, #0
 80090c8:	da08      	bge.n	80090dc <_strtol_l.isra.0+0xe0>
 80090ca:	2322      	movs	r3, #34	; 0x22
 80090cc:	4638      	mov	r0, r7
 80090ce:	f8ce 3000 	str.w	r3, [lr]
 80090d2:	2a00      	cmp	r2, #0
 80090d4:	d09e      	beq.n	8009014 <_strtol_l.isra.0+0x18>
 80090d6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80090da:	e007      	b.n	80090ec <_strtol_l.isra.0+0xf0>
 80090dc:	f1b8 0f00 	cmp.w	r8, #0
 80090e0:	d000      	beq.n	80090e4 <_strtol_l.isra.0+0xe8>
 80090e2:	4240      	negs	r0, r0
 80090e4:	2a00      	cmp	r2, #0
 80090e6:	d095      	beq.n	8009014 <_strtol_l.isra.0+0x18>
 80090e8:	2d00      	cmp	r5, #0
 80090ea:	d1f4      	bne.n	80090d6 <_strtol_l.isra.0+0xda>
 80090ec:	6011      	str	r1, [r2, #0]
 80090ee:	e791      	b.n	8009014 <_strtol_l.isra.0+0x18>
 80090f0:	2430      	movs	r4, #48	; 0x30
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1b2      	bne.n	800905c <_strtol_l.isra.0+0x60>
 80090f6:	2308      	movs	r3, #8
 80090f8:	e7b0      	b.n	800905c <_strtol_l.isra.0+0x60>
 80090fa:	2c30      	cmp	r4, #48	; 0x30
 80090fc:	d0a3      	beq.n	8009046 <_strtol_l.isra.0+0x4a>
 80090fe:	230a      	movs	r3, #10
 8009100:	e7ac      	b.n	800905c <_strtol_l.isra.0+0x60>
 8009102:	bf00      	nop
 8009104:	0800a711 	.word	0x0800a711

08009108 <strtol>:
 8009108:	4613      	mov	r3, r2
 800910a:	460a      	mov	r2, r1
 800910c:	4601      	mov	r1, r0
 800910e:	4802      	ldr	r0, [pc, #8]	; (8009118 <strtol+0x10>)
 8009110:	6800      	ldr	r0, [r0, #0]
 8009112:	f7ff bf73 	b.w	8008ffc <_strtol_l.isra.0>
 8009116:	bf00      	nop
 8009118:	20000198 	.word	0x20000198

0800911c <__swbuf_r>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	460e      	mov	r6, r1
 8009120:	4614      	mov	r4, r2
 8009122:	4605      	mov	r5, r0
 8009124:	b118      	cbz	r0, 800912e <__swbuf_r+0x12>
 8009126:	6983      	ldr	r3, [r0, #24]
 8009128:	b90b      	cbnz	r3, 800912e <__swbuf_r+0x12>
 800912a:	f000 f9ef 	bl	800950c <__sinit>
 800912e:	4b21      	ldr	r3, [pc, #132]	; (80091b4 <__swbuf_r+0x98>)
 8009130:	429c      	cmp	r4, r3
 8009132:	d12b      	bne.n	800918c <__swbuf_r+0x70>
 8009134:	686c      	ldr	r4, [r5, #4]
 8009136:	69a3      	ldr	r3, [r4, #24]
 8009138:	60a3      	str	r3, [r4, #8]
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	071a      	lsls	r2, r3, #28
 800913e:	d52f      	bpl.n	80091a0 <__swbuf_r+0x84>
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	b36b      	cbz	r3, 80091a0 <__swbuf_r+0x84>
 8009144:	6923      	ldr	r3, [r4, #16]
 8009146:	6820      	ldr	r0, [r4, #0]
 8009148:	b2f6      	uxtb	r6, r6
 800914a:	1ac0      	subs	r0, r0, r3
 800914c:	6963      	ldr	r3, [r4, #20]
 800914e:	4637      	mov	r7, r6
 8009150:	4283      	cmp	r3, r0
 8009152:	dc04      	bgt.n	800915e <__swbuf_r+0x42>
 8009154:	4621      	mov	r1, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f944 	bl	80093e4 <_fflush_r>
 800915c:	bb30      	cbnz	r0, 80091ac <__swbuf_r+0x90>
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	3001      	adds	r0, #1
 8009162:	3b01      	subs	r3, #1
 8009164:	60a3      	str	r3, [r4, #8]
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	6022      	str	r2, [r4, #0]
 800916c:	701e      	strb	r6, [r3, #0]
 800916e:	6963      	ldr	r3, [r4, #20]
 8009170:	4283      	cmp	r3, r0
 8009172:	d004      	beq.n	800917e <__swbuf_r+0x62>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	07db      	lsls	r3, r3, #31
 8009178:	d506      	bpl.n	8009188 <__swbuf_r+0x6c>
 800917a:	2e0a      	cmp	r6, #10
 800917c:	d104      	bne.n	8009188 <__swbuf_r+0x6c>
 800917e:	4621      	mov	r1, r4
 8009180:	4628      	mov	r0, r5
 8009182:	f000 f92f 	bl	80093e4 <_fflush_r>
 8009186:	b988      	cbnz	r0, 80091ac <__swbuf_r+0x90>
 8009188:	4638      	mov	r0, r7
 800918a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918c:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <__swbuf_r+0x9c>)
 800918e:	429c      	cmp	r4, r3
 8009190:	d101      	bne.n	8009196 <__swbuf_r+0x7a>
 8009192:	68ac      	ldr	r4, [r5, #8]
 8009194:	e7cf      	b.n	8009136 <__swbuf_r+0x1a>
 8009196:	4b09      	ldr	r3, [pc, #36]	; (80091bc <__swbuf_r+0xa0>)
 8009198:	429c      	cmp	r4, r3
 800919a:	bf08      	it	eq
 800919c:	68ec      	ldreq	r4, [r5, #12]
 800919e:	e7ca      	b.n	8009136 <__swbuf_r+0x1a>
 80091a0:	4621      	mov	r1, r4
 80091a2:	4628      	mov	r0, r5
 80091a4:	f000 f80c 	bl	80091c0 <__swsetup_r>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d0cb      	beq.n	8009144 <__swbuf_r+0x28>
 80091ac:	f04f 37ff 	mov.w	r7, #4294967295
 80091b0:	e7ea      	b.n	8009188 <__swbuf_r+0x6c>
 80091b2:	bf00      	nop
 80091b4:	0800a834 	.word	0x0800a834
 80091b8:	0800a854 	.word	0x0800a854
 80091bc:	0800a814 	.word	0x0800a814

080091c0 <__swsetup_r>:
 80091c0:	4b32      	ldr	r3, [pc, #200]	; (800928c <__swsetup_r+0xcc>)
 80091c2:	b570      	push	{r4, r5, r6, lr}
 80091c4:	681d      	ldr	r5, [r3, #0]
 80091c6:	4606      	mov	r6, r0
 80091c8:	460c      	mov	r4, r1
 80091ca:	b125      	cbz	r5, 80091d6 <__swsetup_r+0x16>
 80091cc:	69ab      	ldr	r3, [r5, #24]
 80091ce:	b913      	cbnz	r3, 80091d6 <__swsetup_r+0x16>
 80091d0:	4628      	mov	r0, r5
 80091d2:	f000 f99b 	bl	800950c <__sinit>
 80091d6:	4b2e      	ldr	r3, [pc, #184]	; (8009290 <__swsetup_r+0xd0>)
 80091d8:	429c      	cmp	r4, r3
 80091da:	d10f      	bne.n	80091fc <__swsetup_r+0x3c>
 80091dc:	686c      	ldr	r4, [r5, #4]
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091e4:	0719      	lsls	r1, r3, #28
 80091e6:	d42c      	bmi.n	8009242 <__swsetup_r+0x82>
 80091e8:	06dd      	lsls	r5, r3, #27
 80091ea:	d411      	bmi.n	8009210 <__swsetup_r+0x50>
 80091ec:	2309      	movs	r3, #9
 80091ee:	6033      	str	r3, [r6, #0]
 80091f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	81a3      	strh	r3, [r4, #12]
 80091fa:	e03e      	b.n	800927a <__swsetup_r+0xba>
 80091fc:	4b25      	ldr	r3, [pc, #148]	; (8009294 <__swsetup_r+0xd4>)
 80091fe:	429c      	cmp	r4, r3
 8009200:	d101      	bne.n	8009206 <__swsetup_r+0x46>
 8009202:	68ac      	ldr	r4, [r5, #8]
 8009204:	e7eb      	b.n	80091de <__swsetup_r+0x1e>
 8009206:	4b24      	ldr	r3, [pc, #144]	; (8009298 <__swsetup_r+0xd8>)
 8009208:	429c      	cmp	r4, r3
 800920a:	bf08      	it	eq
 800920c:	68ec      	ldreq	r4, [r5, #12]
 800920e:	e7e6      	b.n	80091de <__swsetup_r+0x1e>
 8009210:	0758      	lsls	r0, r3, #29
 8009212:	d512      	bpl.n	800923a <__swsetup_r+0x7a>
 8009214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009216:	b141      	cbz	r1, 800922a <__swsetup_r+0x6a>
 8009218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800921c:	4299      	cmp	r1, r3
 800921e:	d002      	beq.n	8009226 <__swsetup_r+0x66>
 8009220:	4630      	mov	r0, r6
 8009222:	f000 fa91 	bl	8009748 <_free_r>
 8009226:	2300      	movs	r3, #0
 8009228:	6363      	str	r3, [r4, #52]	; 0x34
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	2300      	movs	r3, #0
 8009234:	6063      	str	r3, [r4, #4]
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f043 0308 	orr.w	r3, r3, #8
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	6923      	ldr	r3, [r4, #16]
 8009244:	b94b      	cbnz	r3, 800925a <__swsetup_r+0x9a>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800924c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009250:	d003      	beq.n	800925a <__swsetup_r+0x9a>
 8009252:	4621      	mov	r1, r4
 8009254:	4630      	mov	r0, r6
 8009256:	f000 fa2f 	bl	80096b8 <__smakebuf_r>
 800925a:	89a0      	ldrh	r0, [r4, #12]
 800925c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009260:	f010 0301 	ands.w	r3, r0, #1
 8009264:	d00a      	beq.n	800927c <__swsetup_r+0xbc>
 8009266:	2300      	movs	r3, #0
 8009268:	60a3      	str	r3, [r4, #8]
 800926a:	6963      	ldr	r3, [r4, #20]
 800926c:	425b      	negs	r3, r3
 800926e:	61a3      	str	r3, [r4, #24]
 8009270:	6923      	ldr	r3, [r4, #16]
 8009272:	b943      	cbnz	r3, 8009286 <__swsetup_r+0xc6>
 8009274:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009278:	d1ba      	bne.n	80091f0 <__swsetup_r+0x30>
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	0781      	lsls	r1, r0, #30
 800927e:	bf58      	it	pl
 8009280:	6963      	ldrpl	r3, [r4, #20]
 8009282:	60a3      	str	r3, [r4, #8]
 8009284:	e7f4      	b.n	8009270 <__swsetup_r+0xb0>
 8009286:	2000      	movs	r0, #0
 8009288:	e7f7      	b.n	800927a <__swsetup_r+0xba>
 800928a:	bf00      	nop
 800928c:	20000198 	.word	0x20000198
 8009290:	0800a834 	.word	0x0800a834
 8009294:	0800a854 	.word	0x0800a854
 8009298:	0800a814 	.word	0x0800a814

0800929c <__assert_func>:
 800929c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800929e:	4614      	mov	r4, r2
 80092a0:	461a      	mov	r2, r3
 80092a2:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <__assert_func+0x2c>)
 80092a4:	4605      	mov	r5, r0
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68d8      	ldr	r0, [r3, #12]
 80092aa:	b14c      	cbz	r4, 80092c0 <__assert_func+0x24>
 80092ac:	4b07      	ldr	r3, [pc, #28]	; (80092cc <__assert_func+0x30>)
 80092ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092b2:	9100      	str	r1, [sp, #0]
 80092b4:	462b      	mov	r3, r5
 80092b6:	4906      	ldr	r1, [pc, #24]	; (80092d0 <__assert_func+0x34>)
 80092b8:	f000 f9a6 	bl	8009608 <fiprintf>
 80092bc:	f000 ff9a 	bl	800a1f4 <abort>
 80092c0:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <__assert_func+0x38>)
 80092c2:	461c      	mov	r4, r3
 80092c4:	e7f3      	b.n	80092ae <__assert_func+0x12>
 80092c6:	bf00      	nop
 80092c8:	20000198 	.word	0x20000198
 80092cc:	0800a6d4 	.word	0x0800a6d4
 80092d0:	0800a6e1 	.word	0x0800a6e1
 80092d4:	0800a70f 	.word	0x0800a70f

080092d8 <__sflush_r>:
 80092d8:	898a      	ldrh	r2, [r1, #12]
 80092da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092de:	4605      	mov	r5, r0
 80092e0:	0710      	lsls	r0, r2, #28
 80092e2:	460c      	mov	r4, r1
 80092e4:	d458      	bmi.n	8009398 <__sflush_r+0xc0>
 80092e6:	684b      	ldr	r3, [r1, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dc05      	bgt.n	80092f8 <__sflush_r+0x20>
 80092ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dc02      	bgt.n	80092f8 <__sflush_r+0x20>
 80092f2:	2000      	movs	r0, #0
 80092f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092fa:	2e00      	cmp	r6, #0
 80092fc:	d0f9      	beq.n	80092f2 <__sflush_r+0x1a>
 80092fe:	2300      	movs	r3, #0
 8009300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009304:	682f      	ldr	r7, [r5, #0]
 8009306:	602b      	str	r3, [r5, #0]
 8009308:	d032      	beq.n	8009370 <__sflush_r+0x98>
 800930a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	075a      	lsls	r2, r3, #29
 8009310:	d505      	bpl.n	800931e <__sflush_r+0x46>
 8009312:	6863      	ldr	r3, [r4, #4]
 8009314:	1ac0      	subs	r0, r0, r3
 8009316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009318:	b10b      	cbz	r3, 800931e <__sflush_r+0x46>
 800931a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800931c:	1ac0      	subs	r0, r0, r3
 800931e:	2300      	movs	r3, #0
 8009320:	4602      	mov	r2, r0
 8009322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009324:	4628      	mov	r0, r5
 8009326:	6a21      	ldr	r1, [r4, #32]
 8009328:	47b0      	blx	r6
 800932a:	1c43      	adds	r3, r0, #1
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	d106      	bne.n	800933e <__sflush_r+0x66>
 8009330:	6829      	ldr	r1, [r5, #0]
 8009332:	291d      	cmp	r1, #29
 8009334:	d82c      	bhi.n	8009390 <__sflush_r+0xb8>
 8009336:	4a2a      	ldr	r2, [pc, #168]	; (80093e0 <__sflush_r+0x108>)
 8009338:	40ca      	lsrs	r2, r1
 800933a:	07d6      	lsls	r6, r2, #31
 800933c:	d528      	bpl.n	8009390 <__sflush_r+0xb8>
 800933e:	2200      	movs	r2, #0
 8009340:	6062      	str	r2, [r4, #4]
 8009342:	6922      	ldr	r2, [r4, #16]
 8009344:	04d9      	lsls	r1, r3, #19
 8009346:	6022      	str	r2, [r4, #0]
 8009348:	d504      	bpl.n	8009354 <__sflush_r+0x7c>
 800934a:	1c42      	adds	r2, r0, #1
 800934c:	d101      	bne.n	8009352 <__sflush_r+0x7a>
 800934e:	682b      	ldr	r3, [r5, #0]
 8009350:	b903      	cbnz	r3, 8009354 <__sflush_r+0x7c>
 8009352:	6560      	str	r0, [r4, #84]	; 0x54
 8009354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009356:	602f      	str	r7, [r5, #0]
 8009358:	2900      	cmp	r1, #0
 800935a:	d0ca      	beq.n	80092f2 <__sflush_r+0x1a>
 800935c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009360:	4299      	cmp	r1, r3
 8009362:	d002      	beq.n	800936a <__sflush_r+0x92>
 8009364:	4628      	mov	r0, r5
 8009366:	f000 f9ef 	bl	8009748 <_free_r>
 800936a:	2000      	movs	r0, #0
 800936c:	6360      	str	r0, [r4, #52]	; 0x34
 800936e:	e7c1      	b.n	80092f4 <__sflush_r+0x1c>
 8009370:	6a21      	ldr	r1, [r4, #32]
 8009372:	2301      	movs	r3, #1
 8009374:	4628      	mov	r0, r5
 8009376:	47b0      	blx	r6
 8009378:	1c41      	adds	r1, r0, #1
 800937a:	d1c7      	bne.n	800930c <__sflush_r+0x34>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0c4      	beq.n	800930c <__sflush_r+0x34>
 8009382:	2b1d      	cmp	r3, #29
 8009384:	d001      	beq.n	800938a <__sflush_r+0xb2>
 8009386:	2b16      	cmp	r3, #22
 8009388:	d101      	bne.n	800938e <__sflush_r+0xb6>
 800938a:	602f      	str	r7, [r5, #0]
 800938c:	e7b1      	b.n	80092f2 <__sflush_r+0x1a>
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009394:	81a3      	strh	r3, [r4, #12]
 8009396:	e7ad      	b.n	80092f4 <__sflush_r+0x1c>
 8009398:	690f      	ldr	r7, [r1, #16]
 800939a:	2f00      	cmp	r7, #0
 800939c:	d0a9      	beq.n	80092f2 <__sflush_r+0x1a>
 800939e:	0793      	lsls	r3, r2, #30
 80093a0:	bf18      	it	ne
 80093a2:	2300      	movne	r3, #0
 80093a4:	680e      	ldr	r6, [r1, #0]
 80093a6:	bf08      	it	eq
 80093a8:	694b      	ldreq	r3, [r1, #20]
 80093aa:	eba6 0807 	sub.w	r8, r6, r7
 80093ae:	600f      	str	r7, [r1, #0]
 80093b0:	608b      	str	r3, [r1, #8]
 80093b2:	f1b8 0f00 	cmp.w	r8, #0
 80093b6:	dd9c      	ble.n	80092f2 <__sflush_r+0x1a>
 80093b8:	4643      	mov	r3, r8
 80093ba:	463a      	mov	r2, r7
 80093bc:	4628      	mov	r0, r5
 80093be:	6a21      	ldr	r1, [r4, #32]
 80093c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093c2:	47b0      	blx	r6
 80093c4:	2800      	cmp	r0, #0
 80093c6:	dc06      	bgt.n	80093d6 <__sflush_r+0xfe>
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d2:	81a3      	strh	r3, [r4, #12]
 80093d4:	e78e      	b.n	80092f4 <__sflush_r+0x1c>
 80093d6:	4407      	add	r7, r0
 80093d8:	eba8 0800 	sub.w	r8, r8, r0
 80093dc:	e7e9      	b.n	80093b2 <__sflush_r+0xda>
 80093de:	bf00      	nop
 80093e0:	20400001 	.word	0x20400001

080093e4 <_fflush_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	690b      	ldr	r3, [r1, #16]
 80093e8:	4605      	mov	r5, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	b913      	cbnz	r3, 80093f4 <_fflush_r+0x10>
 80093ee:	2500      	movs	r5, #0
 80093f0:	4628      	mov	r0, r5
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	b118      	cbz	r0, 80093fe <_fflush_r+0x1a>
 80093f6:	6983      	ldr	r3, [r0, #24]
 80093f8:	b90b      	cbnz	r3, 80093fe <_fflush_r+0x1a>
 80093fa:	f000 f887 	bl	800950c <__sinit>
 80093fe:	4b14      	ldr	r3, [pc, #80]	; (8009450 <_fflush_r+0x6c>)
 8009400:	429c      	cmp	r4, r3
 8009402:	d11b      	bne.n	800943c <_fflush_r+0x58>
 8009404:	686c      	ldr	r4, [r5, #4]
 8009406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0ef      	beq.n	80093ee <_fflush_r+0xa>
 800940e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009410:	07d0      	lsls	r0, r2, #31
 8009412:	d404      	bmi.n	800941e <_fflush_r+0x3a>
 8009414:	0599      	lsls	r1, r3, #22
 8009416:	d402      	bmi.n	800941e <_fflush_r+0x3a>
 8009418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800941a:	f000 f927 	bl	800966c <__retarget_lock_acquire_recursive>
 800941e:	4628      	mov	r0, r5
 8009420:	4621      	mov	r1, r4
 8009422:	f7ff ff59 	bl	80092d8 <__sflush_r>
 8009426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009428:	4605      	mov	r5, r0
 800942a:	07da      	lsls	r2, r3, #31
 800942c:	d4e0      	bmi.n	80093f0 <_fflush_r+0xc>
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	059b      	lsls	r3, r3, #22
 8009432:	d4dd      	bmi.n	80093f0 <_fflush_r+0xc>
 8009434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009436:	f000 f91a 	bl	800966e <__retarget_lock_release_recursive>
 800943a:	e7d9      	b.n	80093f0 <_fflush_r+0xc>
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <_fflush_r+0x70>)
 800943e:	429c      	cmp	r4, r3
 8009440:	d101      	bne.n	8009446 <_fflush_r+0x62>
 8009442:	68ac      	ldr	r4, [r5, #8]
 8009444:	e7df      	b.n	8009406 <_fflush_r+0x22>
 8009446:	4b04      	ldr	r3, [pc, #16]	; (8009458 <_fflush_r+0x74>)
 8009448:	429c      	cmp	r4, r3
 800944a:	bf08      	it	eq
 800944c:	68ec      	ldreq	r4, [r5, #12]
 800944e:	e7da      	b.n	8009406 <_fflush_r+0x22>
 8009450:	0800a834 	.word	0x0800a834
 8009454:	0800a854 	.word	0x0800a854
 8009458:	0800a814 	.word	0x0800a814

0800945c <std>:
 800945c:	2300      	movs	r3, #0
 800945e:	b510      	push	{r4, lr}
 8009460:	4604      	mov	r4, r0
 8009462:	e9c0 3300 	strd	r3, r3, [r0]
 8009466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800946a:	6083      	str	r3, [r0, #8]
 800946c:	8181      	strh	r1, [r0, #12]
 800946e:	6643      	str	r3, [r0, #100]	; 0x64
 8009470:	81c2      	strh	r2, [r0, #14]
 8009472:	6183      	str	r3, [r0, #24]
 8009474:	4619      	mov	r1, r3
 8009476:	2208      	movs	r2, #8
 8009478:	305c      	adds	r0, #92	; 0x5c
 800947a:	f7ff fcad 	bl	8008dd8 <memset>
 800947e:	4b05      	ldr	r3, [pc, #20]	; (8009494 <std+0x38>)
 8009480:	6224      	str	r4, [r4, #32]
 8009482:	6263      	str	r3, [r4, #36]	; 0x24
 8009484:	4b04      	ldr	r3, [pc, #16]	; (8009498 <std+0x3c>)
 8009486:	62a3      	str	r3, [r4, #40]	; 0x28
 8009488:	4b04      	ldr	r3, [pc, #16]	; (800949c <std+0x40>)
 800948a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800948c:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <std+0x44>)
 800948e:	6323      	str	r3, [r4, #48]	; 0x30
 8009490:	bd10      	pop	{r4, pc}
 8009492:	bf00      	nop
 8009494:	0800a149 	.word	0x0800a149
 8009498:	0800a16b 	.word	0x0800a16b
 800949c:	0800a1a3 	.word	0x0800a1a3
 80094a0:	0800a1c7 	.word	0x0800a1c7

080094a4 <_cleanup_r>:
 80094a4:	4901      	ldr	r1, [pc, #4]	; (80094ac <_cleanup_r+0x8>)
 80094a6:	f000 b8c1 	b.w	800962c <_fwalk_reent>
 80094aa:	bf00      	nop
 80094ac:	080093e5 	.word	0x080093e5

080094b0 <__sfmoreglue>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	2568      	movs	r5, #104	; 0x68
 80094b4:	1e4a      	subs	r2, r1, #1
 80094b6:	4355      	muls	r5, r2
 80094b8:	460e      	mov	r6, r1
 80094ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094be:	f000 f98f 	bl	80097e0 <_malloc_r>
 80094c2:	4604      	mov	r4, r0
 80094c4:	b140      	cbz	r0, 80094d8 <__sfmoreglue+0x28>
 80094c6:	2100      	movs	r1, #0
 80094c8:	e9c0 1600 	strd	r1, r6, [r0]
 80094cc:	300c      	adds	r0, #12
 80094ce:	60a0      	str	r0, [r4, #8]
 80094d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094d4:	f7ff fc80 	bl	8008dd8 <memset>
 80094d8:	4620      	mov	r0, r4
 80094da:	bd70      	pop	{r4, r5, r6, pc}

080094dc <__sfp_lock_acquire>:
 80094dc:	4801      	ldr	r0, [pc, #4]	; (80094e4 <__sfp_lock_acquire+0x8>)
 80094de:	f000 b8c5 	b.w	800966c <__retarget_lock_acquire_recursive>
 80094e2:	bf00      	nop
 80094e4:	200015d8 	.word	0x200015d8

080094e8 <__sfp_lock_release>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__sfp_lock_release+0x8>)
 80094ea:	f000 b8c0 	b.w	800966e <__retarget_lock_release_recursive>
 80094ee:	bf00      	nop
 80094f0:	200015d8 	.word	0x200015d8

080094f4 <__sinit_lock_acquire>:
 80094f4:	4801      	ldr	r0, [pc, #4]	; (80094fc <__sinit_lock_acquire+0x8>)
 80094f6:	f000 b8b9 	b.w	800966c <__retarget_lock_acquire_recursive>
 80094fa:	bf00      	nop
 80094fc:	200015d3 	.word	0x200015d3

08009500 <__sinit_lock_release>:
 8009500:	4801      	ldr	r0, [pc, #4]	; (8009508 <__sinit_lock_release+0x8>)
 8009502:	f000 b8b4 	b.w	800966e <__retarget_lock_release_recursive>
 8009506:	bf00      	nop
 8009508:	200015d3 	.word	0x200015d3

0800950c <__sinit>:
 800950c:	b510      	push	{r4, lr}
 800950e:	4604      	mov	r4, r0
 8009510:	f7ff fff0 	bl	80094f4 <__sinit_lock_acquire>
 8009514:	69a3      	ldr	r3, [r4, #24]
 8009516:	b11b      	cbz	r3, 8009520 <__sinit+0x14>
 8009518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800951c:	f7ff bff0 	b.w	8009500 <__sinit_lock_release>
 8009520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009524:	6523      	str	r3, [r4, #80]	; 0x50
 8009526:	4b13      	ldr	r3, [pc, #76]	; (8009574 <__sinit+0x68>)
 8009528:	4a13      	ldr	r2, [pc, #76]	; (8009578 <__sinit+0x6c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	62a2      	str	r2, [r4, #40]	; 0x28
 800952e:	42a3      	cmp	r3, r4
 8009530:	bf08      	it	eq
 8009532:	2301      	moveq	r3, #1
 8009534:	4620      	mov	r0, r4
 8009536:	bf08      	it	eq
 8009538:	61a3      	streq	r3, [r4, #24]
 800953a:	f000 f81f 	bl	800957c <__sfp>
 800953e:	6060      	str	r0, [r4, #4]
 8009540:	4620      	mov	r0, r4
 8009542:	f000 f81b 	bl	800957c <__sfp>
 8009546:	60a0      	str	r0, [r4, #8]
 8009548:	4620      	mov	r0, r4
 800954a:	f000 f817 	bl	800957c <__sfp>
 800954e:	2200      	movs	r2, #0
 8009550:	2104      	movs	r1, #4
 8009552:	60e0      	str	r0, [r4, #12]
 8009554:	6860      	ldr	r0, [r4, #4]
 8009556:	f7ff ff81 	bl	800945c <std>
 800955a:	2201      	movs	r2, #1
 800955c:	2109      	movs	r1, #9
 800955e:	68a0      	ldr	r0, [r4, #8]
 8009560:	f7ff ff7c 	bl	800945c <std>
 8009564:	2202      	movs	r2, #2
 8009566:	2112      	movs	r1, #18
 8009568:	68e0      	ldr	r0, [r4, #12]
 800956a:	f7ff ff77 	bl	800945c <std>
 800956e:	2301      	movs	r3, #1
 8009570:	61a3      	str	r3, [r4, #24]
 8009572:	e7d1      	b.n	8009518 <__sinit+0xc>
 8009574:	0800a658 	.word	0x0800a658
 8009578:	080094a5 	.word	0x080094a5

0800957c <__sfp>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	4607      	mov	r7, r0
 8009580:	f7ff ffac 	bl	80094dc <__sfp_lock_acquire>
 8009584:	4b1e      	ldr	r3, [pc, #120]	; (8009600 <__sfp+0x84>)
 8009586:	681e      	ldr	r6, [r3, #0]
 8009588:	69b3      	ldr	r3, [r6, #24]
 800958a:	b913      	cbnz	r3, 8009592 <__sfp+0x16>
 800958c:	4630      	mov	r0, r6
 800958e:	f7ff ffbd 	bl	800950c <__sinit>
 8009592:	3648      	adds	r6, #72	; 0x48
 8009594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009598:	3b01      	subs	r3, #1
 800959a:	d503      	bpl.n	80095a4 <__sfp+0x28>
 800959c:	6833      	ldr	r3, [r6, #0]
 800959e:	b30b      	cbz	r3, 80095e4 <__sfp+0x68>
 80095a0:	6836      	ldr	r6, [r6, #0]
 80095a2:	e7f7      	b.n	8009594 <__sfp+0x18>
 80095a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095a8:	b9d5      	cbnz	r5, 80095e0 <__sfp+0x64>
 80095aa:	4b16      	ldr	r3, [pc, #88]	; (8009604 <__sfp+0x88>)
 80095ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095b0:	60e3      	str	r3, [r4, #12]
 80095b2:	6665      	str	r5, [r4, #100]	; 0x64
 80095b4:	f000 f859 	bl	800966a <__retarget_lock_init_recursive>
 80095b8:	f7ff ff96 	bl	80094e8 <__sfp_lock_release>
 80095bc:	2208      	movs	r2, #8
 80095be:	4629      	mov	r1, r5
 80095c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80095c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095c8:	6025      	str	r5, [r4, #0]
 80095ca:	61a5      	str	r5, [r4, #24]
 80095cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095d0:	f7ff fc02 	bl	8008dd8 <memset>
 80095d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095dc:	4620      	mov	r0, r4
 80095de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095e0:	3468      	adds	r4, #104	; 0x68
 80095e2:	e7d9      	b.n	8009598 <__sfp+0x1c>
 80095e4:	2104      	movs	r1, #4
 80095e6:	4638      	mov	r0, r7
 80095e8:	f7ff ff62 	bl	80094b0 <__sfmoreglue>
 80095ec:	4604      	mov	r4, r0
 80095ee:	6030      	str	r0, [r6, #0]
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d1d5      	bne.n	80095a0 <__sfp+0x24>
 80095f4:	f7ff ff78 	bl	80094e8 <__sfp_lock_release>
 80095f8:	230c      	movs	r3, #12
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	e7ee      	b.n	80095dc <__sfp+0x60>
 80095fe:	bf00      	nop
 8009600:	0800a658 	.word	0x0800a658
 8009604:	ffff0001 	.word	0xffff0001

08009608 <fiprintf>:
 8009608:	b40e      	push	{r1, r2, r3}
 800960a:	b503      	push	{r0, r1, lr}
 800960c:	4601      	mov	r1, r0
 800960e:	ab03      	add	r3, sp, #12
 8009610:	4805      	ldr	r0, [pc, #20]	; (8009628 <fiprintf+0x20>)
 8009612:	f853 2b04 	ldr.w	r2, [r3], #4
 8009616:	6800      	ldr	r0, [r0, #0]
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	f000 fabf 	bl	8009b9c <_vfiprintf_r>
 800961e:	b002      	add	sp, #8
 8009620:	f85d eb04 	ldr.w	lr, [sp], #4
 8009624:	b003      	add	sp, #12
 8009626:	4770      	bx	lr
 8009628:	20000198 	.word	0x20000198

0800962c <_fwalk_reent>:
 800962c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009630:	4606      	mov	r6, r0
 8009632:	4688      	mov	r8, r1
 8009634:	2700      	movs	r7, #0
 8009636:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800963a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800963e:	f1b9 0901 	subs.w	r9, r9, #1
 8009642:	d505      	bpl.n	8009650 <_fwalk_reent+0x24>
 8009644:	6824      	ldr	r4, [r4, #0]
 8009646:	2c00      	cmp	r4, #0
 8009648:	d1f7      	bne.n	800963a <_fwalk_reent+0xe>
 800964a:	4638      	mov	r0, r7
 800964c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009650:	89ab      	ldrh	r3, [r5, #12]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d907      	bls.n	8009666 <_fwalk_reent+0x3a>
 8009656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800965a:	3301      	adds	r3, #1
 800965c:	d003      	beq.n	8009666 <_fwalk_reent+0x3a>
 800965e:	4629      	mov	r1, r5
 8009660:	4630      	mov	r0, r6
 8009662:	47c0      	blx	r8
 8009664:	4307      	orrs	r7, r0
 8009666:	3568      	adds	r5, #104	; 0x68
 8009668:	e7e9      	b.n	800963e <_fwalk_reent+0x12>

0800966a <__retarget_lock_init_recursive>:
 800966a:	4770      	bx	lr

0800966c <__retarget_lock_acquire_recursive>:
 800966c:	4770      	bx	lr

0800966e <__retarget_lock_release_recursive>:
 800966e:	4770      	bx	lr

08009670 <__swhatbuf_r>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	460e      	mov	r6, r1
 8009674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009678:	4614      	mov	r4, r2
 800967a:	2900      	cmp	r1, #0
 800967c:	461d      	mov	r5, r3
 800967e:	b096      	sub	sp, #88	; 0x58
 8009680:	da07      	bge.n	8009692 <__swhatbuf_r+0x22>
 8009682:	2300      	movs	r3, #0
 8009684:	602b      	str	r3, [r5, #0]
 8009686:	89b3      	ldrh	r3, [r6, #12]
 8009688:	061a      	lsls	r2, r3, #24
 800968a:	d410      	bmi.n	80096ae <__swhatbuf_r+0x3e>
 800968c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009690:	e00e      	b.n	80096b0 <__swhatbuf_r+0x40>
 8009692:	466a      	mov	r2, sp
 8009694:	f000 fdc6 	bl	800a224 <_fstat_r>
 8009698:	2800      	cmp	r0, #0
 800969a:	dbf2      	blt.n	8009682 <__swhatbuf_r+0x12>
 800969c:	9a01      	ldr	r2, [sp, #4]
 800969e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096a6:	425a      	negs	r2, r3
 80096a8:	415a      	adcs	r2, r3
 80096aa:	602a      	str	r2, [r5, #0]
 80096ac:	e7ee      	b.n	800968c <__swhatbuf_r+0x1c>
 80096ae:	2340      	movs	r3, #64	; 0x40
 80096b0:	2000      	movs	r0, #0
 80096b2:	6023      	str	r3, [r4, #0]
 80096b4:	b016      	add	sp, #88	; 0x58
 80096b6:	bd70      	pop	{r4, r5, r6, pc}

080096b8 <__smakebuf_r>:
 80096b8:	898b      	ldrh	r3, [r1, #12]
 80096ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096bc:	079d      	lsls	r5, r3, #30
 80096be:	4606      	mov	r6, r0
 80096c0:	460c      	mov	r4, r1
 80096c2:	d507      	bpl.n	80096d4 <__smakebuf_r+0x1c>
 80096c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	6123      	str	r3, [r4, #16]
 80096cc:	2301      	movs	r3, #1
 80096ce:	6163      	str	r3, [r4, #20]
 80096d0:	b002      	add	sp, #8
 80096d2:	bd70      	pop	{r4, r5, r6, pc}
 80096d4:	466a      	mov	r2, sp
 80096d6:	ab01      	add	r3, sp, #4
 80096d8:	f7ff ffca 	bl	8009670 <__swhatbuf_r>
 80096dc:	9900      	ldr	r1, [sp, #0]
 80096de:	4605      	mov	r5, r0
 80096e0:	4630      	mov	r0, r6
 80096e2:	f000 f87d 	bl	80097e0 <_malloc_r>
 80096e6:	b948      	cbnz	r0, 80096fc <__smakebuf_r+0x44>
 80096e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ec:	059a      	lsls	r2, r3, #22
 80096ee:	d4ef      	bmi.n	80096d0 <__smakebuf_r+0x18>
 80096f0:	f023 0303 	bic.w	r3, r3, #3
 80096f4:	f043 0302 	orr.w	r3, r3, #2
 80096f8:	81a3      	strh	r3, [r4, #12]
 80096fa:	e7e3      	b.n	80096c4 <__smakebuf_r+0xc>
 80096fc:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <__smakebuf_r+0x7c>)
 80096fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	6020      	str	r0, [r4, #0]
 8009704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009708:	81a3      	strh	r3, [r4, #12]
 800970a:	9b00      	ldr	r3, [sp, #0]
 800970c:	6120      	str	r0, [r4, #16]
 800970e:	6163      	str	r3, [r4, #20]
 8009710:	9b01      	ldr	r3, [sp, #4]
 8009712:	b15b      	cbz	r3, 800972c <__smakebuf_r+0x74>
 8009714:	4630      	mov	r0, r6
 8009716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800971a:	f000 fd95 	bl	800a248 <_isatty_r>
 800971e:	b128      	cbz	r0, 800972c <__smakebuf_r+0x74>
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	f023 0303 	bic.w	r3, r3, #3
 8009726:	f043 0301 	orr.w	r3, r3, #1
 800972a:	81a3      	strh	r3, [r4, #12]
 800972c:	89a0      	ldrh	r0, [r4, #12]
 800972e:	4305      	orrs	r5, r0
 8009730:	81a5      	strh	r5, [r4, #12]
 8009732:	e7cd      	b.n	80096d0 <__smakebuf_r+0x18>
 8009734:	080094a5 	.word	0x080094a5

08009738 <malloc>:
 8009738:	4b02      	ldr	r3, [pc, #8]	; (8009744 <malloc+0xc>)
 800973a:	4601      	mov	r1, r0
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	f000 b84f 	b.w	80097e0 <_malloc_r>
 8009742:	bf00      	nop
 8009744:	20000198 	.word	0x20000198

08009748 <_free_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4605      	mov	r5, r0
 800974c:	2900      	cmp	r1, #0
 800974e:	d043      	beq.n	80097d8 <_free_r+0x90>
 8009750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009754:	1f0c      	subs	r4, r1, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	bfb8      	it	lt
 800975a:	18e4      	addlt	r4, r4, r3
 800975c:	f000 fdcc 	bl	800a2f8 <__malloc_lock>
 8009760:	4a1e      	ldr	r2, [pc, #120]	; (80097dc <_free_r+0x94>)
 8009762:	6813      	ldr	r3, [r2, #0]
 8009764:	4610      	mov	r0, r2
 8009766:	b933      	cbnz	r3, 8009776 <_free_r+0x2e>
 8009768:	6063      	str	r3, [r4, #4]
 800976a:	6014      	str	r4, [r2, #0]
 800976c:	4628      	mov	r0, r5
 800976e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009772:	f000 bdc7 	b.w	800a304 <__malloc_unlock>
 8009776:	42a3      	cmp	r3, r4
 8009778:	d90a      	bls.n	8009790 <_free_r+0x48>
 800977a:	6821      	ldr	r1, [r4, #0]
 800977c:	1862      	adds	r2, r4, r1
 800977e:	4293      	cmp	r3, r2
 8009780:	bf01      	itttt	eq
 8009782:	681a      	ldreq	r2, [r3, #0]
 8009784:	685b      	ldreq	r3, [r3, #4]
 8009786:	1852      	addeq	r2, r2, r1
 8009788:	6022      	streq	r2, [r4, #0]
 800978a:	6063      	str	r3, [r4, #4]
 800978c:	6004      	str	r4, [r0, #0]
 800978e:	e7ed      	b.n	800976c <_free_r+0x24>
 8009790:	461a      	mov	r2, r3
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	b10b      	cbz	r3, 800979a <_free_r+0x52>
 8009796:	42a3      	cmp	r3, r4
 8009798:	d9fa      	bls.n	8009790 <_free_r+0x48>
 800979a:	6811      	ldr	r1, [r2, #0]
 800979c:	1850      	adds	r0, r2, r1
 800979e:	42a0      	cmp	r0, r4
 80097a0:	d10b      	bne.n	80097ba <_free_r+0x72>
 80097a2:	6820      	ldr	r0, [r4, #0]
 80097a4:	4401      	add	r1, r0
 80097a6:	1850      	adds	r0, r2, r1
 80097a8:	4283      	cmp	r3, r0
 80097aa:	6011      	str	r1, [r2, #0]
 80097ac:	d1de      	bne.n	800976c <_free_r+0x24>
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4401      	add	r1, r0
 80097b4:	6011      	str	r1, [r2, #0]
 80097b6:	6053      	str	r3, [r2, #4]
 80097b8:	e7d8      	b.n	800976c <_free_r+0x24>
 80097ba:	d902      	bls.n	80097c2 <_free_r+0x7a>
 80097bc:	230c      	movs	r3, #12
 80097be:	602b      	str	r3, [r5, #0]
 80097c0:	e7d4      	b.n	800976c <_free_r+0x24>
 80097c2:	6820      	ldr	r0, [r4, #0]
 80097c4:	1821      	adds	r1, r4, r0
 80097c6:	428b      	cmp	r3, r1
 80097c8:	bf01      	itttt	eq
 80097ca:	6819      	ldreq	r1, [r3, #0]
 80097cc:	685b      	ldreq	r3, [r3, #4]
 80097ce:	1809      	addeq	r1, r1, r0
 80097d0:	6021      	streq	r1, [r4, #0]
 80097d2:	6063      	str	r3, [r4, #4]
 80097d4:	6054      	str	r4, [r2, #4]
 80097d6:	e7c9      	b.n	800976c <_free_r+0x24>
 80097d8:	bd38      	pop	{r3, r4, r5, pc}
 80097da:	bf00      	nop
 80097dc:	20000530 	.word	0x20000530

080097e0 <_malloc_r>:
 80097e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e2:	1ccd      	adds	r5, r1, #3
 80097e4:	f025 0503 	bic.w	r5, r5, #3
 80097e8:	3508      	adds	r5, #8
 80097ea:	2d0c      	cmp	r5, #12
 80097ec:	bf38      	it	cc
 80097ee:	250c      	movcc	r5, #12
 80097f0:	2d00      	cmp	r5, #0
 80097f2:	4606      	mov	r6, r0
 80097f4:	db01      	blt.n	80097fa <_malloc_r+0x1a>
 80097f6:	42a9      	cmp	r1, r5
 80097f8:	d903      	bls.n	8009802 <_malloc_r+0x22>
 80097fa:	230c      	movs	r3, #12
 80097fc:	6033      	str	r3, [r6, #0]
 80097fe:	2000      	movs	r0, #0
 8009800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009802:	f000 fd79 	bl	800a2f8 <__malloc_lock>
 8009806:	4921      	ldr	r1, [pc, #132]	; (800988c <_malloc_r+0xac>)
 8009808:	680a      	ldr	r2, [r1, #0]
 800980a:	4614      	mov	r4, r2
 800980c:	b99c      	cbnz	r4, 8009836 <_malloc_r+0x56>
 800980e:	4f20      	ldr	r7, [pc, #128]	; (8009890 <_malloc_r+0xb0>)
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	b923      	cbnz	r3, 800981e <_malloc_r+0x3e>
 8009814:	4621      	mov	r1, r4
 8009816:	4630      	mov	r0, r6
 8009818:	f000 fc86 	bl	800a128 <_sbrk_r>
 800981c:	6038      	str	r0, [r7, #0]
 800981e:	4629      	mov	r1, r5
 8009820:	4630      	mov	r0, r6
 8009822:	f000 fc81 	bl	800a128 <_sbrk_r>
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	d123      	bne.n	8009872 <_malloc_r+0x92>
 800982a:	230c      	movs	r3, #12
 800982c:	4630      	mov	r0, r6
 800982e:	6033      	str	r3, [r6, #0]
 8009830:	f000 fd68 	bl	800a304 <__malloc_unlock>
 8009834:	e7e3      	b.n	80097fe <_malloc_r+0x1e>
 8009836:	6823      	ldr	r3, [r4, #0]
 8009838:	1b5b      	subs	r3, r3, r5
 800983a:	d417      	bmi.n	800986c <_malloc_r+0x8c>
 800983c:	2b0b      	cmp	r3, #11
 800983e:	d903      	bls.n	8009848 <_malloc_r+0x68>
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	441c      	add	r4, r3
 8009844:	6025      	str	r5, [r4, #0]
 8009846:	e004      	b.n	8009852 <_malloc_r+0x72>
 8009848:	6863      	ldr	r3, [r4, #4]
 800984a:	42a2      	cmp	r2, r4
 800984c:	bf0c      	ite	eq
 800984e:	600b      	streq	r3, [r1, #0]
 8009850:	6053      	strne	r3, [r2, #4]
 8009852:	4630      	mov	r0, r6
 8009854:	f000 fd56 	bl	800a304 <__malloc_unlock>
 8009858:	f104 000b 	add.w	r0, r4, #11
 800985c:	1d23      	adds	r3, r4, #4
 800985e:	f020 0007 	bic.w	r0, r0, #7
 8009862:	1ac2      	subs	r2, r0, r3
 8009864:	d0cc      	beq.n	8009800 <_malloc_r+0x20>
 8009866:	1a1b      	subs	r3, r3, r0
 8009868:	50a3      	str	r3, [r4, r2]
 800986a:	e7c9      	b.n	8009800 <_malloc_r+0x20>
 800986c:	4622      	mov	r2, r4
 800986e:	6864      	ldr	r4, [r4, #4]
 8009870:	e7cc      	b.n	800980c <_malloc_r+0x2c>
 8009872:	1cc4      	adds	r4, r0, #3
 8009874:	f024 0403 	bic.w	r4, r4, #3
 8009878:	42a0      	cmp	r0, r4
 800987a:	d0e3      	beq.n	8009844 <_malloc_r+0x64>
 800987c:	1a21      	subs	r1, r4, r0
 800987e:	4630      	mov	r0, r6
 8009880:	f000 fc52 	bl	800a128 <_sbrk_r>
 8009884:	3001      	adds	r0, #1
 8009886:	d1dd      	bne.n	8009844 <_malloc_r+0x64>
 8009888:	e7cf      	b.n	800982a <_malloc_r+0x4a>
 800988a:	bf00      	nop
 800988c:	20000530 	.word	0x20000530
 8009890:	20000534 	.word	0x20000534

08009894 <__ssputs_r>:
 8009894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009898:	688e      	ldr	r6, [r1, #8]
 800989a:	4682      	mov	sl, r0
 800989c:	429e      	cmp	r6, r3
 800989e:	460c      	mov	r4, r1
 80098a0:	4690      	mov	r8, r2
 80098a2:	461f      	mov	r7, r3
 80098a4:	d838      	bhi.n	8009918 <__ssputs_r+0x84>
 80098a6:	898a      	ldrh	r2, [r1, #12]
 80098a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098ac:	d032      	beq.n	8009914 <__ssputs_r+0x80>
 80098ae:	6825      	ldr	r5, [r4, #0]
 80098b0:	6909      	ldr	r1, [r1, #16]
 80098b2:	3301      	adds	r3, #1
 80098b4:	eba5 0901 	sub.w	r9, r5, r1
 80098b8:	6965      	ldr	r5, [r4, #20]
 80098ba:	444b      	add	r3, r9
 80098bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c4:	106d      	asrs	r5, r5, #1
 80098c6:	429d      	cmp	r5, r3
 80098c8:	bf38      	it	cc
 80098ca:	461d      	movcc	r5, r3
 80098cc:	0553      	lsls	r3, r2, #21
 80098ce:	d531      	bpl.n	8009934 <__ssputs_r+0xa0>
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7ff ff85 	bl	80097e0 <_malloc_r>
 80098d6:	4606      	mov	r6, r0
 80098d8:	b950      	cbnz	r0, 80098f0 <__ssputs_r+0x5c>
 80098da:	230c      	movs	r3, #12
 80098dc:	f04f 30ff 	mov.w	r0, #4294967295
 80098e0:	f8ca 3000 	str.w	r3, [sl]
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ea:	81a3      	strh	r3, [r4, #12]
 80098ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f0:	464a      	mov	r2, r9
 80098f2:	6921      	ldr	r1, [r4, #16]
 80098f4:	f000 fcd8 	bl	800a2a8 <memcpy>
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009902:	81a3      	strh	r3, [r4, #12]
 8009904:	6126      	str	r6, [r4, #16]
 8009906:	444e      	add	r6, r9
 8009908:	6026      	str	r6, [r4, #0]
 800990a:	463e      	mov	r6, r7
 800990c:	6165      	str	r5, [r4, #20]
 800990e:	eba5 0509 	sub.w	r5, r5, r9
 8009912:	60a5      	str	r5, [r4, #8]
 8009914:	42be      	cmp	r6, r7
 8009916:	d900      	bls.n	800991a <__ssputs_r+0x86>
 8009918:	463e      	mov	r6, r7
 800991a:	4632      	mov	r2, r6
 800991c:	4641      	mov	r1, r8
 800991e:	6820      	ldr	r0, [r4, #0]
 8009920:	f000 fcd0 	bl	800a2c4 <memmove>
 8009924:	68a3      	ldr	r3, [r4, #8]
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	1b9b      	subs	r3, r3, r6
 800992a:	4432      	add	r2, r6
 800992c:	2000      	movs	r0, #0
 800992e:	60a3      	str	r3, [r4, #8]
 8009930:	6022      	str	r2, [r4, #0]
 8009932:	e7db      	b.n	80098ec <__ssputs_r+0x58>
 8009934:	462a      	mov	r2, r5
 8009936:	f000 fceb 	bl	800a310 <_realloc_r>
 800993a:	4606      	mov	r6, r0
 800993c:	2800      	cmp	r0, #0
 800993e:	d1e1      	bne.n	8009904 <__ssputs_r+0x70>
 8009940:	4650      	mov	r0, sl
 8009942:	6921      	ldr	r1, [r4, #16]
 8009944:	f7ff ff00 	bl	8009748 <_free_r>
 8009948:	e7c7      	b.n	80098da <__ssputs_r+0x46>
	...

0800994c <_svfiprintf_r>:
 800994c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009950:	4698      	mov	r8, r3
 8009952:	898b      	ldrh	r3, [r1, #12]
 8009954:	4607      	mov	r7, r0
 8009956:	061b      	lsls	r3, r3, #24
 8009958:	460d      	mov	r5, r1
 800995a:	4614      	mov	r4, r2
 800995c:	b09d      	sub	sp, #116	; 0x74
 800995e:	d50e      	bpl.n	800997e <_svfiprintf_r+0x32>
 8009960:	690b      	ldr	r3, [r1, #16]
 8009962:	b963      	cbnz	r3, 800997e <_svfiprintf_r+0x32>
 8009964:	2140      	movs	r1, #64	; 0x40
 8009966:	f7ff ff3b 	bl	80097e0 <_malloc_r>
 800996a:	6028      	str	r0, [r5, #0]
 800996c:	6128      	str	r0, [r5, #16]
 800996e:	b920      	cbnz	r0, 800997a <_svfiprintf_r+0x2e>
 8009970:	230c      	movs	r3, #12
 8009972:	603b      	str	r3, [r7, #0]
 8009974:	f04f 30ff 	mov.w	r0, #4294967295
 8009978:	e0d1      	b.n	8009b1e <_svfiprintf_r+0x1d2>
 800997a:	2340      	movs	r3, #64	; 0x40
 800997c:	616b      	str	r3, [r5, #20]
 800997e:	2300      	movs	r3, #0
 8009980:	9309      	str	r3, [sp, #36]	; 0x24
 8009982:	2320      	movs	r3, #32
 8009984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009988:	2330      	movs	r3, #48	; 0x30
 800998a:	f04f 0901 	mov.w	r9, #1
 800998e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009992:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b38 <_svfiprintf_r+0x1ec>
 8009996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800999a:	4623      	mov	r3, r4
 800999c:	469a      	mov	sl, r3
 800999e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a2:	b10a      	cbz	r2, 80099a8 <_svfiprintf_r+0x5c>
 80099a4:	2a25      	cmp	r2, #37	; 0x25
 80099a6:	d1f9      	bne.n	800999c <_svfiprintf_r+0x50>
 80099a8:	ebba 0b04 	subs.w	fp, sl, r4
 80099ac:	d00b      	beq.n	80099c6 <_svfiprintf_r+0x7a>
 80099ae:	465b      	mov	r3, fp
 80099b0:	4622      	mov	r2, r4
 80099b2:	4629      	mov	r1, r5
 80099b4:	4638      	mov	r0, r7
 80099b6:	f7ff ff6d 	bl	8009894 <__ssputs_r>
 80099ba:	3001      	adds	r0, #1
 80099bc:	f000 80aa 	beq.w	8009b14 <_svfiprintf_r+0x1c8>
 80099c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099c2:	445a      	add	r2, fp
 80099c4:	9209      	str	r2, [sp, #36]	; 0x24
 80099c6:	f89a 3000 	ldrb.w	r3, [sl]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 80a2 	beq.w	8009b14 <_svfiprintf_r+0x1c8>
 80099d0:	2300      	movs	r3, #0
 80099d2:	f04f 32ff 	mov.w	r2, #4294967295
 80099d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099da:	f10a 0a01 	add.w	sl, sl, #1
 80099de:	9304      	str	r3, [sp, #16]
 80099e0:	9307      	str	r3, [sp, #28]
 80099e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099e6:	931a      	str	r3, [sp, #104]	; 0x68
 80099e8:	4654      	mov	r4, sl
 80099ea:	2205      	movs	r2, #5
 80099ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f0:	4851      	ldr	r0, [pc, #324]	; (8009b38 <_svfiprintf_r+0x1ec>)
 80099f2:	f000 fc4b 	bl	800a28c <memchr>
 80099f6:	9a04      	ldr	r2, [sp, #16]
 80099f8:	b9d8      	cbnz	r0, 8009a32 <_svfiprintf_r+0xe6>
 80099fa:	06d0      	lsls	r0, r2, #27
 80099fc:	bf44      	itt	mi
 80099fe:	2320      	movmi	r3, #32
 8009a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a04:	0711      	lsls	r1, r2, #28
 8009a06:	bf44      	itt	mi
 8009a08:	232b      	movmi	r3, #43	; 0x2b
 8009a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a12:	2b2a      	cmp	r3, #42	; 0x2a
 8009a14:	d015      	beq.n	8009a42 <_svfiprintf_r+0xf6>
 8009a16:	4654      	mov	r4, sl
 8009a18:	2000      	movs	r0, #0
 8009a1a:	f04f 0c0a 	mov.w	ip, #10
 8009a1e:	9a07      	ldr	r2, [sp, #28]
 8009a20:	4621      	mov	r1, r4
 8009a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a26:	3b30      	subs	r3, #48	; 0x30
 8009a28:	2b09      	cmp	r3, #9
 8009a2a:	d94e      	bls.n	8009aca <_svfiprintf_r+0x17e>
 8009a2c:	b1b0      	cbz	r0, 8009a5c <_svfiprintf_r+0x110>
 8009a2e:	9207      	str	r2, [sp, #28]
 8009a30:	e014      	b.n	8009a5c <_svfiprintf_r+0x110>
 8009a32:	eba0 0308 	sub.w	r3, r0, r8
 8009a36:	fa09 f303 	lsl.w	r3, r9, r3
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	46a2      	mov	sl, r4
 8009a3e:	9304      	str	r3, [sp, #16]
 8009a40:	e7d2      	b.n	80099e8 <_svfiprintf_r+0x9c>
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	1d19      	adds	r1, r3, #4
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	9103      	str	r1, [sp, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfbb      	ittet	lt
 8009a4e:	425b      	neglt	r3, r3
 8009a50:	f042 0202 	orrlt.w	r2, r2, #2
 8009a54:	9307      	strge	r3, [sp, #28]
 8009a56:	9307      	strlt	r3, [sp, #28]
 8009a58:	bfb8      	it	lt
 8009a5a:	9204      	strlt	r2, [sp, #16]
 8009a5c:	7823      	ldrb	r3, [r4, #0]
 8009a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8009a60:	d10c      	bne.n	8009a7c <_svfiprintf_r+0x130>
 8009a62:	7863      	ldrb	r3, [r4, #1]
 8009a64:	2b2a      	cmp	r3, #42	; 0x2a
 8009a66:	d135      	bne.n	8009ad4 <_svfiprintf_r+0x188>
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	3402      	adds	r4, #2
 8009a6c:	1d1a      	adds	r2, r3, #4
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	9203      	str	r2, [sp, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	bfb8      	it	lt
 8009a76:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a7a:	9305      	str	r3, [sp, #20]
 8009a7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b48 <_svfiprintf_r+0x1fc>
 8009a80:	2203      	movs	r2, #3
 8009a82:	4650      	mov	r0, sl
 8009a84:	7821      	ldrb	r1, [r4, #0]
 8009a86:	f000 fc01 	bl	800a28c <memchr>
 8009a8a:	b140      	cbz	r0, 8009a9e <_svfiprintf_r+0x152>
 8009a8c:	2340      	movs	r3, #64	; 0x40
 8009a8e:	eba0 000a 	sub.w	r0, r0, sl
 8009a92:	fa03 f000 	lsl.w	r0, r3, r0
 8009a96:	9b04      	ldr	r3, [sp, #16]
 8009a98:	3401      	adds	r4, #1
 8009a9a:	4303      	orrs	r3, r0
 8009a9c:	9304      	str	r3, [sp, #16]
 8009a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa2:	2206      	movs	r2, #6
 8009aa4:	4825      	ldr	r0, [pc, #148]	; (8009b3c <_svfiprintf_r+0x1f0>)
 8009aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aaa:	f000 fbef 	bl	800a28c <memchr>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d038      	beq.n	8009b24 <_svfiprintf_r+0x1d8>
 8009ab2:	4b23      	ldr	r3, [pc, #140]	; (8009b40 <_svfiprintf_r+0x1f4>)
 8009ab4:	bb1b      	cbnz	r3, 8009afe <_svfiprintf_r+0x1b2>
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	3307      	adds	r3, #7
 8009aba:	f023 0307 	bic.w	r3, r3, #7
 8009abe:	3308      	adds	r3, #8
 8009ac0:	9303      	str	r3, [sp, #12]
 8009ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac4:	4433      	add	r3, r6
 8009ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac8:	e767      	b.n	800999a <_svfiprintf_r+0x4e>
 8009aca:	460c      	mov	r4, r1
 8009acc:	2001      	movs	r0, #1
 8009ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad2:	e7a5      	b.n	8009a20 <_svfiprintf_r+0xd4>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f04f 0c0a 	mov.w	ip, #10
 8009ada:	4619      	mov	r1, r3
 8009adc:	3401      	adds	r4, #1
 8009ade:	9305      	str	r3, [sp, #20]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae6:	3a30      	subs	r2, #48	; 0x30
 8009ae8:	2a09      	cmp	r2, #9
 8009aea:	d903      	bls.n	8009af4 <_svfiprintf_r+0x1a8>
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0c5      	beq.n	8009a7c <_svfiprintf_r+0x130>
 8009af0:	9105      	str	r1, [sp, #20]
 8009af2:	e7c3      	b.n	8009a7c <_svfiprintf_r+0x130>
 8009af4:	4604      	mov	r4, r0
 8009af6:	2301      	movs	r3, #1
 8009af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009afc:	e7f0      	b.n	8009ae0 <_svfiprintf_r+0x194>
 8009afe:	ab03      	add	r3, sp, #12
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	462a      	mov	r2, r5
 8009b04:	4638      	mov	r0, r7
 8009b06:	4b0f      	ldr	r3, [pc, #60]	; (8009b44 <_svfiprintf_r+0x1f8>)
 8009b08:	a904      	add	r1, sp, #16
 8009b0a:	f3af 8000 	nop.w
 8009b0e:	1c42      	adds	r2, r0, #1
 8009b10:	4606      	mov	r6, r0
 8009b12:	d1d6      	bne.n	8009ac2 <_svfiprintf_r+0x176>
 8009b14:	89ab      	ldrh	r3, [r5, #12]
 8009b16:	065b      	lsls	r3, r3, #25
 8009b18:	f53f af2c 	bmi.w	8009974 <_svfiprintf_r+0x28>
 8009b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b1e:	b01d      	add	sp, #116	; 0x74
 8009b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b24:	ab03      	add	r3, sp, #12
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	462a      	mov	r2, r5
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <_svfiprintf_r+0x1f8>)
 8009b2e:	a904      	add	r1, sp, #16
 8009b30:	f000 f9d4 	bl	8009edc <_printf_i>
 8009b34:	e7eb      	b.n	8009b0e <_svfiprintf_r+0x1c2>
 8009b36:	bf00      	nop
 8009b38:	0800a874 	.word	0x0800a874
 8009b3c:	0800a87e 	.word	0x0800a87e
 8009b40:	00000000 	.word	0x00000000
 8009b44:	08009895 	.word	0x08009895
 8009b48:	0800a87a 	.word	0x0800a87a

08009b4c <__sfputc_r>:
 8009b4c:	6893      	ldr	r3, [r2, #8]
 8009b4e:	b410      	push	{r4}
 8009b50:	3b01      	subs	r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	6093      	str	r3, [r2, #8]
 8009b56:	da07      	bge.n	8009b68 <__sfputc_r+0x1c>
 8009b58:	6994      	ldr	r4, [r2, #24]
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	db01      	blt.n	8009b62 <__sfputc_r+0x16>
 8009b5e:	290a      	cmp	r1, #10
 8009b60:	d102      	bne.n	8009b68 <__sfputc_r+0x1c>
 8009b62:	bc10      	pop	{r4}
 8009b64:	f7ff bada 	b.w	800911c <__swbuf_r>
 8009b68:	6813      	ldr	r3, [r2, #0]
 8009b6a:	1c58      	adds	r0, r3, #1
 8009b6c:	6010      	str	r0, [r2, #0]
 8009b6e:	7019      	strb	r1, [r3, #0]
 8009b70:	4608      	mov	r0, r1
 8009b72:	bc10      	pop	{r4}
 8009b74:	4770      	bx	lr

08009b76 <__sfputs_r>:
 8009b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b78:	4606      	mov	r6, r0
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	4614      	mov	r4, r2
 8009b7e:	18d5      	adds	r5, r2, r3
 8009b80:	42ac      	cmp	r4, r5
 8009b82:	d101      	bne.n	8009b88 <__sfputs_r+0x12>
 8009b84:	2000      	movs	r0, #0
 8009b86:	e007      	b.n	8009b98 <__sfputs_r+0x22>
 8009b88:	463a      	mov	r2, r7
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b90:	f7ff ffdc 	bl	8009b4c <__sfputc_r>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d1f3      	bne.n	8009b80 <__sfputs_r+0xa>
 8009b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b9c <_vfiprintf_r>:
 8009b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba0:	460d      	mov	r5, r1
 8009ba2:	4614      	mov	r4, r2
 8009ba4:	4698      	mov	r8, r3
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	b09d      	sub	sp, #116	; 0x74
 8009baa:	b118      	cbz	r0, 8009bb4 <_vfiprintf_r+0x18>
 8009bac:	6983      	ldr	r3, [r0, #24]
 8009bae:	b90b      	cbnz	r3, 8009bb4 <_vfiprintf_r+0x18>
 8009bb0:	f7ff fcac 	bl	800950c <__sinit>
 8009bb4:	4b89      	ldr	r3, [pc, #548]	; (8009ddc <_vfiprintf_r+0x240>)
 8009bb6:	429d      	cmp	r5, r3
 8009bb8:	d11b      	bne.n	8009bf2 <_vfiprintf_r+0x56>
 8009bba:	6875      	ldr	r5, [r6, #4]
 8009bbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bbe:	07d9      	lsls	r1, r3, #31
 8009bc0:	d405      	bmi.n	8009bce <_vfiprintf_r+0x32>
 8009bc2:	89ab      	ldrh	r3, [r5, #12]
 8009bc4:	059a      	lsls	r2, r3, #22
 8009bc6:	d402      	bmi.n	8009bce <_vfiprintf_r+0x32>
 8009bc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bca:	f7ff fd4f 	bl	800966c <__retarget_lock_acquire_recursive>
 8009bce:	89ab      	ldrh	r3, [r5, #12]
 8009bd0:	071b      	lsls	r3, r3, #28
 8009bd2:	d501      	bpl.n	8009bd8 <_vfiprintf_r+0x3c>
 8009bd4:	692b      	ldr	r3, [r5, #16]
 8009bd6:	b9eb      	cbnz	r3, 8009c14 <_vfiprintf_r+0x78>
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f7ff faf0 	bl	80091c0 <__swsetup_r>
 8009be0:	b1c0      	cbz	r0, 8009c14 <_vfiprintf_r+0x78>
 8009be2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009be4:	07dc      	lsls	r4, r3, #31
 8009be6:	d50e      	bpl.n	8009c06 <_vfiprintf_r+0x6a>
 8009be8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bec:	b01d      	add	sp, #116	; 0x74
 8009bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf2:	4b7b      	ldr	r3, [pc, #492]	; (8009de0 <_vfiprintf_r+0x244>)
 8009bf4:	429d      	cmp	r5, r3
 8009bf6:	d101      	bne.n	8009bfc <_vfiprintf_r+0x60>
 8009bf8:	68b5      	ldr	r5, [r6, #8]
 8009bfa:	e7df      	b.n	8009bbc <_vfiprintf_r+0x20>
 8009bfc:	4b79      	ldr	r3, [pc, #484]	; (8009de4 <_vfiprintf_r+0x248>)
 8009bfe:	429d      	cmp	r5, r3
 8009c00:	bf08      	it	eq
 8009c02:	68f5      	ldreq	r5, [r6, #12]
 8009c04:	e7da      	b.n	8009bbc <_vfiprintf_r+0x20>
 8009c06:	89ab      	ldrh	r3, [r5, #12]
 8009c08:	0598      	lsls	r0, r3, #22
 8009c0a:	d4ed      	bmi.n	8009be8 <_vfiprintf_r+0x4c>
 8009c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c0e:	f7ff fd2e 	bl	800966e <__retarget_lock_release_recursive>
 8009c12:	e7e9      	b.n	8009be8 <_vfiprintf_r+0x4c>
 8009c14:	2300      	movs	r3, #0
 8009c16:	9309      	str	r3, [sp, #36]	; 0x24
 8009c18:	2320      	movs	r3, #32
 8009c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c1e:	2330      	movs	r3, #48	; 0x30
 8009c20:	f04f 0901 	mov.w	r9, #1
 8009c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c28:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009de8 <_vfiprintf_r+0x24c>
 8009c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c30:	4623      	mov	r3, r4
 8009c32:	469a      	mov	sl, r3
 8009c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c38:	b10a      	cbz	r2, 8009c3e <_vfiprintf_r+0xa2>
 8009c3a:	2a25      	cmp	r2, #37	; 0x25
 8009c3c:	d1f9      	bne.n	8009c32 <_vfiprintf_r+0x96>
 8009c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c42:	d00b      	beq.n	8009c5c <_vfiprintf_r+0xc0>
 8009c44:	465b      	mov	r3, fp
 8009c46:	4622      	mov	r2, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f7ff ff93 	bl	8009b76 <__sfputs_r>
 8009c50:	3001      	adds	r0, #1
 8009c52:	f000 80aa 	beq.w	8009daa <_vfiprintf_r+0x20e>
 8009c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c58:	445a      	add	r2, fp
 8009c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 80a2 	beq.w	8009daa <_vfiprintf_r+0x20e>
 8009c66:	2300      	movs	r3, #0
 8009c68:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c70:	f10a 0a01 	add.w	sl, sl, #1
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	9307      	str	r3, [sp, #28]
 8009c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c7e:	4654      	mov	r4, sl
 8009c80:	2205      	movs	r2, #5
 8009c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c86:	4858      	ldr	r0, [pc, #352]	; (8009de8 <_vfiprintf_r+0x24c>)
 8009c88:	f000 fb00 	bl	800a28c <memchr>
 8009c8c:	9a04      	ldr	r2, [sp, #16]
 8009c8e:	b9d8      	cbnz	r0, 8009cc8 <_vfiprintf_r+0x12c>
 8009c90:	06d1      	lsls	r1, r2, #27
 8009c92:	bf44      	itt	mi
 8009c94:	2320      	movmi	r3, #32
 8009c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c9a:	0713      	lsls	r3, r2, #28
 8009c9c:	bf44      	itt	mi
 8009c9e:	232b      	movmi	r3, #43	; 0x2b
 8009ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8009caa:	d015      	beq.n	8009cd8 <_vfiprintf_r+0x13c>
 8009cac:	4654      	mov	r4, sl
 8009cae:	2000      	movs	r0, #0
 8009cb0:	f04f 0c0a 	mov.w	ip, #10
 8009cb4:	9a07      	ldr	r2, [sp, #28]
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cbc:	3b30      	subs	r3, #48	; 0x30
 8009cbe:	2b09      	cmp	r3, #9
 8009cc0:	d94e      	bls.n	8009d60 <_vfiprintf_r+0x1c4>
 8009cc2:	b1b0      	cbz	r0, 8009cf2 <_vfiprintf_r+0x156>
 8009cc4:	9207      	str	r2, [sp, #28]
 8009cc6:	e014      	b.n	8009cf2 <_vfiprintf_r+0x156>
 8009cc8:	eba0 0308 	sub.w	r3, r0, r8
 8009ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	46a2      	mov	sl, r4
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	e7d2      	b.n	8009c7e <_vfiprintf_r+0xe2>
 8009cd8:	9b03      	ldr	r3, [sp, #12]
 8009cda:	1d19      	adds	r1, r3, #4
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	9103      	str	r1, [sp, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bfbb      	ittet	lt
 8009ce4:	425b      	neglt	r3, r3
 8009ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cea:	9307      	strge	r3, [sp, #28]
 8009cec:	9307      	strlt	r3, [sp, #28]
 8009cee:	bfb8      	it	lt
 8009cf0:	9204      	strlt	r2, [sp, #16]
 8009cf2:	7823      	ldrb	r3, [r4, #0]
 8009cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8009cf6:	d10c      	bne.n	8009d12 <_vfiprintf_r+0x176>
 8009cf8:	7863      	ldrb	r3, [r4, #1]
 8009cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8009cfc:	d135      	bne.n	8009d6a <_vfiprintf_r+0x1ce>
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	3402      	adds	r4, #2
 8009d02:	1d1a      	adds	r2, r3, #4
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	9203      	str	r2, [sp, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	bfb8      	it	lt
 8009d0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d10:	9305      	str	r3, [sp, #20]
 8009d12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009df8 <_vfiprintf_r+0x25c>
 8009d16:	2203      	movs	r2, #3
 8009d18:	4650      	mov	r0, sl
 8009d1a:	7821      	ldrb	r1, [r4, #0]
 8009d1c:	f000 fab6 	bl	800a28c <memchr>
 8009d20:	b140      	cbz	r0, 8009d34 <_vfiprintf_r+0x198>
 8009d22:	2340      	movs	r3, #64	; 0x40
 8009d24:	eba0 000a 	sub.w	r0, r0, sl
 8009d28:	fa03 f000 	lsl.w	r0, r3, r0
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	3401      	adds	r4, #1
 8009d30:	4303      	orrs	r3, r0
 8009d32:	9304      	str	r3, [sp, #16]
 8009d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d38:	2206      	movs	r2, #6
 8009d3a:	482c      	ldr	r0, [pc, #176]	; (8009dec <_vfiprintf_r+0x250>)
 8009d3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d40:	f000 faa4 	bl	800a28c <memchr>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d03f      	beq.n	8009dc8 <_vfiprintf_r+0x22c>
 8009d48:	4b29      	ldr	r3, [pc, #164]	; (8009df0 <_vfiprintf_r+0x254>)
 8009d4a:	bb1b      	cbnz	r3, 8009d94 <_vfiprintf_r+0x1f8>
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	3307      	adds	r3, #7
 8009d50:	f023 0307 	bic.w	r3, r3, #7
 8009d54:	3308      	adds	r3, #8
 8009d56:	9303      	str	r3, [sp, #12]
 8009d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d5a:	443b      	add	r3, r7
 8009d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5e:	e767      	b.n	8009c30 <_vfiprintf_r+0x94>
 8009d60:	460c      	mov	r4, r1
 8009d62:	2001      	movs	r0, #1
 8009d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d68:	e7a5      	b.n	8009cb6 <_vfiprintf_r+0x11a>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f04f 0c0a 	mov.w	ip, #10
 8009d70:	4619      	mov	r1, r3
 8009d72:	3401      	adds	r4, #1
 8009d74:	9305      	str	r3, [sp, #20]
 8009d76:	4620      	mov	r0, r4
 8009d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d7c:	3a30      	subs	r2, #48	; 0x30
 8009d7e:	2a09      	cmp	r2, #9
 8009d80:	d903      	bls.n	8009d8a <_vfiprintf_r+0x1ee>
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0c5      	beq.n	8009d12 <_vfiprintf_r+0x176>
 8009d86:	9105      	str	r1, [sp, #20]
 8009d88:	e7c3      	b.n	8009d12 <_vfiprintf_r+0x176>
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d92:	e7f0      	b.n	8009d76 <_vfiprintf_r+0x1da>
 8009d94:	ab03      	add	r3, sp, #12
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	462a      	mov	r2, r5
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	4b15      	ldr	r3, [pc, #84]	; (8009df4 <_vfiprintf_r+0x258>)
 8009d9e:	a904      	add	r1, sp, #16
 8009da0:	f3af 8000 	nop.w
 8009da4:	4607      	mov	r7, r0
 8009da6:	1c78      	adds	r0, r7, #1
 8009da8:	d1d6      	bne.n	8009d58 <_vfiprintf_r+0x1bc>
 8009daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dac:	07d9      	lsls	r1, r3, #31
 8009dae:	d405      	bmi.n	8009dbc <_vfiprintf_r+0x220>
 8009db0:	89ab      	ldrh	r3, [r5, #12]
 8009db2:	059a      	lsls	r2, r3, #22
 8009db4:	d402      	bmi.n	8009dbc <_vfiprintf_r+0x220>
 8009db6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009db8:	f7ff fc59 	bl	800966e <__retarget_lock_release_recursive>
 8009dbc:	89ab      	ldrh	r3, [r5, #12]
 8009dbe:	065b      	lsls	r3, r3, #25
 8009dc0:	f53f af12 	bmi.w	8009be8 <_vfiprintf_r+0x4c>
 8009dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dc6:	e711      	b.n	8009bec <_vfiprintf_r+0x50>
 8009dc8:	ab03      	add	r3, sp, #12
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	462a      	mov	r2, r5
 8009dce:	4630      	mov	r0, r6
 8009dd0:	4b08      	ldr	r3, [pc, #32]	; (8009df4 <_vfiprintf_r+0x258>)
 8009dd2:	a904      	add	r1, sp, #16
 8009dd4:	f000 f882 	bl	8009edc <_printf_i>
 8009dd8:	e7e4      	b.n	8009da4 <_vfiprintf_r+0x208>
 8009dda:	bf00      	nop
 8009ddc:	0800a834 	.word	0x0800a834
 8009de0:	0800a854 	.word	0x0800a854
 8009de4:	0800a814 	.word	0x0800a814
 8009de8:	0800a874 	.word	0x0800a874
 8009dec:	0800a87e 	.word	0x0800a87e
 8009df0:	00000000 	.word	0x00000000
 8009df4:	08009b77 	.word	0x08009b77
 8009df8:	0800a87a 	.word	0x0800a87a

08009dfc <_printf_common>:
 8009dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e00:	4616      	mov	r6, r2
 8009e02:	4699      	mov	r9, r3
 8009e04:	688a      	ldr	r2, [r1, #8]
 8009e06:	690b      	ldr	r3, [r1, #16]
 8009e08:	4607      	mov	r7, r0
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	bfb8      	it	lt
 8009e0e:	4613      	movlt	r3, r2
 8009e10:	6033      	str	r3, [r6, #0]
 8009e12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e16:	460c      	mov	r4, r1
 8009e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e1c:	b10a      	cbz	r2, 8009e22 <_printf_common+0x26>
 8009e1e:	3301      	adds	r3, #1
 8009e20:	6033      	str	r3, [r6, #0]
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	0699      	lsls	r1, r3, #26
 8009e26:	bf42      	ittt	mi
 8009e28:	6833      	ldrmi	r3, [r6, #0]
 8009e2a:	3302      	addmi	r3, #2
 8009e2c:	6033      	strmi	r3, [r6, #0]
 8009e2e:	6825      	ldr	r5, [r4, #0]
 8009e30:	f015 0506 	ands.w	r5, r5, #6
 8009e34:	d106      	bne.n	8009e44 <_printf_common+0x48>
 8009e36:	f104 0a19 	add.w	sl, r4, #25
 8009e3a:	68e3      	ldr	r3, [r4, #12]
 8009e3c:	6832      	ldr	r2, [r6, #0]
 8009e3e:	1a9b      	subs	r3, r3, r2
 8009e40:	42ab      	cmp	r3, r5
 8009e42:	dc28      	bgt.n	8009e96 <_printf_common+0x9a>
 8009e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e48:	1e13      	subs	r3, r2, #0
 8009e4a:	6822      	ldr	r2, [r4, #0]
 8009e4c:	bf18      	it	ne
 8009e4e:	2301      	movne	r3, #1
 8009e50:	0692      	lsls	r2, r2, #26
 8009e52:	d42d      	bmi.n	8009eb0 <_printf_common+0xb4>
 8009e54:	4649      	mov	r1, r9
 8009e56:	4638      	mov	r0, r7
 8009e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e5c:	47c0      	blx	r8
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d020      	beq.n	8009ea4 <_printf_common+0xa8>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	68e5      	ldr	r5, [r4, #12]
 8009e66:	f003 0306 	and.w	r3, r3, #6
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	bf18      	it	ne
 8009e6e:	2500      	movne	r5, #0
 8009e70:	6832      	ldr	r2, [r6, #0]
 8009e72:	f04f 0600 	mov.w	r6, #0
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	bf08      	it	eq
 8009e7a:	1aad      	subeq	r5, r5, r2
 8009e7c:	6922      	ldr	r2, [r4, #16]
 8009e7e:	bf08      	it	eq
 8009e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e84:	4293      	cmp	r3, r2
 8009e86:	bfc4      	itt	gt
 8009e88:	1a9b      	subgt	r3, r3, r2
 8009e8a:	18ed      	addgt	r5, r5, r3
 8009e8c:	341a      	adds	r4, #26
 8009e8e:	42b5      	cmp	r5, r6
 8009e90:	d11a      	bne.n	8009ec8 <_printf_common+0xcc>
 8009e92:	2000      	movs	r0, #0
 8009e94:	e008      	b.n	8009ea8 <_printf_common+0xac>
 8009e96:	2301      	movs	r3, #1
 8009e98:	4652      	mov	r2, sl
 8009e9a:	4649      	mov	r1, r9
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	47c0      	blx	r8
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d103      	bne.n	8009eac <_printf_common+0xb0>
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eac:	3501      	adds	r5, #1
 8009eae:	e7c4      	b.n	8009e3a <_printf_common+0x3e>
 8009eb0:	2030      	movs	r0, #48	; 0x30
 8009eb2:	18e1      	adds	r1, r4, r3
 8009eb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ebe:	4422      	add	r2, r4
 8009ec0:	3302      	adds	r3, #2
 8009ec2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ec6:	e7c5      	b.n	8009e54 <_printf_common+0x58>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	4622      	mov	r2, r4
 8009ecc:	4649      	mov	r1, r9
 8009ece:	4638      	mov	r0, r7
 8009ed0:	47c0      	blx	r8
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	d0e6      	beq.n	8009ea4 <_printf_common+0xa8>
 8009ed6:	3601      	adds	r6, #1
 8009ed8:	e7d9      	b.n	8009e8e <_printf_common+0x92>
	...

08009edc <_printf_i>:
 8009edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	7e27      	ldrb	r7, [r4, #24]
 8009ee4:	4691      	mov	r9, r2
 8009ee6:	2f78      	cmp	r7, #120	; 0x78
 8009ee8:	4680      	mov	r8, r0
 8009eea:	469a      	mov	sl, r3
 8009eec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef2:	d807      	bhi.n	8009f04 <_printf_i+0x28>
 8009ef4:	2f62      	cmp	r7, #98	; 0x62
 8009ef6:	d80a      	bhi.n	8009f0e <_printf_i+0x32>
 8009ef8:	2f00      	cmp	r7, #0
 8009efa:	f000 80d9 	beq.w	800a0b0 <_printf_i+0x1d4>
 8009efe:	2f58      	cmp	r7, #88	; 0x58
 8009f00:	f000 80a4 	beq.w	800a04c <_printf_i+0x170>
 8009f04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f0c:	e03a      	b.n	8009f84 <_printf_i+0xa8>
 8009f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f12:	2b15      	cmp	r3, #21
 8009f14:	d8f6      	bhi.n	8009f04 <_printf_i+0x28>
 8009f16:	a001      	add	r0, pc, #4	; (adr r0, 8009f1c <_printf_i+0x40>)
 8009f18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f1c:	08009f75 	.word	0x08009f75
 8009f20:	08009f89 	.word	0x08009f89
 8009f24:	08009f05 	.word	0x08009f05
 8009f28:	08009f05 	.word	0x08009f05
 8009f2c:	08009f05 	.word	0x08009f05
 8009f30:	08009f05 	.word	0x08009f05
 8009f34:	08009f89 	.word	0x08009f89
 8009f38:	08009f05 	.word	0x08009f05
 8009f3c:	08009f05 	.word	0x08009f05
 8009f40:	08009f05 	.word	0x08009f05
 8009f44:	08009f05 	.word	0x08009f05
 8009f48:	0800a097 	.word	0x0800a097
 8009f4c:	08009fb9 	.word	0x08009fb9
 8009f50:	0800a079 	.word	0x0800a079
 8009f54:	08009f05 	.word	0x08009f05
 8009f58:	08009f05 	.word	0x08009f05
 8009f5c:	0800a0b9 	.word	0x0800a0b9
 8009f60:	08009f05 	.word	0x08009f05
 8009f64:	08009fb9 	.word	0x08009fb9
 8009f68:	08009f05 	.word	0x08009f05
 8009f6c:	08009f05 	.word	0x08009f05
 8009f70:	0800a081 	.word	0x0800a081
 8009f74:	680b      	ldr	r3, [r1, #0]
 8009f76:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f7a:	1d1a      	adds	r2, r3, #4
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	600a      	str	r2, [r1, #0]
 8009f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f84:	2301      	movs	r3, #1
 8009f86:	e0a4      	b.n	800a0d2 <_printf_i+0x1f6>
 8009f88:	6825      	ldr	r5, [r4, #0]
 8009f8a:	6808      	ldr	r0, [r1, #0]
 8009f8c:	062e      	lsls	r6, r5, #24
 8009f8e:	f100 0304 	add.w	r3, r0, #4
 8009f92:	d50a      	bpl.n	8009faa <_printf_i+0xce>
 8009f94:	6805      	ldr	r5, [r0, #0]
 8009f96:	600b      	str	r3, [r1, #0]
 8009f98:	2d00      	cmp	r5, #0
 8009f9a:	da03      	bge.n	8009fa4 <_printf_i+0xc8>
 8009f9c:	232d      	movs	r3, #45	; 0x2d
 8009f9e:	426d      	negs	r5, r5
 8009fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fa4:	230a      	movs	r3, #10
 8009fa6:	485e      	ldr	r0, [pc, #376]	; (800a120 <_printf_i+0x244>)
 8009fa8:	e019      	b.n	8009fde <_printf_i+0x102>
 8009faa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fae:	6805      	ldr	r5, [r0, #0]
 8009fb0:	600b      	str	r3, [r1, #0]
 8009fb2:	bf18      	it	ne
 8009fb4:	b22d      	sxthne	r5, r5
 8009fb6:	e7ef      	b.n	8009f98 <_printf_i+0xbc>
 8009fb8:	680b      	ldr	r3, [r1, #0]
 8009fba:	6825      	ldr	r5, [r4, #0]
 8009fbc:	1d18      	adds	r0, r3, #4
 8009fbe:	6008      	str	r0, [r1, #0]
 8009fc0:	0628      	lsls	r0, r5, #24
 8009fc2:	d501      	bpl.n	8009fc8 <_printf_i+0xec>
 8009fc4:	681d      	ldr	r5, [r3, #0]
 8009fc6:	e002      	b.n	8009fce <_printf_i+0xf2>
 8009fc8:	0669      	lsls	r1, r5, #25
 8009fca:	d5fb      	bpl.n	8009fc4 <_printf_i+0xe8>
 8009fcc:	881d      	ldrh	r5, [r3, #0]
 8009fce:	2f6f      	cmp	r7, #111	; 0x6f
 8009fd0:	bf0c      	ite	eq
 8009fd2:	2308      	moveq	r3, #8
 8009fd4:	230a      	movne	r3, #10
 8009fd6:	4852      	ldr	r0, [pc, #328]	; (800a120 <_printf_i+0x244>)
 8009fd8:	2100      	movs	r1, #0
 8009fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fde:	6866      	ldr	r6, [r4, #4]
 8009fe0:	2e00      	cmp	r6, #0
 8009fe2:	bfa8      	it	ge
 8009fe4:	6821      	ldrge	r1, [r4, #0]
 8009fe6:	60a6      	str	r6, [r4, #8]
 8009fe8:	bfa4      	itt	ge
 8009fea:	f021 0104 	bicge.w	r1, r1, #4
 8009fee:	6021      	strge	r1, [r4, #0]
 8009ff0:	b90d      	cbnz	r5, 8009ff6 <_printf_i+0x11a>
 8009ff2:	2e00      	cmp	r6, #0
 8009ff4:	d04d      	beq.n	800a092 <_printf_i+0x1b6>
 8009ff6:	4616      	mov	r6, r2
 8009ff8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ffc:	fb03 5711 	mls	r7, r3, r1, r5
 800a000:	5dc7      	ldrb	r7, [r0, r7]
 800a002:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a006:	462f      	mov	r7, r5
 800a008:	42bb      	cmp	r3, r7
 800a00a:	460d      	mov	r5, r1
 800a00c:	d9f4      	bls.n	8009ff8 <_printf_i+0x11c>
 800a00e:	2b08      	cmp	r3, #8
 800a010:	d10b      	bne.n	800a02a <_printf_i+0x14e>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	07df      	lsls	r7, r3, #31
 800a016:	d508      	bpl.n	800a02a <_printf_i+0x14e>
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	6861      	ldr	r1, [r4, #4]
 800a01c:	4299      	cmp	r1, r3
 800a01e:	bfde      	ittt	le
 800a020:	2330      	movle	r3, #48	; 0x30
 800a022:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a026:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a02a:	1b92      	subs	r2, r2, r6
 800a02c:	6122      	str	r2, [r4, #16]
 800a02e:	464b      	mov	r3, r9
 800a030:	4621      	mov	r1, r4
 800a032:	4640      	mov	r0, r8
 800a034:	f8cd a000 	str.w	sl, [sp]
 800a038:	aa03      	add	r2, sp, #12
 800a03a:	f7ff fedf 	bl	8009dfc <_printf_common>
 800a03e:	3001      	adds	r0, #1
 800a040:	d14c      	bne.n	800a0dc <_printf_i+0x200>
 800a042:	f04f 30ff 	mov.w	r0, #4294967295
 800a046:	b004      	add	sp, #16
 800a048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04c:	4834      	ldr	r0, [pc, #208]	; (800a120 <_printf_i+0x244>)
 800a04e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a052:	680e      	ldr	r6, [r1, #0]
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	f856 5b04 	ldr.w	r5, [r6], #4
 800a05a:	061f      	lsls	r7, r3, #24
 800a05c:	600e      	str	r6, [r1, #0]
 800a05e:	d514      	bpl.n	800a08a <_printf_i+0x1ae>
 800a060:	07d9      	lsls	r1, r3, #31
 800a062:	bf44      	itt	mi
 800a064:	f043 0320 	orrmi.w	r3, r3, #32
 800a068:	6023      	strmi	r3, [r4, #0]
 800a06a:	b91d      	cbnz	r5, 800a074 <_printf_i+0x198>
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	f023 0320 	bic.w	r3, r3, #32
 800a072:	6023      	str	r3, [r4, #0]
 800a074:	2310      	movs	r3, #16
 800a076:	e7af      	b.n	8009fd8 <_printf_i+0xfc>
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	f043 0320 	orr.w	r3, r3, #32
 800a07e:	6023      	str	r3, [r4, #0]
 800a080:	2378      	movs	r3, #120	; 0x78
 800a082:	4828      	ldr	r0, [pc, #160]	; (800a124 <_printf_i+0x248>)
 800a084:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a088:	e7e3      	b.n	800a052 <_printf_i+0x176>
 800a08a:	065e      	lsls	r6, r3, #25
 800a08c:	bf48      	it	mi
 800a08e:	b2ad      	uxthmi	r5, r5
 800a090:	e7e6      	b.n	800a060 <_printf_i+0x184>
 800a092:	4616      	mov	r6, r2
 800a094:	e7bb      	b.n	800a00e <_printf_i+0x132>
 800a096:	680b      	ldr	r3, [r1, #0]
 800a098:	6826      	ldr	r6, [r4, #0]
 800a09a:	1d1d      	adds	r5, r3, #4
 800a09c:	6960      	ldr	r0, [r4, #20]
 800a09e:	600d      	str	r5, [r1, #0]
 800a0a0:	0635      	lsls	r5, r6, #24
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	d501      	bpl.n	800a0aa <_printf_i+0x1ce>
 800a0a6:	6018      	str	r0, [r3, #0]
 800a0a8:	e002      	b.n	800a0b0 <_printf_i+0x1d4>
 800a0aa:	0671      	lsls	r1, r6, #25
 800a0ac:	d5fb      	bpl.n	800a0a6 <_printf_i+0x1ca>
 800a0ae:	8018      	strh	r0, [r3, #0]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	4616      	mov	r6, r2
 800a0b4:	6123      	str	r3, [r4, #16]
 800a0b6:	e7ba      	b.n	800a02e <_printf_i+0x152>
 800a0b8:	680b      	ldr	r3, [r1, #0]
 800a0ba:	1d1a      	adds	r2, r3, #4
 800a0bc:	600a      	str	r2, [r1, #0]
 800a0be:	681e      	ldr	r6, [r3, #0]
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	6862      	ldr	r2, [r4, #4]
 800a0c6:	f000 f8e1 	bl	800a28c <memchr>
 800a0ca:	b108      	cbz	r0, 800a0d0 <_printf_i+0x1f4>
 800a0cc:	1b80      	subs	r0, r0, r6
 800a0ce:	6060      	str	r0, [r4, #4]
 800a0d0:	6863      	ldr	r3, [r4, #4]
 800a0d2:	6123      	str	r3, [r4, #16]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0da:	e7a8      	b.n	800a02e <_printf_i+0x152>
 800a0dc:	4632      	mov	r2, r6
 800a0de:	4649      	mov	r1, r9
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	47d0      	blx	sl
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d0ab      	beq.n	800a042 <_printf_i+0x166>
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	079b      	lsls	r3, r3, #30
 800a0ee:	d413      	bmi.n	800a118 <_printf_i+0x23c>
 800a0f0:	68e0      	ldr	r0, [r4, #12]
 800a0f2:	9b03      	ldr	r3, [sp, #12]
 800a0f4:	4298      	cmp	r0, r3
 800a0f6:	bfb8      	it	lt
 800a0f8:	4618      	movlt	r0, r3
 800a0fa:	e7a4      	b.n	800a046 <_printf_i+0x16a>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	4632      	mov	r2, r6
 800a100:	4649      	mov	r1, r9
 800a102:	4640      	mov	r0, r8
 800a104:	47d0      	blx	sl
 800a106:	3001      	adds	r0, #1
 800a108:	d09b      	beq.n	800a042 <_printf_i+0x166>
 800a10a:	3501      	adds	r5, #1
 800a10c:	68e3      	ldr	r3, [r4, #12]
 800a10e:	9903      	ldr	r1, [sp, #12]
 800a110:	1a5b      	subs	r3, r3, r1
 800a112:	42ab      	cmp	r3, r5
 800a114:	dcf2      	bgt.n	800a0fc <_printf_i+0x220>
 800a116:	e7eb      	b.n	800a0f0 <_printf_i+0x214>
 800a118:	2500      	movs	r5, #0
 800a11a:	f104 0619 	add.w	r6, r4, #25
 800a11e:	e7f5      	b.n	800a10c <_printf_i+0x230>
 800a120:	0800a885 	.word	0x0800a885
 800a124:	0800a896 	.word	0x0800a896

0800a128 <_sbrk_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	2300      	movs	r3, #0
 800a12c:	4d05      	ldr	r5, [pc, #20]	; (800a144 <_sbrk_r+0x1c>)
 800a12e:	4604      	mov	r4, r0
 800a130:	4608      	mov	r0, r1
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	f7f7 f834 	bl	80011a0 <_sbrk>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_sbrk_r+0x1a>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_sbrk_r+0x1a>
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	200015dc 	.word	0x200015dc

0800a148 <__sread>:
 800a148:	b510      	push	{r4, lr}
 800a14a:	460c      	mov	r4, r1
 800a14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a150:	f000 f904 	bl	800a35c <_read_r>
 800a154:	2800      	cmp	r0, #0
 800a156:	bfab      	itete	ge
 800a158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a15a:	89a3      	ldrhlt	r3, [r4, #12]
 800a15c:	181b      	addge	r3, r3, r0
 800a15e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a162:	bfac      	ite	ge
 800a164:	6563      	strge	r3, [r4, #84]	; 0x54
 800a166:	81a3      	strhlt	r3, [r4, #12]
 800a168:	bd10      	pop	{r4, pc}

0800a16a <__swrite>:
 800a16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a16e:	461f      	mov	r7, r3
 800a170:	898b      	ldrh	r3, [r1, #12]
 800a172:	4605      	mov	r5, r0
 800a174:	05db      	lsls	r3, r3, #23
 800a176:	460c      	mov	r4, r1
 800a178:	4616      	mov	r6, r2
 800a17a:	d505      	bpl.n	800a188 <__swrite+0x1e>
 800a17c:	2302      	movs	r3, #2
 800a17e:	2200      	movs	r2, #0
 800a180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a184:	f000 f870 	bl	800a268 <_lseek_r>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	4632      	mov	r2, r6
 800a18c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a190:	81a3      	strh	r3, [r4, #12]
 800a192:	4628      	mov	r0, r5
 800a194:	463b      	mov	r3, r7
 800a196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a19e:	f000 b817 	b.w	800a1d0 <_write_r>

0800a1a2 <__sseek>:
 800a1a2:	b510      	push	{r4, lr}
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1aa:	f000 f85d 	bl	800a268 <_lseek_r>
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	bf15      	itete	ne
 800a1b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1be:	81a3      	strheq	r3, [r4, #12]
 800a1c0:	bf18      	it	ne
 800a1c2:	81a3      	strhne	r3, [r4, #12]
 800a1c4:	bd10      	pop	{r4, pc}

0800a1c6 <__sclose>:
 800a1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ca:	f000 b81b 	b.w	800a204 <_close_r>
	...

0800a1d0 <_write_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	4608      	mov	r0, r1
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	2200      	movs	r2, #0
 800a1da:	4d05      	ldr	r5, [pc, #20]	; (800a1f0 <_write_r+0x20>)
 800a1dc:	602a      	str	r2, [r5, #0]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	f7f5 ffc6 	bl	8000170 <_write>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d102      	bne.n	800a1ee <_write_r+0x1e>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	b103      	cbz	r3, 800a1ee <_write_r+0x1e>
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	200015dc 	.word	0x200015dc

0800a1f4 <abort>:
 800a1f4:	2006      	movs	r0, #6
 800a1f6:	b508      	push	{r3, lr}
 800a1f8:	f000 f8ea 	bl	800a3d0 <raise>
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	f7f6 ff78 	bl	80010f2 <_exit>
	...

0800a204 <_close_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	2300      	movs	r3, #0
 800a208:	4d05      	ldr	r5, [pc, #20]	; (800a220 <_close_r+0x1c>)
 800a20a:	4604      	mov	r4, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	602b      	str	r3, [r5, #0]
 800a210:	f7f6 ff96 	bl	8001140 <_close>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_close_r+0x1a>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_close_r+0x1a>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	200015dc 	.word	0x200015dc

0800a224 <_fstat_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	2300      	movs	r3, #0
 800a228:	4d06      	ldr	r5, [pc, #24]	; (800a244 <_fstat_r+0x20>)
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	f7f6 ff90 	bl	8001156 <_fstat>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d102      	bne.n	800a240 <_fstat_r+0x1c>
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	b103      	cbz	r3, 800a240 <_fstat_r+0x1c>
 800a23e:	6023      	str	r3, [r4, #0]
 800a240:	bd38      	pop	{r3, r4, r5, pc}
 800a242:	bf00      	nop
 800a244:	200015dc 	.word	0x200015dc

0800a248 <_isatty_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	2300      	movs	r3, #0
 800a24c:	4d05      	ldr	r5, [pc, #20]	; (800a264 <_isatty_r+0x1c>)
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	f7f6 ff8e 	bl	8001174 <_isatty>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_isatty_r+0x1a>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_isatty_r+0x1a>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	200015dc 	.word	0x200015dc

0800a268 <_lseek_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4604      	mov	r4, r0
 800a26c:	4608      	mov	r0, r1
 800a26e:	4611      	mov	r1, r2
 800a270:	2200      	movs	r2, #0
 800a272:	4d05      	ldr	r5, [pc, #20]	; (800a288 <_lseek_r+0x20>)
 800a274:	602a      	str	r2, [r5, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	f7f6 ff86 	bl	8001188 <_lseek>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_lseek_r+0x1e>
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	b103      	cbz	r3, 800a286 <_lseek_r+0x1e>
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	200015dc 	.word	0x200015dc

0800a28c <memchr>:
 800a28c:	4603      	mov	r3, r0
 800a28e:	b510      	push	{r4, lr}
 800a290:	b2c9      	uxtb	r1, r1
 800a292:	4402      	add	r2, r0
 800a294:	4293      	cmp	r3, r2
 800a296:	4618      	mov	r0, r3
 800a298:	d101      	bne.n	800a29e <memchr+0x12>
 800a29a:	2000      	movs	r0, #0
 800a29c:	e003      	b.n	800a2a6 <memchr+0x1a>
 800a29e:	7804      	ldrb	r4, [r0, #0]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	428c      	cmp	r4, r1
 800a2a4:	d1f6      	bne.n	800a294 <memchr+0x8>
 800a2a6:	bd10      	pop	{r4, pc}

0800a2a8 <memcpy>:
 800a2a8:	440a      	add	r2, r1
 800a2aa:	4291      	cmp	r1, r2
 800a2ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2b0:	d100      	bne.n	800a2b4 <memcpy+0xc>
 800a2b2:	4770      	bx	lr
 800a2b4:	b510      	push	{r4, lr}
 800a2b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ba:	4291      	cmp	r1, r2
 800a2bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2c0:	d1f9      	bne.n	800a2b6 <memcpy+0xe>
 800a2c2:	bd10      	pop	{r4, pc}

0800a2c4 <memmove>:
 800a2c4:	4288      	cmp	r0, r1
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	eb01 0402 	add.w	r4, r1, r2
 800a2cc:	d902      	bls.n	800a2d4 <memmove+0x10>
 800a2ce:	4284      	cmp	r4, r0
 800a2d0:	4623      	mov	r3, r4
 800a2d2:	d807      	bhi.n	800a2e4 <memmove+0x20>
 800a2d4:	1e43      	subs	r3, r0, #1
 800a2d6:	42a1      	cmp	r1, r4
 800a2d8:	d008      	beq.n	800a2ec <memmove+0x28>
 800a2da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2e2:	e7f8      	b.n	800a2d6 <memmove+0x12>
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	4402      	add	r2, r0
 800a2e8:	428a      	cmp	r2, r1
 800a2ea:	d100      	bne.n	800a2ee <memmove+0x2a>
 800a2ec:	bd10      	pop	{r4, pc}
 800a2ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2f6:	e7f7      	b.n	800a2e8 <memmove+0x24>

0800a2f8 <__malloc_lock>:
 800a2f8:	4801      	ldr	r0, [pc, #4]	; (800a300 <__malloc_lock+0x8>)
 800a2fa:	f7ff b9b7 	b.w	800966c <__retarget_lock_acquire_recursive>
 800a2fe:	bf00      	nop
 800a300:	200015d4 	.word	0x200015d4

0800a304 <__malloc_unlock>:
 800a304:	4801      	ldr	r0, [pc, #4]	; (800a30c <__malloc_unlock+0x8>)
 800a306:	f7ff b9b2 	b.w	800966e <__retarget_lock_release_recursive>
 800a30a:	bf00      	nop
 800a30c:	200015d4 	.word	0x200015d4

0800a310 <_realloc_r>:
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	4607      	mov	r7, r0
 800a314:	4614      	mov	r4, r2
 800a316:	460e      	mov	r6, r1
 800a318:	b921      	cbnz	r1, 800a324 <_realloc_r+0x14>
 800a31a:	4611      	mov	r1, r2
 800a31c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a320:	f7ff ba5e 	b.w	80097e0 <_malloc_r>
 800a324:	b922      	cbnz	r2, 800a330 <_realloc_r+0x20>
 800a326:	f7ff fa0f 	bl	8009748 <_free_r>
 800a32a:	4625      	mov	r5, r4
 800a32c:	4628      	mov	r0, r5
 800a32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a330:	f000 f86a 	bl	800a408 <_malloc_usable_size_r>
 800a334:	42a0      	cmp	r0, r4
 800a336:	d20f      	bcs.n	800a358 <_realloc_r+0x48>
 800a338:	4621      	mov	r1, r4
 800a33a:	4638      	mov	r0, r7
 800a33c:	f7ff fa50 	bl	80097e0 <_malloc_r>
 800a340:	4605      	mov	r5, r0
 800a342:	2800      	cmp	r0, #0
 800a344:	d0f2      	beq.n	800a32c <_realloc_r+0x1c>
 800a346:	4631      	mov	r1, r6
 800a348:	4622      	mov	r2, r4
 800a34a:	f7ff ffad 	bl	800a2a8 <memcpy>
 800a34e:	4631      	mov	r1, r6
 800a350:	4638      	mov	r0, r7
 800a352:	f7ff f9f9 	bl	8009748 <_free_r>
 800a356:	e7e9      	b.n	800a32c <_realloc_r+0x1c>
 800a358:	4635      	mov	r5, r6
 800a35a:	e7e7      	b.n	800a32c <_realloc_r+0x1c>

0800a35c <_read_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4604      	mov	r4, r0
 800a360:	4608      	mov	r0, r1
 800a362:	4611      	mov	r1, r2
 800a364:	2200      	movs	r2, #0
 800a366:	4d05      	ldr	r5, [pc, #20]	; (800a37c <_read_r+0x20>)
 800a368:	602a      	str	r2, [r5, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	f7f6 fecb 	bl	8001106 <_read>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	d102      	bne.n	800a37a <_read_r+0x1e>
 800a374:	682b      	ldr	r3, [r5, #0]
 800a376:	b103      	cbz	r3, 800a37a <_read_r+0x1e>
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	200015dc 	.word	0x200015dc

0800a380 <_raise_r>:
 800a380:	291f      	cmp	r1, #31
 800a382:	b538      	push	{r3, r4, r5, lr}
 800a384:	4604      	mov	r4, r0
 800a386:	460d      	mov	r5, r1
 800a388:	d904      	bls.n	800a394 <_raise_r+0x14>
 800a38a:	2316      	movs	r3, #22
 800a38c:	6003      	str	r3, [r0, #0]
 800a38e:	f04f 30ff 	mov.w	r0, #4294967295
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a396:	b112      	cbz	r2, 800a39e <_raise_r+0x1e>
 800a398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a39c:	b94b      	cbnz	r3, 800a3b2 <_raise_r+0x32>
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f000 f830 	bl	800a404 <_getpid_r>
 800a3a4:	462a      	mov	r2, r5
 800a3a6:	4601      	mov	r1, r0
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3ae:	f000 b817 	b.w	800a3e0 <_kill_r>
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d00a      	beq.n	800a3cc <_raise_r+0x4c>
 800a3b6:	1c59      	adds	r1, r3, #1
 800a3b8:	d103      	bne.n	800a3c2 <_raise_r+0x42>
 800a3ba:	2316      	movs	r3, #22
 800a3bc:	6003      	str	r3, [r0, #0]
 800a3be:	2001      	movs	r0, #1
 800a3c0:	e7e7      	b.n	800a392 <_raise_r+0x12>
 800a3c2:	2400      	movs	r4, #0
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3ca:	4798      	blx	r3
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	e7e0      	b.n	800a392 <_raise_r+0x12>

0800a3d0 <raise>:
 800a3d0:	4b02      	ldr	r3, [pc, #8]	; (800a3dc <raise+0xc>)
 800a3d2:	4601      	mov	r1, r0
 800a3d4:	6818      	ldr	r0, [r3, #0]
 800a3d6:	f7ff bfd3 	b.w	800a380 <_raise_r>
 800a3da:	bf00      	nop
 800a3dc:	20000198 	.word	0x20000198

0800a3e0 <_kill_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4d06      	ldr	r5, [pc, #24]	; (800a400 <_kill_r+0x20>)
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	602b      	str	r3, [r5, #0]
 800a3ee:	f7f6 fe70 	bl	80010d2 <_kill>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	d102      	bne.n	800a3fc <_kill_r+0x1c>
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	b103      	cbz	r3, 800a3fc <_kill_r+0x1c>
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	bd38      	pop	{r3, r4, r5, pc}
 800a3fe:	bf00      	nop
 800a400:	200015dc 	.word	0x200015dc

0800a404 <_getpid_r>:
 800a404:	f7f6 be5e 	b.w	80010c4 <_getpid>

0800a408 <_malloc_usable_size_r>:
 800a408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a40c:	1f18      	subs	r0, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	bfbc      	itt	lt
 800a412:	580b      	ldrlt	r3, [r1, r0]
 800a414:	18c0      	addlt	r0, r0, r3
 800a416:	4770      	bx	lr

0800a418 <_init>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	bf00      	nop
 800a41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41e:	bc08      	pop	{r3}
 800a420:	469e      	mov	lr, r3
 800a422:	4770      	bx	lr

0800a424 <_fini>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr
