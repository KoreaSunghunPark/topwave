
control_bd_rev02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b28  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006144  08006144  00016144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f8  20000000  08006148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000013e4  200001f8  08006340  000201f8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200015dc  08006340  000215dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021070  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004d77  00000000  00000000  00041291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000ea9a  00000000  00000000  00046008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001018  00000000  00000000  00054aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019b8  00000000  00000000  00055ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001e020  00000000  00000000  00057478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b71e  00000000  00000000  00075498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0009f039  00000000  00000000  00090bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0012fbef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a40  00000000  00000000  0012fc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001f8 	.word	0x200001f8
 8000200:	00000000 	.word	0x00000000
 8000204:	08005cf4 	.word	0x08005cf4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001fc 	.word	0x200001fc
 8000220:	08005cf4 	.word	0x08005cf4

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <HAL_InitTick+0x3c>)
{
 800024c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800024e:	7818      	ldrb	r0, [r3, #0]
 8000250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000254:	fbb3 f3f0 	udiv	r3, r3, r0
 8000258:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <HAL_InitTick+0x40>)
 800025a:	6810      	ldr	r0, [r2, #0]
 800025c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000260:	f000 f89e 	bl	80003a0 <HAL_SYSTICK_Config>
 8000264:	4604      	mov	r4, r0
 8000266:	b958      	cbnz	r0, 8000280 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000268:	2d0f      	cmp	r5, #15
 800026a:	d809      	bhi.n	8000280 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800026c:	4602      	mov	r2, r0
 800026e:	4629      	mov	r1, r5
 8000270:	f04f 30ff 	mov.w	r0, #4294967295
 8000274:	f000 f854 	bl	8000320 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000278:	4620      	mov	r0, r4
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <HAL_InitTick+0x44>)
 800027c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800027e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000280:	2001      	movs	r0, #1
 8000282:	e7fc      	b.n	800027e <HAL_InitTick+0x36>
 8000284:	20000000 	.word	0x20000000
 8000288:	20000130 	.word	0x20000130
 800028c:	20000004 	.word	0x20000004

08000290 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000290:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <HAL_Init+0x20>)
{
 8000292:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000294:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000296:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000298:	f043 0310 	orr.w	r3, r3, #16
 800029c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800029e:	f000 f82d 	bl	80002fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f7ff ffd0 	bl	8000248 <HAL_InitTick>
  HAL_MspInit();
 80002a8:	f003 fdb4 	bl	8003e14 <HAL_MspInit>
}
 80002ac:	2000      	movs	r0, #0
 80002ae:	bd08      	pop	{r3, pc}
 80002b0:	40022000 	.word	0x40022000

080002b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002b4:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <HAL_IncTick+0x10>)
 80002b6:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <HAL_IncTick+0x14>)
 80002b8:	6811      	ldr	r1, [r2, #0]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	440b      	add	r3, r1
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000534 	.word	0x20000534
 80002c8:	20000000 	.word	0x20000000

080002cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002cc:	4b01      	ldr	r3, [pc, #4]	; (80002d4 <HAL_GetTick+0x8>)
 80002ce:	6818      	ldr	r0, [r3, #0]
}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000534 	.word	0x20000534

080002d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002d8:	b538      	push	{r3, r4, r5, lr}
 80002da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002dc:	f7ff fff6 	bl	80002cc <HAL_GetTick>
 80002e0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002e2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002e4:	bf1e      	ittt	ne
 80002e6:	4b04      	ldrne	r3, [pc, #16]	; (80002f8 <HAL_Delay+0x20>)
 80002e8:	781b      	ldrbne	r3, [r3, #0]
 80002ea:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002ec:	f7ff ffee 	bl	80002cc <HAL_GetTick>
 80002f0:	1b43      	subs	r3, r0, r5
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d3fa      	bcc.n	80002ec <HAL_Delay+0x14>
  {
  }
}
 80002f6:	bd38      	pop	{r3, r4, r5, pc}
 80002f8:	20000000 	.word	0x20000000

080002fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002fc:	4907      	ldr	r1, [pc, #28]	; (800031c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80002fe:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000300:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000302:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000306:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800030a:	0412      	lsls	r2, r2, #16
 800030c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800030e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000318:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000322:	b530      	push	{r4, r5, lr}
 8000324:	68dc      	ldr	r4, [r3, #12]
 8000326:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800032a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000330:	2b04      	cmp	r3, #4
 8000332:	bf28      	it	cs
 8000334:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000336:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000338:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033c:	bf98      	it	ls
 800033e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000344:	bf88      	it	hi
 8000346:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000348:	ea21 0303 	bic.w	r3, r1, r3
 800034c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800034e:	fa05 f404 	lsl.w	r4, r5, r4
 8000352:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000356:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035c:	bfac      	ite	ge
 800035e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000362:	4a07      	ldrlt	r2, [pc, #28]	; (8000380 <HAL_NVIC_SetPriority+0x60>)
 8000364:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000368:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036a:	bfab      	itete	ge
 800036c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000370:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000374:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000378:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	e000ed00 	.word	0xe000ed00
 8000380:	e000ed14 	.word	0xe000ed14

08000384 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000384:	2800      	cmp	r0, #0
 8000386:	db08      	blt.n	800039a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000388:	2301      	movs	r3, #1
 800038a:	0942      	lsrs	r2, r0, #5
 800038c:	f000 001f 	and.w	r0, r0, #31
 8000390:	fa03 f000 	lsl.w	r0, r3, r0
 8000394:	4b01      	ldr	r3, [pc, #4]	; (800039c <HAL_NVIC_EnableIRQ+0x18>)
 8000396:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800039a:	4770      	bx	lr
 800039c:	e000e100 	.word	0xe000e100

080003a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a0:	3801      	subs	r0, #1
 80003a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003a6:	d20a      	bcs.n	80003be <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	4a06      	ldr	r2, [pc, #24]	; (80003c8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ae:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003be:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000e010 	.word	0xe000e010
 80003c8:	e000ed00 	.word	0xe000ed00

080003cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80003cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80003ce:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	d003      	beq.n	80003de <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80003d6:	2304      	movs	r3, #4
 80003d8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80003da:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80003dc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80003de:	6803      	ldr	r3, [r0, #0]
 80003e0:	4943      	ldr	r1, [pc, #268]	; (80004f0 <HAL_DMA_Abort_IT+0x124>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	f022 020e 	bic.w	r2, r2, #14
 80003e8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	f022 0201 	bic.w	r2, r2, #1
 80003f0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80003f2:	4a40      	ldr	r2, [pc, #256]	; (80004f4 <HAL_DMA_Abort_IT+0x128>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d941      	bls.n	800047c <HAL_DMA_Abort_IT+0xb0>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d038      	beq.n	800046e <HAL_DMA_Abort_IT+0xa2>
 80003fc:	3114      	adds	r1, #20
 80003fe:	428b      	cmp	r3, r1
 8000400:	d037      	beq.n	8000472 <HAL_DMA_Abort_IT+0xa6>
 8000402:	3114      	adds	r1, #20
 8000404:	428b      	cmp	r3, r1
 8000406:	d036      	beq.n	8000476 <HAL_DMA_Abort_IT+0xaa>
 8000408:	3114      	adds	r1, #20
 800040a:	428b      	cmp	r3, r1
 800040c:	d023      	beq.n	8000456 <HAL_DMA_Abort_IT+0x8a>
 800040e:	3114      	adds	r1, #20
 8000410:	428b      	cmp	r3, r1
 8000412:	d023      	beq.n	800045c <HAL_DMA_Abort_IT+0x90>
 8000414:	3114      	adds	r1, #20
 8000416:	428b      	cmp	r3, r1
 8000418:	d023      	beq.n	8000462 <HAL_DMA_Abort_IT+0x96>
 800041a:	4293      	cmp	r3, r2
 800041c:	d024      	beq.n	8000468 <HAL_DMA_Abort_IT+0x9c>
 800041e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000422:	4293      	cmp	r3, r2
 8000424:	d023      	beq.n	800046e <HAL_DMA_Abort_IT+0xa2>
 8000426:	3214      	adds	r2, #20
 8000428:	4293      	cmp	r3, r2
 800042a:	d022      	beq.n	8000472 <HAL_DMA_Abort_IT+0xa6>
 800042c:	3214      	adds	r2, #20
 800042e:	4293      	cmp	r3, r2
 8000430:	d021      	beq.n	8000476 <HAL_DMA_Abort_IT+0xaa>
 8000432:	3214      	adds	r2, #20
 8000434:	4293      	cmp	r3, r2
 8000436:	bf14      	ite	ne
 8000438:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 800043c:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8000440:	4a2d      	ldr	r2, [pc, #180]	; (80004f8 <HAL_DMA_Abort_IT+0x12c>)
 8000442:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000448:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800044a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800044c:	2b00      	cmp	r3, #0
 800044e:	d04d      	beq.n	80004ec <HAL_DMA_Abort_IT+0x120>
      hdma->XferAbortCallback(hdma);
 8000450:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000452:	2000      	movs	r0, #0
 8000454:	e7c2      	b.n	80003dc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800045a:	e7f1      	b.n	8000440 <HAL_DMA_Abort_IT+0x74>
 800045c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000460:	e7ee      	b.n	8000440 <HAL_DMA_Abort_IT+0x74>
 8000462:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000466:	e7eb      	b.n	8000440 <HAL_DMA_Abort_IT+0x74>
 8000468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800046c:	e7e8      	b.n	8000440 <HAL_DMA_Abort_IT+0x74>
 800046e:	2301      	movs	r3, #1
 8000470:	e7e6      	b.n	8000440 <HAL_DMA_Abort_IT+0x74>
 8000472:	2310      	movs	r3, #16
 8000474:	e7e4      	b.n	8000440 <HAL_DMA_Abort_IT+0x74>
 8000476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800047a:	e7e1      	b.n	8000440 <HAL_DMA_Abort_IT+0x74>
 800047c:	428b      	cmp	r3, r1
 800047e:	d02e      	beq.n	80004de <HAL_DMA_Abort_IT+0x112>
 8000480:	491e      	ldr	r1, [pc, #120]	; (80004fc <HAL_DMA_Abort_IT+0x130>)
 8000482:	428b      	cmp	r3, r1
 8000484:	d02d      	beq.n	80004e2 <HAL_DMA_Abort_IT+0x116>
 8000486:	3114      	adds	r1, #20
 8000488:	428b      	cmp	r3, r1
 800048a:	d02c      	beq.n	80004e6 <HAL_DMA_Abort_IT+0x11a>
 800048c:	3114      	adds	r1, #20
 800048e:	428b      	cmp	r3, r1
 8000490:	d019      	beq.n	80004c6 <HAL_DMA_Abort_IT+0xfa>
 8000492:	3114      	adds	r1, #20
 8000494:	428b      	cmp	r3, r1
 8000496:	d019      	beq.n	80004cc <HAL_DMA_Abort_IT+0x100>
 8000498:	3114      	adds	r1, #20
 800049a:	428b      	cmp	r3, r1
 800049c:	d019      	beq.n	80004d2 <HAL_DMA_Abort_IT+0x106>
 800049e:	4293      	cmp	r3, r2
 80004a0:	d01a      	beq.n	80004d8 <HAL_DMA_Abort_IT+0x10c>
 80004a2:	4a17      	ldr	r2, [pc, #92]	; (8000500 <HAL_DMA_Abort_IT+0x134>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d01a      	beq.n	80004de <HAL_DMA_Abort_IT+0x112>
 80004a8:	3214      	adds	r2, #20
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d019      	beq.n	80004e2 <HAL_DMA_Abort_IT+0x116>
 80004ae:	3214      	adds	r2, #20
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d018      	beq.n	80004e6 <HAL_DMA_Abort_IT+0x11a>
 80004b4:	3214      	adds	r2, #20
 80004b6:	4293      	cmp	r3, r2
 80004b8:	bf14      	ite	ne
 80004ba:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80004be:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80004c2:	4a10      	ldr	r2, [pc, #64]	; (8000504 <HAL_DMA_Abort_IT+0x138>)
 80004c4:	e7bd      	b.n	8000442 <HAL_DMA_Abort_IT+0x76>
 80004c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ca:	e7fa      	b.n	80004c2 <HAL_DMA_Abort_IT+0xf6>
 80004cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d0:	e7f7      	b.n	80004c2 <HAL_DMA_Abort_IT+0xf6>
 80004d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004d6:	e7f4      	b.n	80004c2 <HAL_DMA_Abort_IT+0xf6>
 80004d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004dc:	e7f1      	b.n	80004c2 <HAL_DMA_Abort_IT+0xf6>
 80004de:	2301      	movs	r3, #1
 80004e0:	e7ef      	b.n	80004c2 <HAL_DMA_Abort_IT+0xf6>
 80004e2:	2310      	movs	r3, #16
 80004e4:	e7ed      	b.n	80004c2 <HAL_DMA_Abort_IT+0xf6>
 80004e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ea:	e7ea      	b.n	80004c2 <HAL_DMA_Abort_IT+0xf6>
  HAL_StatusTypeDef status = HAL_OK;
 80004ec:	4618      	mov	r0, r3
 80004ee:	e775      	b.n	80003dc <HAL_DMA_Abort_IT+0x10>
 80004f0:	40020008 	.word	0x40020008
 80004f4:	40020080 	.word	0x40020080
 80004f8:	40020400 	.word	0x40020400
 80004fc:	4002001c 	.word	0x4002001c
 8000500:	40020408 	.word	0x40020408
 8000504:	40020000 	.word	0x40020000

08000508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800050c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800050e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000510:	4f6b      	ldr	r7, [pc, #428]	; (80006c0 <HAL_GPIO_Init+0x1b8>)
 8000512:	4b6c      	ldr	r3, [pc, #432]	; (80006c4 <HAL_GPIO_Init+0x1bc>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000514:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 80006cc <HAL_GPIO_Init+0x1c4>
      switch (GPIO_Init->Mode)
 8000518:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 80006d0 <HAL_GPIO_Init+0x1c8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800051c:	680c      	ldr	r4, [r1, #0]
 800051e:	fa34 f506 	lsrs.w	r5, r4, r6
 8000522:	d102      	bne.n	800052a <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000524:	b003      	add	sp, #12
 8000526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800052a:	f04f 0801 	mov.w	r8, #1
 800052e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000532:	ea04 0508 	and.w	r5, r4, r8
    if (iocurrent == ioposition)
 8000536:	ea38 0404 	bics.w	r4, r8, r4
 800053a:	f040 8082 	bne.w	8000642 <HAL_GPIO_Init+0x13a>
      switch (GPIO_Init->Mode)
 800053e:	684c      	ldr	r4, [r1, #4]
 8000540:	2c03      	cmp	r4, #3
 8000542:	d807      	bhi.n	8000554 <HAL_GPIO_Init+0x4c>
 8000544:	3c01      	subs	r4, #1
 8000546:	2c02      	cmp	r4, #2
 8000548:	f200 808d 	bhi.w	8000666 <HAL_GPIO_Init+0x15e>
 800054c:	e8df f004 	tbb	[pc, r4]
 8000550:	a39e      	.short	0xa39e
 8000552:	a9          	.byte	0xa9
 8000553:	00          	.byte	0x00
 8000554:	2c12      	cmp	r4, #18
 8000556:	f000 80a1 	beq.w	800069c <HAL_GPIO_Init+0x194>
 800055a:	d874      	bhi.n	8000646 <HAL_GPIO_Init+0x13e>
 800055c:	2c11      	cmp	r4, #17
 800055e:	f000 8097 	beq.w	8000690 <HAL_GPIO_Init+0x188>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000562:	2dff      	cmp	r5, #255	; 0xff
 8000564:	bf98      	it	ls
 8000566:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000568:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800056c:	bf88      	it	hi
 800056e:	f100 0a04 	addhi.w	sl, r0, #4
 8000572:	ea4f 0486 	mov.w	r4, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800057a:	bf88      	it	hi
 800057c:	3c20      	subhi	r4, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800057e:	fa09 fb04 	lsl.w	fp, r9, r4
 8000582:	ea28 080b 	bic.w	r8, r8, fp
 8000586:	fa02 f404 	lsl.w	r4, r2, r4
 800058a:	ea48 0404 	orr.w	r4, r8, r4
 800058e:	f8ca 4000 	str.w	r4, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000592:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000596:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800059a:	d052      	beq.n	8000642 <HAL_GPIO_Init+0x13a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800059c:	69bc      	ldr	r4, [r7, #24]
 800059e:	f026 0803 	bic.w	r8, r6, #3
 80005a2:	f044 0401 	orr.w	r4, r4, #1
 80005a6:	61bc      	str	r4, [r7, #24]
 80005a8:	69bc      	ldr	r4, [r7, #24]
 80005aa:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80005ae:	f004 0401 	and.w	r4, r4, #1
 80005b2:	9401      	str	r4, [sp, #4]
 80005b4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005b8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005bc:	9c01      	ldr	r4, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005be:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80005c2:	f8d8 4008 	ldr.w	r4, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c6:	fa09 f90b 	lsl.w	r9, r9, fp
 80005ca:	ea24 0909 	bic.w	r9, r4, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005ce:	4c3e      	ldr	r4, [pc, #248]	; (80006c8 <HAL_GPIO_Init+0x1c0>)
 80005d0:	42a0      	cmp	r0, r4
 80005d2:	d06a      	beq.n	80006aa <HAL_GPIO_Init+0x1a2>
 80005d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005d8:	42a0      	cmp	r0, r4
 80005da:	d068      	beq.n	80006ae <HAL_GPIO_Init+0x1a6>
 80005dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005e0:	42a0      	cmp	r0, r4
 80005e2:	d066      	beq.n	80006b2 <HAL_GPIO_Init+0x1aa>
 80005e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005e8:	42a0      	cmp	r0, r4
 80005ea:	d064      	beq.n	80006b6 <HAL_GPIO_Init+0x1ae>
 80005ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005f0:	42a0      	cmp	r0, r4
 80005f2:	d062      	beq.n	80006ba <HAL_GPIO_Init+0x1b2>
 80005f4:	4560      	cmp	r0, ip
 80005f6:	bf0c      	ite	eq
 80005f8:	2405      	moveq	r4, #5
 80005fa:	2406      	movne	r4, #6
 80005fc:	fa04 f40b 	lsl.w	r4, r4, fp
 8000600:	ea44 0409 	orr.w	r4, r4, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000604:	f8c8 4008 	str.w	r4, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000608:	681c      	ldr	r4, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800060a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800060e:	bf14      	ite	ne
 8000610:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000612:	43ac      	biceq	r4, r5
 8000614:	601c      	str	r4, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000616:	685c      	ldr	r4, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000618:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800061c:	bf14      	ite	ne
 800061e:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000620:	43ac      	biceq	r4, r5
 8000622:	605c      	str	r4, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000624:	689c      	ldr	r4, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000626:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800062a:	bf14      	ite	ne
 800062c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800062e:	43ac      	biceq	r4, r5
 8000630:	609c      	str	r4, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000632:	68dc      	ldr	r4, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000634:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000638:	bf14      	ite	ne
 800063a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800063c:	ea24 0505 	biceq.w	r5, r4, r5
 8000640:	60dd      	str	r5, [r3, #12]
	position++;
 8000642:	3601      	adds	r6, #1
 8000644:	e76a      	b.n	800051c <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000646:	4574      	cmp	r4, lr
 8000648:	d00d      	beq.n	8000666 <HAL_GPIO_Init+0x15e>
 800064a:	d818      	bhi.n	800067e <HAL_GPIO_Init+0x176>
 800064c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80006d4 <HAL_GPIO_Init+0x1cc>
 8000650:	454c      	cmp	r4, r9
 8000652:	d008      	beq.n	8000666 <HAL_GPIO_Init+0x15e>
 8000654:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000658:	454c      	cmp	r4, r9
 800065a:	d004      	beq.n	8000666 <HAL_GPIO_Init+0x15e>
 800065c:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000660:	454c      	cmp	r4, r9
 8000662:	f47f af7e 	bne.w	8000562 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000666:	688a      	ldr	r2, [r1, #8]
 8000668:	b1ea      	cbz	r2, 80006a6 <HAL_GPIO_Init+0x19e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800066a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800066c:	bf08      	it	eq
 800066e:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000672:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000676:	bf18      	it	ne
 8000678:	f8c0 8014 	strne.w	r8, [r0, #20]
 800067c:	e771      	b.n	8000562 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 800067e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80006d8 <HAL_GPIO_Init+0x1d0>
 8000682:	454c      	cmp	r4, r9
 8000684:	d0ef      	beq.n	8000666 <HAL_GPIO_Init+0x15e>
 8000686:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800068a:	e7e9      	b.n	8000660 <HAL_GPIO_Init+0x158>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800068c:	68ca      	ldr	r2, [r1, #12]
          break;
 800068e:	e768      	b.n	8000562 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000690:	68ca      	ldr	r2, [r1, #12]
 8000692:	3204      	adds	r2, #4
          break;
 8000694:	e765      	b.n	8000562 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000696:	68ca      	ldr	r2, [r1, #12]
 8000698:	3208      	adds	r2, #8
          break;
 800069a:	e762      	b.n	8000562 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800069c:	68ca      	ldr	r2, [r1, #12]
 800069e:	320c      	adds	r2, #12
          break;
 80006a0:	e75f      	b.n	8000562 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 80006a2:	2200      	movs	r2, #0
 80006a4:	e75d      	b.n	8000562 <HAL_GPIO_Init+0x5a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006a6:	2204      	movs	r2, #4
 80006a8:	e75b      	b.n	8000562 <HAL_GPIO_Init+0x5a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80006aa:	2400      	movs	r4, #0
 80006ac:	e7a6      	b.n	80005fc <HAL_GPIO_Init+0xf4>
 80006ae:	2401      	movs	r4, #1
 80006b0:	e7a4      	b.n	80005fc <HAL_GPIO_Init+0xf4>
 80006b2:	2402      	movs	r4, #2
 80006b4:	e7a2      	b.n	80005fc <HAL_GPIO_Init+0xf4>
 80006b6:	2403      	movs	r4, #3
 80006b8:	e7a0      	b.n	80005fc <HAL_GPIO_Init+0xf4>
 80006ba:	2404      	movs	r4, #4
 80006bc:	e79e      	b.n	80005fc <HAL_GPIO_Init+0xf4>
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010400 	.word	0x40010400
 80006c8:	40010800 	.word	0x40010800
 80006cc:	40011c00 	.word	0x40011c00
 80006d0:	10220000 	.word	0x10220000
 80006d4:	10120000 	.word	0x10120000
 80006d8:	10310000 	.word	0x10310000

080006dc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80006dc:	6883      	ldr	r3, [r0, #8]
 80006de:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80006e0:	bf14      	ite	ne
 80006e2:	2001      	movne	r0, #1
 80006e4:	2000      	moveq	r0, #0
 80006e6:	4770      	bx	lr

080006e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006e8:	b10a      	cbz	r2, 80006ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ea:	6101      	str	r1, [r0, #16]
  }
}
 80006ec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006ee:	0409      	lsls	r1, r1, #16
 80006f0:	e7fb      	b.n	80006ea <HAL_GPIO_WritePin+0x2>

080006f2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80006f2:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80006f4:	ea01 0203 	and.w	r2, r1, r3
 80006f8:	ea21 0103 	bic.w	r1, r1, r3
 80006fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000700:	6101      	str	r1, [r0, #16]
}
 8000702:	4770      	bx	lr

08000704 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000706:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000708:	6951      	ldr	r1, [r2, #20]
 800070a:	4201      	tst	r1, r0
 800070c:	d002      	beq.n	8000714 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800070e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000710:	f003 fb76 	bl	8003e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8000714:	bd08      	pop	{r3, pc}
 8000716:	bf00      	nop
 8000718:	40010400 	.word	0x40010400

0800071c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800071e:	4604      	mov	r4, r0
{
 8000720:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000722:	b310      	cbz	r0, 800076a <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000724:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8000728:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800072c:	b91b      	cbnz	r3, 8000736 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800072e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000732:	f003 fdb7 	bl	80042a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000736:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000738:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800073a:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 800073c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8000740:	f855 0b10 	ldr.w	r0, [r5], #16
 8000744:	f001 fc86 	bl	8002054 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800074c:	682b      	ldr	r3, [r5, #0]
 800074e:	1d27      	adds	r7, r4, #4
 8000750:	6033      	str	r3, [r6, #0]
 8000752:	4626      	mov	r6, r4
 8000754:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000758:	f856 0b10 	ldr.w	r0, [r6], #16
 800075c:	f001 fc6a 	bl	8002034 <USB_CoreInit>
 8000760:	4605      	mov	r5, r0
 8000762:	b120      	cbz	r0, 800076e <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000764:	2302      	movs	r3, #2
 8000766:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800076a:	2501      	movs	r5, #1
 800076c:	e04c      	b.n	8000808 <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800076e:	4601      	mov	r1, r0
 8000770:	6820      	ldr	r0, [r4, #0]
 8000772:	f001 fc79 	bl	8002068 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000776:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000778:	f04f 0e01 	mov.w	lr, #1
 800077c:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800077e:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000780:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8000784:	b2ca      	uxtb	r2, r1
 8000786:	4594      	cmp	ip, r2
 8000788:	f101 0101 	add.w	r1, r1, #1
 800078c:	d81b      	bhi.n	80007c6 <HAL_PCD_Init+0xaa>
 800078e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000790:	2528      	movs	r5, #40	; 0x28
 8000792:	4619      	mov	r1, r3
 8000794:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000796:	4584      	cmp	ip, r0
 8000798:	f103 0301 	add.w	r3, r3, #1
 800079c:	d820      	bhi.n	80007e0 <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800079e:	46ec      	mov	ip, sp
 80007a0:	4635      	mov	r5, r6
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007a8:	682b      	ldr	r3, [r5, #0]
 80007aa:	f8cc 3000 	str.w	r3, [ip]
 80007ae:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80007b2:	6820      	ldr	r0, [r4, #0]
 80007b4:	f001 fc5a 	bl	800206c <USB_DevInit>
 80007b8:	2301      	movs	r3, #1
 80007ba:	4605      	mov	r5, r0
 80007bc:	b1e8      	cbz	r0, 80007fa <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80007be:	2202      	movs	r2, #2
 80007c0:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80007c4:	e7d1      	b.n	800076a <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80007c6:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80007ca:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80007ce:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80007d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80007d6:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80007d8:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80007dc:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007de:	e7d1      	b.n	8000784 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 80007e0:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007e4:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80007e8:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80007ec:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007f0:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007f4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007f8:	e7cc      	b.n	8000794 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 80007fa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80007fe:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000800:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000804:	f001 fef0 	bl	80025e8 <USB_DevDisconnect>

  return HAL_OK;
}
 8000808:	4628      	mov	r0, r5
 800080a:	b007      	add	sp, #28
 800080c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800080e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800080e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000810:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8000814:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000816:	2b01      	cmp	r3, #1
 8000818:	d010      	beq.n	800083c <HAL_PCD_Start+0x2e>
 800081a:	2501      	movs	r5, #1
 800081c:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000820:	6800      	ldr	r0, [r0, #0]
 8000822:	f001 fc0e 	bl	8002042 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000826:	4629      	mov	r1, r5
 8000828:	4620      	mov	r0, r4
 800082a:	f003 fe6c 	bl	8004506 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800082e:	6820      	ldr	r0, [r4, #0]
 8000830:	f001 fed8 	bl	80025e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000834:	2000      	movs	r0, #0
 8000836:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800083a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800083c:	2002      	movs	r0, #2
 800083e:	e7fc      	b.n	800083a <HAL_PCD_Start+0x2c>

08000840 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000840:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000842:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8000846:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000848:	2a01      	cmp	r2, #1
 800084a:	d00b      	beq.n	8000864 <HAL_PCD_SetAddress+0x24>
 800084c:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800084e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8000852:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000856:	6800      	ldr	r0, [r0, #0]
 8000858:	f001 febe 	bl	80025d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800085c:	2000      	movs	r0, #0
 800085e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000862:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000864:	2002      	movs	r0, #2
 8000866:	e7fc      	b.n	8000862 <HAL_PCD_SetAddress+0x22>

08000868 <HAL_PCD_IRQHandler>:
{
 8000868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800086c:	4604      	mov	r4, r0
 800086e:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000870:	6800      	ldr	r0, [r0, #0]
 8000872:	f001 febb 	bl	80025ec <USB_ReadInterrupts>
 8000876:	0402      	lsls	r2, r0, #16
 8000878:	d509      	bpl.n	800088e <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800087a:	f8df 9860 	ldr.w	r9, [pc, #2144]	; 80010dc <HAL_PCD_IRQHandler+0x874>
 800087e:	f8df 8860 	ldr.w	r8, [pc, #2144]	; 80010e0 <HAL_PCD_IRQHandler+0x878>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000882:	6820      	ldr	r0, [r4, #0]
 8000884:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000888:	041d      	lsls	r5, r3, #16
 800088a:	f100 80c1 	bmi.w	8000a10 <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800088e:	6820      	ldr	r0, [r4, #0]
 8000890:	f001 feac 	bl	80025ec <USB_ReadInterrupts>
 8000894:	0543      	lsls	r3, r0, #21
 8000896:	d50f      	bpl.n	80008b8 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000898:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800089a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800089c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008a4:	041b      	lsls	r3, r3, #16
 80008a6:	0c1b      	lsrs	r3, r3, #16
 80008a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80008ac:	f003 fd35 	bl	800431a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80008b0:	2100      	movs	r1, #0
 80008b2:	4620      	mov	r0, r4
 80008b4:	f7ff ffc4 	bl	8000840 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80008b8:	6820      	ldr	r0, [r4, #0]
 80008ba:	f001 fe97 	bl	80025ec <USB_ReadInterrupts>
 80008be:	0441      	lsls	r1, r0, #17
 80008c0:	d508      	bpl.n	80008d4 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80008c2:	6822      	ldr	r2, [r4, #0]
 80008c4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008cc:	041b      	lsls	r3, r3, #16
 80008ce:	0c1b      	lsrs	r3, r3, #16
 80008d0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	f001 fe89 	bl	80025ec <USB_ReadInterrupts>
 80008da:	0482      	lsls	r2, r0, #18
 80008dc:	d508      	bpl.n	80008f0 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80008de:	6822      	ldr	r2, [r4, #0]
 80008e0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80008e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008e8:	041b      	lsls	r3, r3, #16
 80008ea:	0c1b      	lsrs	r3, r3, #16
 80008ec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80008f0:	6820      	ldr	r0, [r4, #0]
 80008f2:	f001 fe7b 	bl	80025ec <USB_ReadInterrupts>
 80008f6:	04c3      	lsls	r3, r0, #19
 80008f8:	d51c      	bpl.n	8000934 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80008fa:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80008fc:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80008fe:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000902:	f023 0304 	bic.w	r3, r3, #4
 8000906:	041b      	lsls	r3, r3, #16
 8000908:	0c1b      	lsrs	r3, r3, #16
 800090a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800090e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000912:	f023 0308 	bic.w	r3, r3, #8
 8000916:	041b      	lsls	r3, r3, #16
 8000918:	0c1b      	lsrs	r3, r3, #16
 800091a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800091e:	f003 fd1f 	bl	8004360 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000922:	6822      	ldr	r2, [r4, #0]
 8000924:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800092c:	041b      	lsls	r3, r3, #16
 800092e:	0c1b      	lsrs	r3, r3, #16
 8000930:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000934:	6820      	ldr	r0, [r4, #0]
 8000936:	f001 fe59 	bl	80025ec <USB_ReadInterrupts>
 800093a:	0507      	lsls	r7, r0, #20
 800093c:	d546      	bpl.n	80009cc <HAL_PCD_IRQHandler+0x164>
 800093e:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	4606      	mov	r6, r0
 8000944:	4619      	mov	r1, r3
 8000946:	461a      	mov	r2, r3
 8000948:	f103 0520 	add.w	r5, r3, #32
 800094c:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8000950:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000952:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8000956:	d1f9      	bne.n	800094c <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000958:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800095c:	b292      	uxth	r2, r2
 800095e:	f042 0201 	orr.w	r2, r2, #1
 8000962:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000966:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800096a:	f022 0201 	bic.w	r2, r2, #1
 800096e:	0412      	lsls	r2, r2, #16
 8000970:	0c12      	lsrs	r2, r2, #16
 8000972:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000976:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800097a:	0556      	lsls	r6, r2, #21
 800097c:	d5fb      	bpl.n	8000976 <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800097e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000986:	0412      	lsls	r2, r2, #16
 8000988:	0c12      	lsrs	r2, r2, #16
 800098a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800098e:	f830 2b02 	ldrh.w	r2, [r0], #2
 8000992:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8000996:	428d      	cmp	r5, r1
 8000998:	d1f9      	bne.n	800098e <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800099a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800099e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80009a0:	b292      	uxth	r2, r2
 80009a2:	f042 0208 	orr.w	r2, r2, #8
 80009a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80009aa:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80009ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009b2:	0412      	lsls	r2, r2, #16
 80009b4:	0c12      	lsrs	r2, r2, #16
 80009b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80009ba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80009be:	b292      	uxth	r2, r2
 80009c0:	f042 0204 	orr.w	r2, r2, #4
 80009c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80009c8:	f003 fcba 	bl	8004340 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80009cc:	6820      	ldr	r0, [r4, #0]
 80009ce:	f001 fe0d 	bl	80025ec <USB_ReadInterrupts>
 80009d2:	0582      	lsls	r2, r0, #22
 80009d4:	d50b      	bpl.n	80009ee <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80009d6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80009d8:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80009da:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80009de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009e2:	041b      	lsls	r3, r3, #16
 80009e4:	0c1b      	lsrs	r3, r3, #16
 80009e6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80009ea:	f003 fc92 	bl	8004312 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80009ee:	6820      	ldr	r0, [r4, #0]
 80009f0:	f001 fdfc 	bl	80025ec <USB_ReadInterrupts>
 80009f4:	05c3      	lsls	r3, r0, #23
 80009f6:	d508      	bpl.n	8000a0a <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80009f8:	6822      	ldr	r2, [r4, #0]
 80009fa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80009fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a02:	041b      	lsls	r3, r3, #16
 8000a04:	0c1b      	lsrs	r3, r3, #16
 8000a06:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000a0a:	b005      	add	sp, #20
 8000a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000a10:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8000a14:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8000a16:	f016 060f 	ands.w	r6, r6, #15
 8000a1a:	f040 80b9 	bne.w	8000b90 <HAL_PCD_IRQHandler+0x328>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000a1e:	f011 0110 	ands.w	r1, r1, #16
 8000a22:	d12d      	bne.n	8000a80 <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a24:	8803      	ldrh	r3, [r0, #0]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	ea03 0309 	and.w	r3, r3, r9
 8000a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a30:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a32:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a36:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a40:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000a44:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000a48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a4e:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000a50:	4413      	add	r3, r2
 8000a52:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000a54:	4620      	mov	r0, r4
 8000a56:	f003 fc54 	bl	8004302 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000a5a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f43f af0f 	beq.w	8000882 <HAL_PCD_IRQHandler+0x1a>
 8000a64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	f47f af0b 	bne.w	8000882 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000a6c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000a70:	6821      	ldr	r1, [r4, #0]
 8000a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a76:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000a7a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000a7e:	e700      	b.n	8000882 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000a80:	8805      	ldrh	r5, [r0, #0]
 8000a82:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000a84:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8000a88:	d021      	beq.n	8000ace <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a8a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a8e:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a9c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000aa0:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000aa8:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000aac:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8000ab0:	f002 f890 	bl	8002bd4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ab4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000ab6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ab8:	8813      	ldrh	r3, [r2, #0]
 8000aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000abe:	051b      	lsls	r3, r3, #20
 8000ac0:	0d1b      	lsrs	r3, r3, #20
 8000ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000ac8:	f003 fc0c 	bl	80042e4 <HAL_PCD_SetupStageCallback>
 8000acc:	e6d9      	b.n	8000882 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000ace:	041f      	lsls	r7, r3, #16
 8000ad0:	f57f aed7 	bpl.w	8000882 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ad4:	8803      	ldrh	r3, [r0, #0]
 8000ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ada:	051b      	lsls	r3, r3, #20
 8000adc:	0d1b      	lsrs	r3, r3, #20
 8000ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ae4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ae8:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000af2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000af6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000afe:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000b02:	b18b      	cbz	r3, 8000b28 <HAL_PCD_IRQHandler+0x2c0>
 8000b04:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8000b08:	b171      	cbz	r1, 8000b28 <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000b0a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000b0e:	f002 f861 	bl	8002bd4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000b12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8000b16:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000b1a:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8000b1c:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000b1e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000b20:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000b24:	f003 fbe4 	bl	80042f0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b28:	6821      	ldr	r1, [r4, #0]
 8000b2a:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8000b2e:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000b32:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b9cd      	cbnz	r5, 8000b6e <HAL_PCD_IRQHandler+0x306>
 8000b3a:	5ac2      	ldrh	r2, [r0, r3]
 8000b3c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000b40:	0412      	lsls	r2, r2, #16
 8000b42:	0c12      	lsrs	r2, r2, #16
 8000b44:	52c2      	strh	r2, [r0, r3]
 8000b46:	5ac2      	ldrh	r2, [r0, r3]
 8000b48:	b292      	uxth	r2, r2
 8000b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b4e:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000b50:	880b      	ldrh	r3, [r1, #0]
 8000b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b5a:	041b      	lsls	r3, r3, #16
 8000b5c:	0c1b      	lsrs	r3, r3, #16
 8000b5e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6a:	800b      	strh	r3, [r1, #0]
 8000b6c:	e689      	b.n	8000882 <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b6e:	2d3e      	cmp	r5, #62	; 0x3e
 8000b70:	d806      	bhi.n	8000b80 <HAL_PCD_IRQHandler+0x318>
 8000b72:	086a      	lsrs	r2, r5, #1
 8000b74:	07ee      	lsls	r6, r5, #31
 8000b76:	bf48      	it	mi
 8000b78:	3201      	addmi	r2, #1
 8000b7a:	0292      	lsls	r2, r2, #10
 8000b7c:	b292      	uxth	r2, r2
 8000b7e:	e7e6      	b.n	8000b4e <HAL_PCD_IRQHandler+0x2e6>
 8000b80:	096a      	lsrs	r2, r5, #5
 8000b82:	06ed      	lsls	r5, r5, #27
 8000b84:	bf08      	it	eq
 8000b86:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000b8a:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8000b8e:	e7f5      	b.n	8000b7c <HAL_PCD_IRQHandler+0x314>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000b90:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000b94:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000b96:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000b98:	f140 80f8 	bpl.w	8000d8c <HAL_PCD_IRQHandler+0x524>
        if (ep->doublebuffer == 0U)
 8000b9c:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000b9e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8000ba2:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000baa:	051b      	lsls	r3, r3, #20
 8000bac:	0d1b      	lsrs	r3, r3, #20
 8000bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb2:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8000bb6:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8000bba:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8000bbe:	b9b3      	cbnz	r3, 8000bee <HAL_PCD_IRQHandler+0x386>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000bc0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000bc4:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	3306      	adds	r3, #6
 8000bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000bd0:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8000bd4:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	f000 80bb 	beq.w	8000d54 <HAL_PCD_IRQHandler+0x4ec>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000bde:	462b      	mov	r3, r5
 8000be0:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000be4:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8000be8:	f001 fff4 	bl	8002bd4 <USB_ReadPMA>
 8000bec:	e0b2      	b.n	8000d54 <HAL_PCD_IRQHandler+0x4ec>
          if (ep->type == EP_TYPE_BULK)
 8000bee:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8000bf2:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	f040 808b 	bne.w	8000d12 <HAL_PCD_IRQHandler+0x4aa>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000bfc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000c00:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 8000c04:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
 8000c08:	ea4f 0bcc 	mov.w	fp, ip, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000c12:	d040      	beq.n	8000c96 <HAL_PCD_IRQHandler+0x42e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000c14:	449b      	add	fp, r3
 8000c16:	f10b 0b02 	add.w	fp, fp, #2
 8000c1a:	f835 501b 	ldrh.w	r5, [r5, fp, lsl #1]
 8000c1e:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8000c22:	4295      	cmp	r5, r2
 8000c24:	d913      	bls.n	8000c4e <HAL_PCD_IRQHandler+0x3e6>
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000c2c:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8000c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c38:	041b      	lsls	r3, r3, #16
 8000c3a:	0c1b      	lsrs	r3, r3, #16
 8000c3c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 8000c4c:	e004      	b.n	8000c58 <HAL_PCD_IRQHandler+0x3f0>
      ep->xfer_len -= count;
 8000c4e:	1b52      	subs	r2, r2, r5
 8000c50:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8000c54:	2a00      	cmp	r2, #0
 8000c56:	d0e9      	beq.n	8000c2c <HAL_PCD_IRQHandler+0x3c4>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000c58:	f1be 0f00 	cmp.w	lr, #0
 8000c5c:	d012      	beq.n	8000c84 <HAL_PCD_IRQHandler+0x41c>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000c5e:	2328      	movs	r3, #40	; 0x28
 8000c60:	fb03 4306 	mla	r3, r3, r6, r4
 8000c64:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8000c68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c74:	041b      	lsls	r3, r3, #16
 8000c76:	0c1b      	lsrs	r3, r3, #16
 8000c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d065      	beq.n	8000d54 <HAL_PCD_IRQHandler+0x4ec>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000c88:	2128      	movs	r1, #40	; 0x28
 8000c8a:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000c8e:	462b      	mov	r3, r5
 8000c90:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8000c94:	e7a6      	b.n	8000be4 <HAL_PCD_IRQHandler+0x37c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000c96:	445b      	add	r3, fp
 8000c98:	3306      	adds	r3, #6
 8000c9a:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8000c9e:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8000ca2:	4295      	cmp	r5, r2
 8000ca4:	d912      	bls.n	8000ccc <HAL_PCD_IRQHandler+0x464>
 8000ca6:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000caa:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8000cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cb6:	041b      	lsls	r3, r3, #16
 8000cb8:	0c1b      	lsrs	r3, r3, #16
 8000cba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc6:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 8000cca:	e004      	b.n	8000cd6 <HAL_PCD_IRQHandler+0x46e>
      ep->xfer_len -= count;
 8000ccc:	1b52      	subs	r2, r2, r5
 8000cce:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d0e9      	beq.n	8000caa <HAL_PCD_IRQHandler+0x442>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8000cd6:	f1be 0f00 	cmp.w	lr, #0
 8000cda:	d112      	bne.n	8000d02 <HAL_PCD_IRQHandler+0x49a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000cdc:	2328      	movs	r3, #40	; 0x28
 8000cde:	fb03 4306 	mla	r3, r3, r6, r4
 8000ce2:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8000ce6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	0c1b      	lsrs	r3, r3, #16
 8000cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000cfe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8000d02:	b33d      	cbz	r5, 8000d54 <HAL_PCD_IRQHandler+0x4ec>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d04:	2128      	movs	r1, #40	; 0x28
 8000d06:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d0a:	462b      	mov	r3, r5
 8000d0c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8000d10:	e768      	b.n	8000be4 <HAL_PCD_IRQHandler+0x37c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000d12:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8000d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d1e:	041b      	lsls	r3, r3, #16
 8000d20:	0c1b      	lsrs	r3, r3, #16
 8000d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d2a:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000d2e:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8000d32:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d3c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000d40:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000d42:	d056      	beq.n	8000df2 <HAL_PCD_IRQHandler+0x58a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d44:	3202      	adds	r2, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8000d4c:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d19c      	bne.n	8000c8e <HAL_PCD_IRQHandler+0x426>
        ep->xfer_count += count;
 8000d54:	2128      	movs	r1, #40	; 0x28
 8000d56:	4371      	muls	r1, r6
 8000d58:	1863      	adds	r3, r4, r1
 8000d5a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000d5e:	442a      	add	r2, r5
 8000d60:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8000d64:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8000d68:	442a      	add	r2, r5
 8000d6a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000d6e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000d72:	b11a      	cbz	r2, 8000d7c <HAL_PCD_IRQHandler+0x514>
 8000d74:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8000d78:	429d      	cmp	r5, r3
 8000d7a:	d243      	bcs.n	8000e04 <HAL_PCD_IRQHandler+0x59c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000d7c:	2328      	movs	r3, #40	; 0x28
 8000d7e:	fb03 4306 	mla	r3, r3, r6, r4
 8000d82:	4620      	mov	r0, r4
 8000d84:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8000d88:	f003 fab2 	bl	80042f0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000d8c:	063a      	lsls	r2, r7, #24
 8000d8e:	f57f ad78 	bpl.w	8000882 <HAL_PCD_IRQHandler+0x1a>
 8000d92:	2528      	movs	r5, #40	; 0x28
 8000d94:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d96:	fb05 4506 	mla	r5, r5, r6, r4
 8000d9a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8000d9e:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	ea03 0309 	and.w	r3, r3, r9
 8000da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dac:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8000db0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8000db4:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d101      	bne.n	8000dc0 <HAL_PCD_IRQHandler+0x558>
 8000dbc:	05fb      	lsls	r3, r7, #23
 8000dbe:	d439      	bmi.n	8000e34 <HAL_PCD_IRQHandler+0x5cc>
          if (ep->xfer_len > TxByteNbre)
 8000dc0:	2728      	movs	r7, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000dc2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 8000dc6:	fb07 4306 	mla	r3, r7, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	3202      	adds	r2, #2
 8000dce:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8000dd2:	f83e e011 	ldrh.w	lr, [lr, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 8000dd6:	f8d3 c040 	ldr.w	ip, [r3, #64]	; 0x40
 8000dda:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8000dde:	45f4      	cmp	ip, lr
 8000de0:	d817      	bhi.n	8000e12 <HAL_PCD_IRQHandler+0x5aa>
 8000de2:	2200      	movs	r2, #0
 8000de4:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000de6:	4620      	mov	r0, r4
 8000de8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000dec:	f003 fa89 	bl	8004302 <HAL_PCD_DataInStageCallback>
 8000df0:	e547      	b.n	8000882 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000df2:	3206      	adds	r2, #6
 8000df4:	4413      	add	r3, r2
 8000df6:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8000dfa:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d0a8      	beq.n	8000d54 <HAL_PCD_IRQHandler+0x4ec>
 8000e02:	e782      	b.n	8000d0a <HAL_PCD_IRQHandler+0x4a2>
        ep = &hpcd->OUT_ep[epindex];
 8000e04:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8000e08:	6820      	ldr	r0, [r4, #0]
 8000e0a:	4421      	add	r1, r4
 8000e0c:	f001 fc04 	bl	8002618 <USB_EPStartXfer>
 8000e10:	e7bc      	b.n	8000d8c <HAL_PCD_IRQHandler+0x524>
            ep->xfer_len -= TxByteNbre;
 8000e12:	ebac 020e 	sub.w	r2, ip, lr
 8000e16:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	d0e4      	beq.n	8000de6 <HAL_PCD_IRQHandler+0x57e>
        ep = &hpcd->IN_ep[epindex];
 8000e1c:	fb06 7707 	mla	r7, r6, r7, r7
            ep->xfer_buff += TxByteNbre;
 8000e20:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000e22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8000e24:	4471      	add	r1, lr
            ep->xfer_count += TxByteNbre;
 8000e26:	4472      	add	r2, lr
            ep->xfer_buff += TxByteNbre;
 8000e28:	63d9      	str	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000e2c:	19e1      	adds	r1, r4, r7
 8000e2e:	f001 fbf3 	bl	8002618 <USB_EPStartXfer>
 8000e32:	e526      	b.n	8000882 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000e34:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000e38:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8000e3c:	b292      	uxth	r2, r2
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000e3e:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
 8000e42:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000e44:	4452      	add	r2, sl
 8000e46:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000e4a:	f000 80a2 	beq.w	8000f92 <HAL_PCD_IRQHandler+0x72a>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000e4e:	3202      	adds	r2, #2
 8000e50:	f83e c012 	ldrh.w	ip, [lr, r2, lsl #1]
 8000e54:	2228      	movs	r2, #40	; 0x28

    if (ep->xfer_len > TxByteNbre)
 8000e56:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8000e5a:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8000e5c:	bf28      	it	cs
 8000e5e:	2300      	movcs	r3, #0
 8000e60:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 8000e64:	bf38      	it	cc
 8000e66:	eba3 030c 	subcc.w	r3, r3, ip
 8000e6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8000e6c:	b2bf      	uxth	r7, r7
 8000e6e:	b9bb      	cbnz	r3, 8000ea0 <HAL_PCD_IRQHandler+0x638>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000e70:	4620      	mov	r0, r4
 8000e72:	f003 fa46 	bl	8004302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000e76:	2f00      	cmp	r7, #0
 8000e78:	f000 80a3 	beq.w	8000fc2 <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000e7c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000e80:	6822      	ldr	r2, [r4, #0]
 8000e82:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e8e:	041b      	lsls	r3, r3, #16
 8000e90:	0c1b      	lsrs	r3, r3, #16
 8000e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000e9e:	e090      	b.n	8000fc2 <HAL_PCD_IRQHandler+0x75a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000ea0:	b16f      	cbz	r7, 8000ebe <HAL_PCD_IRQHandler+0x656>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000ea2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8000ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000eae:	041b      	lsls	r3, r3, #16
 8000eb0:	0c1b      	lsrs	r3, r3, #16
 8000eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eba:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8000ebe:	2328      	movs	r3, #40	; 0x28
 8000ec0:	fb03 4306 	mla	r3, r3, r6, r4
 8000ec4:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8000ec8:	2a01      	cmp	r2, #1
 8000eca:	d17a      	bne.n	8000fc2 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_count += TxByteNbre;
 8000ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8000ece:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8000ed0:	4462      	add	r2, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8000ed2:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8000ed4:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8000ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8000ed8:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8000eda:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8000edc:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8000ede:	d327      	bcc.n	8000f30 <HAL_PCD_IRQHandler+0x6c8>
          ep->xfer_len_db -= len;
 8000ee0:	1abf      	subs	r7, r7, r2
 8000ee2:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000ee4:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8000ee8:	b293      	uxth	r3, r2
 8000eea:	2f00      	cmp	r7, #0
 8000eec:	d143      	bne.n	8000f76 <HAL_PCD_IRQHandler+0x70e>
 8000eee:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8000ef2:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 8000ef6:	b2bf      	uxth	r7, r7
 8000ef8:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 8000efc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000f00:	4477      	add	r7, lr
 8000f02:	bb02      	cbnz	r2, 8000f46 <HAL_PCD_IRQHandler+0x6de>
 8000f04:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8000f08:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000f0c:	0412      	lsls	r2, r2, #16
 8000f0e:	0c12      	lsrs	r2, r2, #16
 8000f10:	f82c 2007 	strh.w	r2, [ip, r7]
 8000f14:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8000f18:	b292      	uxth	r2, r2
 8000f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f1e:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8000f22:	2228      	movs	r2, #40	; 0x28
 8000f24:	fb02 4606 	mla	r6, r2, r6, r4
 8000f28:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8000f2a:	f001 fb65 	bl	80025f8 <USB_WritePMA>
 8000f2e:	e048      	b.n	8000fc2 <HAL_PCD_IRQHandler+0x75a>
        else if (ep->xfer_len_db == 0U)
 8000f30:	b91f      	cbnz	r7, 8000f3a <HAL_PCD_IRQHandler+0x6d2>
    if (ep->xfer_len > TxByteNbre)
 8000f32:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8000f34:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
 8000f38:	e7d4      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x67c>
          ep->xfer_fill_db = 0U;
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8000f40:	649a      	str	r2, [r3, #72]	; 0x48
 8000f42:	463a      	mov	r2, r7
 8000f44:	e7ce      	b.n	8000ee4 <HAL_PCD_IRQHandler+0x67c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8000f46:	2a3e      	cmp	r2, #62	; 0x3e
 8000f48:	d80c      	bhi.n	8000f64 <HAL_PCD_IRQHandler+0x6fc>
 8000f4a:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8000f4e:	07d2      	lsls	r2, r2, #31
 8000f50:	bf48      	it	mi
 8000f52:	f10e 0e01 	addmi.w	lr, lr, #1
 8000f56:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8000f5a:	fa1f fe8e 	uxth.w	lr, lr
 8000f5e:	f82c e007 	strh.w	lr, [ip, r7]
 8000f62:	e7de      	b.n	8000f22 <HAL_PCD_IRQHandler+0x6ba>
 8000f64:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8000f68:	06d2      	lsls	r2, r2, #27
 8000f6a:	bf08      	it	eq
 8000f6c:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8000f70:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8000f74:	e7f1      	b.n	8000f5a <HAL_PCD_IRQHandler+0x6f2>
 8000f76:	2f01      	cmp	r7, #1
 8000f78:	d1d3      	bne.n	8000f22 <HAL_PCD_IRQHandler+0x6ba>
 8000f7a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000f7e:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 8000f82:	fa1f fc82 	uxth.w	ip, r2
 8000f86:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8000f8a:	013f      	lsls	r7, r7, #4
 8000f8c:	4462      	add	r2, ip
 8000f8e:	52bb      	strh	r3, [r7, r2]
 8000f90:	e7c7      	b.n	8000f22 <HAL_PCD_IRQHandler+0x6ba>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000f92:	3206      	adds	r2, #6
 8000f94:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8000f98:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxByteNbre)
 8000f9a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000f9e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8000fa0:	bf88      	it	hi
 8000fa2:	4663      	movhi	r3, ip
 8000fa4:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8000fa8:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxByteNbre;
 8000fac:	bf98      	it	ls
 8000fae:	1a9b      	subls	r3, r3, r2
 8000fb0:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8000fb4:	b9c3      	cbnz	r3, 8000fe8 <HAL_PCD_IRQHandler+0x780>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f003 f9a3 	bl	8004302 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000fbc:	2f00      	cmp	r7, #0
 8000fbe:	f43f af5d 	beq.w	8000e7c <HAL_PCD_IRQHandler+0x614>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8000fc2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fd6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8000fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8000fe6:	e44c      	b.n	8000882 <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8000fe8:	b96f      	cbnz	r7, 8001006 <HAL_PCD_IRQHandler+0x79e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8000fea:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8000fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	0c1b      	lsrs	r3, r3, #16
 8000ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001002:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001006:	2328      	movs	r3, #40	; 0x28
 8001008:	fb03 4306 	mla	r3, r3, r6, r4
 800100c:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8001010:	2901      	cmp	r1, #1
 8001012:	d1d6      	bne.n	8000fc2 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_count += TxByteNbre;
 8001014:	6c5f      	ldr	r7, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8001016:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001018:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 800101a:	f8d3 c048 	ldr.w	ip, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 800101e:	645f      	str	r7, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001020:	6b9f      	ldr	r7, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8001022:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8001024:	45bc      	cmp	ip, r7
        ep->xfer_buff += TxByteNbre;
 8001026:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001028:	d326      	bcc.n	8001078 <HAL_PCD_IRQHandler+0x810>
          ep->xfer_len_db -= len;
 800102a:	ebac 0207 	sub.w	r2, ip, r7
 800102e:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001030:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8001034:	b2bb      	uxth	r3, r7
 8001036:	2a00      	cmp	r2, #0
 8001038:	d143      	bne.n	80010c2 <HAL_PCD_IRQHandler+0x85a>
 800103a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 800103e:	fa1f f28c 	uxth.w	r2, ip
 8001042:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8001046:	4494      	add	ip, r2
 8001048:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	bb07      	cbnz	r7, 8001092 <HAL_PCD_IRQHandler+0x82a>
 8001050:	f83c 7002 	ldrh.w	r7, [ip, r2]
 8001054:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8001058:	043f      	lsls	r7, r7, #16
 800105a:	0c3f      	lsrs	r7, r7, #16
 800105c:	f82c 7002 	strh.w	r7, [ip, r2]
 8001060:	f83c 7002 	ldrh.w	r7, [ip, r2]
 8001064:	b2bf      	uxth	r7, r7
 8001066:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800106a:	f82c 7002 	strh.w	r7, [ip, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800106e:	2228      	movs	r2, #40	; 0x28
 8001070:	fb02 4606 	mla	r6, r2, r6, r4
 8001074:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8001076:	e758      	b.n	8000f2a <HAL_PCD_IRQHandler+0x6c2>
        else if (ep->xfer_len_db == 0U)
 8001078:	f1bc 0f00 	cmp.w	ip, #0
 800107c:	d103      	bne.n	8001086 <HAL_PCD_IRQHandler+0x81e>
    if (ep->xfer_len >= TxByteNbre)
 800107e:	4617      	mov	r7, r2
          ep->xfer_fill_db = 0U;
 8001080:	f883 c04c 	strb.w	ip, [r3, #76]	; 0x4c
 8001084:	e7d4      	b.n	8001030 <HAL_PCD_IRQHandler+0x7c8>
          ep->xfer_len_db = 0U;
 8001086:	2200      	movs	r2, #0
          ep->xfer_fill_db = 0;
 8001088:	4667      	mov	r7, ip
          ep->xfer_len_db = 0U;
 800108a:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800108c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001090:	e7ce      	b.n	8001030 <HAL_PCD_IRQHandler+0x7c8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001092:	2f3e      	cmp	r7, #62	; 0x3e
 8001094:	d80c      	bhi.n	80010b0 <HAL_PCD_IRQHandler+0x848>
 8001096:	ea4f 0e57 	mov.w	lr, r7, lsr #1
 800109a:	07ff      	lsls	r7, r7, #31
 800109c:	bf48      	it	mi
 800109e:	f10e 0e01 	addmi.w	lr, lr, #1
 80010a2:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80010a6:	fa1f fe8e 	uxth.w	lr, lr
 80010aa:	f82c e002 	strh.w	lr, [ip, r2]
 80010ae:	e7de      	b.n	800106e <HAL_PCD_IRQHandler+0x806>
 80010b0:	ea4f 1e57 	mov.w	lr, r7, lsr #5
 80010b4:	06ff      	lsls	r7, r7, #27
 80010b6:	bf08      	it	eq
 80010b8:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 80010bc:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 80010c0:	e7f1      	b.n	80010a6 <HAL_PCD_IRQHandler+0x83e>
 80010c2:	2a01      	cmp	r2, #1
 80010c4:	d1d3      	bne.n	800106e <HAL_PCD_IRQHandler+0x806>
 80010c6:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80010ca:	b2ba      	uxth	r2, r7
 80010cc:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 80010d0:	4417      	add	r7, r2
 80010d2:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	52bb      	strh	r3, [r7, r2]
 80010da:	e7c8      	b.n	800106e <HAL_PCD_IRQHandler+0x806>
 80010dc:	ffff8f0f 	.word	0xffff8f0f
 80010e0:	ffff8000 	.word	0xffff8000

080010e4 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80010e4:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4605      	mov	r5, r0
 80010ec:	f001 0007 	and.w	r0, r1, #7
 80010f0:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80010f4:	d01c      	beq.n	8001130 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 80010f6:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010f8:	fb00 1101 	mla	r1, r0, r1, r1
 80010fc:	4429      	add	r1, r5
    ep->is_in = 1U;
 80010fe:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
 8001100:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8001102:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001104:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8001106:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001108:	b102      	cbz	r2, 800110c <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 800110a:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800110c:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800110e:	bf04      	itt	eq
 8001110:	2300      	moveq	r3, #0
 8001112:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001114:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8001118:	2b01      	cmp	r3, #1
 800111a:	d013      	beq.n	8001144 <HAL_PCD_EP_Open+0x60>
 800111c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800111e:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8001120:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001124:	f000 ffb6 	bl	8002094 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001128:	2000      	movs	r0, #0
 800112a:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 800112e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8001130:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001132:	fb01 f400 	mul.w	r4, r1, r0
 8001136:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 800113a:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800113c:	4429      	add	r1, r5
    ep->is_in = 0U;
 800113e:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8001142:	e7dd      	b.n	8001100 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8001144:	2002      	movs	r0, #2
 8001146:	e7f2      	b.n	800112e <HAL_PCD_EP_Open+0x4a>

08001148 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001148:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800114c:	b510      	push	{r4, lr}
 800114e:	f001 0207 	and.w	r2, r1, #7
 8001152:	4604      	mov	r4, r0
 8001154:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8001158:	d013      	beq.n	8001182 <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 800115a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800115c:	fb02 1101 	mla	r1, r2, r1, r1
 8001160:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001162:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001164:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001166:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800116a:	2b01      	cmp	r3, #1
 800116c:	d013      	beq.n	8001196 <HAL_PCD_EP_Close+0x4e>
 800116e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001170:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001172:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001176:	f001 f8e5 	bl	8002344 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800117a:	2000      	movs	r0, #0
 800117c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001180:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001182:	fb01 f302 	mul.w	r3, r1, r2
 8001186:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800118a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800118c:	4403      	add	r3, r0
 800118e:	2000      	movs	r0, #0
 8001190:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8001194:	e7e6      	b.n	8001164 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8001196:	2002      	movs	r0, #2
 8001198:	e7f2      	b.n	8001180 <HAL_PCD_EP_Close+0x38>

0800119a <HAL_PCD_EP_Receive>:
{
 800119a:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 800119c:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 800119e:	2600      	movs	r6, #0
 80011a0:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80011a4:	434c      	muls	r4, r1
 80011a6:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80011a8:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011ac:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011b0:	4401      	add	r1, r0
  ep->xfer_len = len;
 80011b2:	e9c5 235f 	strd	r2, r3, [r5, #380]	; 0x17c
  ep->xfer_count = 0U;
 80011b6:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 80011ba:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011be:	6800      	ldr	r0, [r0, #0]
 80011c0:	f001 fa2a 	bl	8002618 <USB_EPStartXfer>
}
 80011c4:	4630      	mov	r0, r6
 80011c6:	bd70      	pop	{r4, r5, r6, pc}

080011c8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80011c8:	2328      	movs	r3, #40	; 0x28
 80011ca:	f001 0107 	and.w	r1, r1, #7
 80011ce:	fb03 0101 	mla	r1, r3, r1, r0
}
 80011d2:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80011d6:	4770      	bx	lr

080011d8 <HAL_PCD_EP_Transmit>:
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 80011de:	2128      	movs	r1, #40	; 0x28
 80011e0:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 80011e4:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80011e6:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80011ea:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011ec:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 80011f0:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011f4:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 80011f6:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80011f8:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80011fa:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80011fe:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001202:	6800      	ldr	r0, [r0, #0]
 8001204:	f001 fa08 	bl	8002618 <USB_EPStartXfer>
}
 8001208:	4630      	mov	r0, r6
 800120a:	bd70      	pop	{r4, r5, r6, pc}

0800120c <HAL_PCD_EP_SetStall>:
{
 800120c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800120e:	6843      	ldr	r3, [r0, #4]
 8001210:	f001 0507 	and.w	r5, r1, #7
 8001214:	429d      	cmp	r5, r3
{
 8001216:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001218:	d828      	bhi.n	800126c <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 800121a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800121e:	f04f 0328 	mov.w	r3, #40	; 0x28
 8001222:	d01a      	beq.n	800125a <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001224:	fb05 3303 	mla	r3, r5, r3, r3
 8001228:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 800122a:	2301      	movs	r3, #1
 800122c:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 800122e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001230:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001232:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001234:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8001238:	429a      	cmp	r2, r3
 800123a:	d019      	beq.n	8001270 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800123c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800123e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001242:	f001 f95e 	bl	8002502 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001246:	b925      	cbnz	r5, 8001252 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001248:	6820      	ldr	r0, [r4, #0]
 800124a:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800124e:	f001 f9d1 	bl	80025f4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001252:	2000      	movs	r0, #0
 8001254:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8001258:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800125a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800125c:	434b      	muls	r3, r1
 800125e:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8001262:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001264:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001266:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 800126a:	e7e0      	b.n	800122e <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 800126c:	2001      	movs	r0, #1
 800126e:	e7f3      	b.n	8001258 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8001270:	2002      	movs	r0, #2
 8001272:	e7f1      	b.n	8001258 <HAL_PCD_EP_SetStall+0x4c>

08001274 <HAL_PCD_EP_ClrStall>:
{
 8001274:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001276:	6843      	ldr	r3, [r0, #4]
 8001278:	f001 020f 	and.w	r2, r1, #15
 800127c:	429a      	cmp	r2, r3
{
 800127e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001280:	d826      	bhi.n	80012d0 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8001282:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001286:	f001 0207 	and.w	r2, r1, #7
 800128a:	f04f 0128 	mov.w	r1, #40	; 0x28
 800128e:	d015      	beq.n	80012bc <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 8001290:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001292:	fb02 1101 	mla	r1, r2, r1, r1
 8001296:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001298:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 800129a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800129c:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800129e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80012a0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d015      	beq.n	80012d4 <HAL_PCD_EP_ClrStall+0x60>
 80012a8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012aa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80012ac:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80012b0:	f001 f947 	bl	8002542 <USB_EPClearStall>
  return HAL_OK;
 80012b4:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80012b6:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 80012ba:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012bc:	fb01 f302 	mul.w	r3, r1, r2
 80012c0:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80012c4:	4401      	add	r1, r0
    ep->is_in = 0U;
 80012c6:	4403      	add	r3, r0
 80012c8:	2000      	movs	r0, #0
 80012ca:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80012ce:	e7e4      	b.n	800129a <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
 80012d2:	e7f2      	b.n	80012ba <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 80012d4:	2002      	movs	r0, #2
 80012d6:	e7f0      	b.n	80012ba <HAL_PCD_EP_ClrStall+0x46>

080012d8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80012d8:	b510      	push	{r4, lr}
 80012da:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80012dc:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012e0:	bf1b      	ittet	ne
 80012e2:	f001 0107 	andne.w	r1, r1, #7
 80012e6:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012ea:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ee:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80012f0:	bf08      	it	eq
 80012f2:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80012f6:	b299      	uxth	r1, r3
 80012f8:	b91a      	cbnz	r2, 8001302 <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80012fa:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80012fc:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80012fe:	2000      	movs	r0, #0
 8001300:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8001302:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001304:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8001306:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001308:	e7f9      	b.n	80012fe <HAL_PCDEx_PMAConfig+0x26>
	...

0800130c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800130c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001310:	4605      	mov	r5, r0
 8001312:	b338      	cbz	r0, 8001364 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001314:	6803      	ldr	r3, [r0, #0]
 8001316:	07db      	lsls	r3, r3, #31
 8001318:	d410      	bmi.n	800133c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	079f      	lsls	r7, r3, #30
 800131e:	d45e      	bmi.n	80013de <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	0719      	lsls	r1, r3, #28
 8001324:	f100 8095 	bmi.w	8001452 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	075a      	lsls	r2, r3, #29
 800132c:	f100 80bf 	bmi.w	80014ae <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001330:	69e8      	ldr	r0, [r5, #28]
 8001332:	2800      	cmp	r0, #0
 8001334:	f040 812c 	bne.w	8001590 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001338:	2000      	movs	r0, #0
 800133a:	e029      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800133c:	4c8f      	ldr	r4, [pc, #572]	; (800157c <HAL_RCC_OscConfig+0x270>)
 800133e:	6863      	ldr	r3, [r4, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b04      	cmp	r3, #4
 8001346:	d007      	beq.n	8001358 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001348:	6863      	ldr	r3, [r4, #4]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b08      	cmp	r3, #8
 8001350:	d10a      	bne.n	8001368 <HAL_RCC_OscConfig+0x5c>
 8001352:	6863      	ldr	r3, [r4, #4]
 8001354:	03de      	lsls	r6, r3, #15
 8001356:	d507      	bpl.n	8001368 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	039c      	lsls	r4, r3, #14
 800135c:	d5dd      	bpl.n	800131a <HAL_RCC_OscConfig+0xe>
 800135e:	686b      	ldr	r3, [r5, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1da      	bne.n	800131a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001364:	2001      	movs	r0, #1
 8001366:	e013      	b.n	8001390 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001368:	686b      	ldr	r3, [r5, #4]
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136e:	d112      	bne.n	8001396 <HAL_RCC_OscConfig+0x8a>
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001376:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001378:	f7fe ffa8 	bl	80002cc <HAL_GetTick>
 800137c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	0398      	lsls	r0, r3, #14
 8001382:	d4ca      	bmi.n	800131a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001384:	f7fe ffa2 	bl	80002cc <HAL_GetTick>
 8001388:	1b80      	subs	r0, r0, r6
 800138a:	2864      	cmp	r0, #100	; 0x64
 800138c:	d9f7      	bls.n	800137e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800138e:	2003      	movs	r0, #3
}
 8001390:	b002      	add	sp, #8
 8001392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001396:	b99b      	cbnz	r3, 80013c0 <HAL_RCC_OscConfig+0xb4>
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139e:	6023      	str	r3, [r4, #0]
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013a8:	f7fe ff90 	bl	80002cc <HAL_GetTick>
 80013ac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	0399      	lsls	r1, r3, #14
 80013b2:	d5b2      	bpl.n	800131a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7fe ff8a 	bl	80002cc <HAL_GetTick>
 80013b8:	1b80      	subs	r0, r0, r6
 80013ba:	2864      	cmp	r0, #100	; 0x64
 80013bc:	d9f7      	bls.n	80013ae <HAL_RCC_OscConfig+0xa2>
 80013be:	e7e6      	b.n	800138e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	d103      	bne.n	80013d0 <HAL_RCC_OscConfig+0xc4>
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013cc:	6023      	str	r3, [r4, #0]
 80013ce:	e7cf      	b.n	8001370 <HAL_RCC_OscConfig+0x64>
 80013d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013dc:	e7cb      	b.n	8001376 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013de:	4c67      	ldr	r4, [pc, #412]	; (800157c <HAL_RCC_OscConfig+0x270>)
 80013e0:	6863      	ldr	r3, [r4, #4]
 80013e2:	f013 0f0c 	tst.w	r3, #12
 80013e6:	d007      	beq.n	80013f8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013e8:	6863      	ldr	r3, [r4, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d110      	bne.n	8001414 <HAL_RCC_OscConfig+0x108>
 80013f2:	6863      	ldr	r3, [r4, #4]
 80013f4:	03da      	lsls	r2, r3, #15
 80013f6:	d40d      	bmi.n	8001414 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	079b      	lsls	r3, r3, #30
 80013fc:	d502      	bpl.n	8001404 <HAL_RCC_OscConfig+0xf8>
 80013fe:	692b      	ldr	r3, [r5, #16]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d1af      	bne.n	8001364 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	696a      	ldr	r2, [r5, #20]
 8001408:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800140c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001410:	6023      	str	r3, [r4, #0]
 8001412:	e785      	b.n	8001320 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001414:	692a      	ldr	r2, [r5, #16]
 8001416:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <HAL_RCC_OscConfig+0x274>)
 8001418:	b16a      	cbz	r2, 8001436 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800141e:	f7fe ff55 	bl	80002cc <HAL_GetTick>
 8001422:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	079f      	lsls	r7, r3, #30
 8001428:	d4ec      	bmi.n	8001404 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142a:	f7fe ff4f 	bl	80002cc <HAL_GetTick>
 800142e:	1b80      	subs	r0, r0, r6
 8001430:	2802      	cmp	r0, #2
 8001432:	d9f7      	bls.n	8001424 <HAL_RCC_OscConfig+0x118>
 8001434:	e7ab      	b.n	800138e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001436:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001438:	f7fe ff48 	bl	80002cc <HAL_GetTick>
 800143c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	0798      	lsls	r0, r3, #30
 8001442:	f57f af6d 	bpl.w	8001320 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001446:	f7fe ff41 	bl	80002cc <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	2802      	cmp	r0, #2
 800144e:	d9f6      	bls.n	800143e <HAL_RCC_OscConfig+0x132>
 8001450:	e79d      	b.n	800138e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001452:	69aa      	ldr	r2, [r5, #24]
 8001454:	4e49      	ldr	r6, [pc, #292]	; (800157c <HAL_RCC_OscConfig+0x270>)
 8001456:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <HAL_RCC_OscConfig+0x278>)
 8001458:	b1da      	cbz	r2, 8001492 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800145e:	f7fe ff35 	bl	80002cc <HAL_GetTick>
 8001462:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001464:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001466:	079b      	lsls	r3, r3, #30
 8001468:	d50d      	bpl.n	8001486 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800146a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800146e:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HAL_RCC_OscConfig+0x27c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fbb3 f3f2 	udiv	r3, r3, r2
 8001476:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001478:	bf00      	nop
  }
  while (Delay --);
 800147a:	9b01      	ldr	r3, [sp, #4]
 800147c:	1e5a      	subs	r2, r3, #1
 800147e:	9201      	str	r2, [sp, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f9      	bne.n	8001478 <HAL_RCC_OscConfig+0x16c>
 8001484:	e750      	b.n	8001328 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001486:	f7fe ff21 	bl	80002cc <HAL_GetTick>
 800148a:	1b00      	subs	r0, r0, r4
 800148c:	2802      	cmp	r0, #2
 800148e:	d9e9      	bls.n	8001464 <HAL_RCC_OscConfig+0x158>
 8001490:	e77d      	b.n	800138e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001492:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001494:	f7fe ff1a 	bl	80002cc <HAL_GetTick>
 8001498:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800149c:	079f      	lsls	r7, r3, #30
 800149e:	f57f af43 	bpl.w	8001328 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a2:	f7fe ff13 	bl	80002cc <HAL_GetTick>
 80014a6:	1b00      	subs	r0, r0, r4
 80014a8:	2802      	cmp	r0, #2
 80014aa:	d9f6      	bls.n	800149a <HAL_RCC_OscConfig+0x18e>
 80014ac:	e76f      	b.n	800138e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4c33      	ldr	r4, [pc, #204]	; (800157c <HAL_RCC_OscConfig+0x270>)
 80014b0:	69e3      	ldr	r3, [r4, #28]
 80014b2:	00d8      	lsls	r0, r3, #3
 80014b4:	d424      	bmi.n	8001500 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 80014b6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b8:	69e3      	ldr	r3, [r4, #28]
 80014ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014be:	61e3      	str	r3, [r4, #28]
 80014c0:	69e3      	ldr	r3, [r4, #28]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4e30      	ldr	r6, [pc, #192]	; (800158c <HAL_RCC_OscConfig+0x280>)
 80014cc:	6833      	ldr	r3, [r6, #0]
 80014ce:	05d9      	lsls	r1, r3, #23
 80014d0:	d518      	bpl.n	8001504 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d2:	68eb      	ldr	r3, [r5, #12]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d126      	bne.n	8001526 <HAL_RCC_OscConfig+0x21a>
 80014d8:	6a23      	ldr	r3, [r4, #32]
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80014e0:	f7fe fef4 	bl	80002cc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80014e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ea:	6a23      	ldr	r3, [r4, #32]
 80014ec:	079b      	lsls	r3, r3, #30
 80014ee:	d53f      	bpl.n	8001570 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 80014f0:	2f00      	cmp	r7, #0
 80014f2:	f43f af1d 	beq.w	8001330 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f6:	69e3      	ldr	r3, [r4, #28]
 80014f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014fc:	61e3      	str	r3, [r4, #28]
 80014fe:	e717      	b.n	8001330 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001500:	2700      	movs	r7, #0
 8001502:	e7e2      	b.n	80014ca <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001504:	6833      	ldr	r3, [r6, #0]
 8001506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800150c:	f7fe fede 	bl	80002cc <HAL_GetTick>
 8001510:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	6833      	ldr	r3, [r6, #0]
 8001514:	05da      	lsls	r2, r3, #23
 8001516:	d4dc      	bmi.n	80014d2 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001518:	f7fe fed8 	bl	80002cc <HAL_GetTick>
 800151c:	eba0 0008 	sub.w	r0, r0, r8
 8001520:	2864      	cmp	r0, #100	; 0x64
 8001522:	d9f6      	bls.n	8001512 <HAL_RCC_OscConfig+0x206>
 8001524:	e733      	b.n	800138e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001526:	b9ab      	cbnz	r3, 8001554 <HAL_RCC_OscConfig+0x248>
 8001528:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6223      	str	r3, [r4, #32]
 8001534:	6a23      	ldr	r3, [r4, #32]
 8001536:	f023 0304 	bic.w	r3, r3, #4
 800153a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800153c:	f7fe fec6 	bl	80002cc <HAL_GetTick>
 8001540:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001542:	6a23      	ldr	r3, [r4, #32]
 8001544:	0798      	lsls	r0, r3, #30
 8001546:	d5d3      	bpl.n	80014f0 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001548:	f7fe fec0 	bl	80002cc <HAL_GetTick>
 800154c:	1b80      	subs	r0, r0, r6
 800154e:	4540      	cmp	r0, r8
 8001550:	d9f7      	bls.n	8001542 <HAL_RCC_OscConfig+0x236>
 8001552:	e71c      	b.n	800138e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001554:	2b05      	cmp	r3, #5
 8001556:	6a23      	ldr	r3, [r4, #32]
 8001558:	d103      	bne.n	8001562 <HAL_RCC_OscConfig+0x256>
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6223      	str	r3, [r4, #32]
 8001560:	e7ba      	b.n	80014d8 <HAL_RCC_OscConfig+0x1cc>
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6223      	str	r3, [r4, #32]
 8001568:	6a23      	ldr	r3, [r4, #32]
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	e7b6      	b.n	80014de <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7fe feac 	bl	80002cc <HAL_GetTick>
 8001574:	1b80      	subs	r0, r0, r6
 8001576:	4540      	cmp	r0, r8
 8001578:	d9b7      	bls.n	80014ea <HAL_RCC_OscConfig+0x1de>
 800157a:	e708      	b.n	800138e <HAL_RCC_OscConfig+0x82>
 800157c:	40021000 	.word	0x40021000
 8001580:	42420000 	.word	0x42420000
 8001584:	42420480 	.word	0x42420480
 8001588:	20000130 	.word	0x20000130
 800158c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001590:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_RCC_OscConfig+0x330>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	461c      	mov	r4, r3
 8001596:	f002 020c 	and.w	r2, r2, #12
 800159a:	2a08      	cmp	r2, #8
 800159c:	d03d      	beq.n	800161a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159e:	2300      	movs	r3, #0
 80015a0:	4e27      	ldr	r6, [pc, #156]	; (8001640 <HAL_RCC_OscConfig+0x334>)
 80015a2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80015a4:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a6:	d12b      	bne.n	8001600 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80015a8:	f7fe fe90 	bl	80002cc <HAL_GetTick>
 80015ac:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	0199      	lsls	r1, r3, #6
 80015b2:	d41f      	bmi.n	80015f4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015b4:	6a2b      	ldr	r3, [r5, #32]
 80015b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015bc:	6862      	ldr	r2, [r4, #4]
 80015be:	68a9      	ldr	r1, [r5, #8]
 80015c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80015c4:	430a      	orrs	r2, r1
 80015c6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80015ca:	6862      	ldr	r2, [r4, #4]
 80015cc:	430b      	orrs	r3, r1
 80015ce:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80015d2:	4313      	orrs	r3, r2
 80015d4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80015d6:	2301      	movs	r3, #1
 80015d8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80015da:	f7fe fe77 	bl	80002cc <HAL_GetTick>
 80015de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	019a      	lsls	r2, r3, #6
 80015e4:	f53f aea8 	bmi.w	8001338 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7fe fe70 	bl	80002cc <HAL_GetTick>
 80015ec:	1b40      	subs	r0, r0, r5
 80015ee:	2802      	cmp	r0, #2
 80015f0:	d9f6      	bls.n	80015e0 <HAL_RCC_OscConfig+0x2d4>
 80015f2:	e6cc      	b.n	800138e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7fe fe6a 	bl	80002cc <HAL_GetTick>
 80015f8:	1bc0      	subs	r0, r0, r7
 80015fa:	2802      	cmp	r0, #2
 80015fc:	d9d7      	bls.n	80015ae <HAL_RCC_OscConfig+0x2a2>
 80015fe:	e6c6      	b.n	800138e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001600:	f7fe fe64 	bl	80002cc <HAL_GetTick>
 8001604:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	f57f ae95 	bpl.w	8001338 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160e:	f7fe fe5d 	bl	80002cc <HAL_GetTick>
 8001612:	1b40      	subs	r0, r0, r5
 8001614:	2802      	cmp	r0, #2
 8001616:	d9f6      	bls.n	8001606 <HAL_RCC_OscConfig+0x2fa>
 8001618:	e6b9      	b.n	800138e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161a:	2801      	cmp	r0, #1
 800161c:	f43f aeb8 	beq.w	8001390 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001620:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	6a2a      	ldr	r2, [r5, #32]
 8001624:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001628:	4291      	cmp	r1, r2
 800162a:	f47f ae9b 	bne.w	8001364 <HAL_RCC_OscConfig+0x58>
 800162e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001630:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001634:	4293      	cmp	r3, r2
 8001636:	f43f ae7f 	beq.w	8001338 <HAL_RCC_OscConfig+0x2c>
 800163a:	e693      	b.n	8001364 <HAL_RCC_OscConfig+0x58>
 800163c:	40021000 	.word	0x40021000
 8001640:	42420060 	.word	0x42420060

08001644 <HAL_RCC_GetSysClockFreq>:
{
 8001644:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001648:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800164a:	ac02      	add	r4, sp, #8
 800164c:	f103 0510 	add.w	r5, r3, #16
 8001650:	4622      	mov	r2, r4
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	6859      	ldr	r1, [r3, #4]
 8001656:	3308      	adds	r3, #8
 8001658:	c203      	stmia	r2!, {r0, r1}
 800165a:	42ab      	cmp	r3, r5
 800165c:	4614      	mov	r4, r2
 800165e:	d1f7      	bne.n	8001650 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001660:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001664:	4911      	ldr	r1, [pc, #68]	; (80016ac <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001666:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800166a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800166c:	f003 020c 	and.w	r2, r3, #12
 8001670:	2a08      	cmp	r2, #8
 8001672:	d117      	bne.n	80016a4 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001674:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001678:	a806      	add	r0, sp, #24
 800167a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800167c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800167e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001682:	d50c      	bpl.n	800169e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001684:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001686:	480a      	ldr	r0, [pc, #40]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001688:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800168c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800168e:	aa06      	add	r2, sp, #24
 8001690:	4413      	add	r3, r2
 8001692:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001696:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800169a:	b007      	add	sp, #28
 800169c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <HAL_RCC_GetSysClockFreq+0x70>)
 80016a0:	4350      	muls	r0, r2
 80016a2:	e7fa      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80016a6:	e7f8      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x56>
 80016a8:	08005d0c 	.word	0x08005d0c
 80016ac:	40021000 	.word	0x40021000
 80016b0:	007a1200 	.word	0x007a1200
 80016b4:	003d0900 	.word	0x003d0900

080016b8 <HAL_RCC_ClockConfig>:
{
 80016b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016bc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80016be:	4604      	mov	r4, r0
 80016c0:	b910      	cbnz	r0, 80016c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
}
 80016c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c8:	4a44      	ldr	r2, [pc, #272]	; (80017dc <HAL_RCC_ClockConfig+0x124>)
 80016ca:	6813      	ldr	r3, [r2, #0]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	428b      	cmp	r3, r1
 80016d2:	d328      	bcc.n	8001726 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	6821      	ldr	r1, [r4, #0]
 80016d6:	078e      	lsls	r6, r1, #30
 80016d8:	d430      	bmi.n	800173c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016da:	07ca      	lsls	r2, r1, #31
 80016dc:	d443      	bmi.n	8001766 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016de:	4a3f      	ldr	r2, [pc, #252]	; (80017dc <HAL_RCC_ClockConfig+0x124>)
 80016e0:	6813      	ldr	r3, [r2, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	42ab      	cmp	r3, r5
 80016e8:	d865      	bhi.n	80017b6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ea:	6822      	ldr	r2, [r4, #0]
 80016ec:	4d3c      	ldr	r5, [pc, #240]	; (80017e0 <HAL_RCC_ClockConfig+0x128>)
 80016ee:	f012 0f04 	tst.w	r2, #4
 80016f2:	d16c      	bne.n	80017ce <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f4:	0713      	lsls	r3, r2, #28
 80016f6:	d506      	bpl.n	8001706 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016f8:	686b      	ldr	r3, [r5, #4]
 80016fa:	6922      	ldr	r2, [r4, #16]
 80016fc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001700:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001704:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001706:	f7ff ff9d 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 800170a:	686b      	ldr	r3, [r5, #4]
 800170c:	4a35      	ldr	r2, [pc, #212]	; (80017e4 <HAL_RCC_ClockConfig+0x12c>)
 800170e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001712:	5cd3      	ldrb	r3, [r2, r3]
 8001714:	40d8      	lsrs	r0, r3
 8001716:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_ClockConfig+0x130>)
 8001718:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCC_ClockConfig+0x134>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	f7fe fd93 	bl	8000248 <HAL_InitTick>
  return HAL_OK;
 8001722:	2000      	movs	r0, #0
 8001724:	e7ce      	b.n	80016c4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	6813      	ldr	r3, [r2, #0]
 8001728:	f023 0307 	bic.w	r3, r3, #7
 800172c:	430b      	orrs	r3, r1
 800172e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001730:	6813      	ldr	r3, [r2, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	428b      	cmp	r3, r1
 8001738:	d1c3      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xa>
 800173a:	e7cb      	b.n	80016d4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_RCC_ClockConfig+0x128>)
 800173e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001742:	bf1e      	ittt	ne
 8001744:	685a      	ldrne	r2, [r3, #4]
 8001746:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800174a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800174e:	bf42      	ittt	mi
 8001750:	685a      	ldrmi	r2, [r3, #4]
 8001752:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001756:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	68a0      	ldr	r0, [r4, #8]
 800175c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001760:	4302      	orrs	r2, r0
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	e7b9      	b.n	80016da <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001766:	6862      	ldr	r2, [r4, #4]
 8001768:	4e1d      	ldr	r6, [pc, #116]	; (80017e0 <HAL_RCC_ClockConfig+0x128>)
 800176a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	d11a      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001770:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	d0a5      	beq.n	80016c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001776:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177c:	f023 0303 	bic.w	r3, r3, #3
 8001780:	4313      	orrs	r3, r2
 8001782:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001784:	f7fe fda2 	bl	80002cc <HAL_GetTick>
 8001788:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	6873      	ldr	r3, [r6, #4]
 800178c:	6862      	ldr	r2, [r4, #4]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001796:	d0a2      	beq.n	80016de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001798:	f7fe fd98 	bl	80002cc <HAL_GetTick>
 800179c:	1bc0      	subs	r0, r0, r7
 800179e:	4540      	cmp	r0, r8
 80017a0:	d9f3      	bls.n	800178a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80017a2:	2003      	movs	r0, #3
 80017a4:	e78e      	b.n	80016c4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a6:	2a02      	cmp	r2, #2
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017ae:	e7e1      	b.n	8001774 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	f013 0f02 	tst.w	r3, #2
 80017b4:	e7de      	b.n	8001774 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	6813      	ldr	r3, [r2, #0]
 80017b8:	f023 0307 	bic.w	r3, r3, #7
 80017bc:	432b      	orrs	r3, r5
 80017be:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c0:	6813      	ldr	r3, [r2, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	42ab      	cmp	r3, r5
 80017c8:	f47f af7b 	bne.w	80016c2 <HAL_RCC_ClockConfig+0xa>
 80017cc:	e78d      	b.n	80016ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ce:	686b      	ldr	r3, [r5, #4]
 80017d0:	68e1      	ldr	r1, [r4, #12]
 80017d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017d6:	430b      	orrs	r3, r1
 80017d8:	606b      	str	r3, [r5, #4]
 80017da:	e78b      	b.n	80016f4 <HAL_RCC_ClockConfig+0x3c>
 80017dc:	40022000 	.word	0x40022000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08005e92 	.word	0x08005e92
 80017e8:	20000130 	.word	0x20000130
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <HAL_RCC_GetPCLK1Freq+0x14>)
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	4a03      	ldr	r2, [pc, #12]	; (800180c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017fe:	6810      	ldr	r0, [r2, #0]
}
 8001800:	40d8      	lsrs	r0, r3
 8001802:	4770      	bx	lr
 8001804:	40021000 	.word	0x40021000
 8001808:	08005ea2 	.word	0x08005ea2
 800180c:	20000130 	.word	0x20000130

08001810 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	4a03      	ldr	r2, [pc, #12]	; (800182c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800181e:	6810      	ldr	r0, [r2, #0]
}
 8001820:	40d8      	lsrs	r0, r3
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000
 8001828:	08005ea2 	.word	0x08005ea2
 800182c:	20000130 	.word	0x20000130

08001830 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001830:	6803      	ldr	r3, [r0, #0]
{
 8001832:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001836:	07d9      	lsls	r1, r3, #31
{
 8001838:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800183a:	d520      	bpl.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183c:	4c35      	ldr	r4, [pc, #212]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800183e:	69e3      	ldr	r3, [r4, #28]
 8001840:	00da      	lsls	r2, r3, #3
 8001842:	d432      	bmi.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001844:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	69e3      	ldr	r3, [r4, #28]
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	61e3      	str	r3, [r4, #28]
 800184e:	69e3      	ldr	r3, [r4, #28]
 8001850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4e2f      	ldr	r6, [pc, #188]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800185a:	6833      	ldr	r3, [r6, #0]
 800185c:	05db      	lsls	r3, r3, #23
 800185e:	d526      	bpl.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001860:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001862:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001866:	d136      	bne.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001868:	6a23      	ldr	r3, [r4, #32]
 800186a:	686a      	ldr	r2, [r5, #4]
 800186c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001870:	4313      	orrs	r3, r2
 8001872:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001874:	b11f      	cbz	r7, 800187e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001876:	69e3      	ldr	r3, [r4, #28]
 8001878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800187e:	6828      	ldr	r0, [r5, #0]
 8001880:	0783      	lsls	r3, r0, #30
 8001882:	d506      	bpl.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001884:	4923      	ldr	r1, [pc, #140]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001886:	68ab      	ldr	r3, [r5, #8]
 8001888:	684a      	ldr	r2, [r1, #4]
 800188a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800188e:	431a      	orrs	r2, r3
 8001890:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001892:	f010 0010 	ands.w	r0, r0, #16
 8001896:	d01b      	beq.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001898:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800189a:	6969      	ldr	r1, [r5, #20]
 800189c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800189e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6053      	str	r3, [r2, #4]
 80018a8:	e012      	b.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80018aa:	2700      	movs	r7, #0
 80018ac:	e7d4      	b.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	6833      	ldr	r3, [r6, #0]
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018b6:	f7fe fd09 	bl	80002cc <HAL_GetTick>
 80018ba:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	6833      	ldr	r3, [r6, #0]
 80018be:	05d8      	lsls	r0, r3, #23
 80018c0:	d4ce      	bmi.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7fe fd03 	bl	80002cc <HAL_GetTick>
 80018c6:	eba0 0008 	sub.w	r0, r0, r8
 80018ca:	2864      	cmp	r0, #100	; 0x64
 80018cc:	d9f6      	bls.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80018ce:	2003      	movs	r0, #3
}
 80018d0:	b002      	add	sp, #8
 80018d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018d6:	686a      	ldr	r2, [r5, #4]
 80018d8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80018dc:	429a      	cmp	r2, r3
 80018de:	d0c3      	beq.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80018e0:	2001      	movs	r0, #1
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018e4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80018e6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018e8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018ee:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80018f0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018f2:	07d9      	lsls	r1, r3, #31
 80018f4:	d5b8      	bpl.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80018f6:	f7fe fce9 	bl	80002cc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80018fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	6a23      	ldr	r3, [r4, #32]
 8001902:	079a      	lsls	r2, r3, #30
 8001904:	d4b0      	bmi.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7fe fce1 	bl	80002cc <HAL_GetTick>
 800190a:	1b80      	subs	r0, r0, r6
 800190c:	4540      	cmp	r0, r8
 800190e:	d9f7      	bls.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001910:	e7dd      	b.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	40007000 	.word	0x40007000
 800191c:	42420440 	.word	0x42420440

08001920 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001920:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001924:	2b01      	cmp	r3, #1
 8001926:	d128      	bne.n	800197a <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001928:	2302      	movs	r3, #2
 800192a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800192e:	6803      	ldr	r3, [r0, #0]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_TIM_Base_Start_IT+0x60>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d012      	beq.n	8001964 <HAL_TIM_Base_Start_IT+0x44>
 800193e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001942:	4293      	cmp	r3, r2
 8001944:	d00e      	beq.n	8001964 <HAL_TIM_Base_Start_IT+0x44>
 8001946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194a:	d00b      	beq.n	8001964 <HAL_TIM_Base_Start_IT+0x44>
 800194c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001950:	4293      	cmp	r3, r2
 8001952:	d007      	beq.n	8001964 <HAL_TIM_Base_Start_IT+0x44>
 8001954:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001958:	4293      	cmp	r3, r2
 800195a:	d003      	beq.n	8001964 <HAL_TIM_Base_Start_IT+0x44>
 800195c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001960:	4293      	cmp	r3, r2
 8001962:	d104      	bne.n	800196e <HAL_TIM_Base_Start_IT+0x4e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800196a:	2a06      	cmp	r2, #6
 800196c:	d003      	beq.n	8001976 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	f042 0201 	orr.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001976:	2000      	movs	r0, #0
}
 8001978:	4770      	bx	lr
    return HAL_ERROR;
 800197a:	2001      	movs	r0, #1
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40012c00 	.word	0x40012c00

08001984 <HAL_TIM_OC_DelayElapsedCallback>:
 8001984:	4770      	bx	lr

08001986 <HAL_TIM_IC_CaptureCallback>:
 8001986:	4770      	bx	lr

08001988 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001988:	4770      	bx	lr

0800198a <HAL_TIM_TriggerCallback>:
 800198a:	4770      	bx	lr

0800198c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800198c:	6803      	ldr	r3, [r0, #0]
{
 800198e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001990:	691a      	ldr	r2, [r3, #16]
{
 8001992:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001994:	0791      	lsls	r1, r2, #30
 8001996:	d50e      	bpl.n	80019b6 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	0792      	lsls	r2, r2, #30
 800199c:	d50b      	bpl.n	80019b6 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800199e:	f06f 0202 	mvn.w	r2, #2
 80019a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019a4:	2201      	movs	r2, #1
 80019a6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	079b      	lsls	r3, r3, #30
 80019ac:	d077      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019ae:	f7ff ffea 	bl	8001986 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b2:	2300      	movs	r3, #0
 80019b4:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	0750      	lsls	r0, r2, #29
 80019bc:	d510      	bpl.n	80019e0 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	0751      	lsls	r1, r2, #29
 80019c2:	d50d      	bpl.n	80019e0 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019c4:	f06f 0204 	mvn.w	r2, #4
 80019c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ca:	2202      	movs	r2, #2
 80019cc:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ce:	699b      	ldr	r3, [r3, #24]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019d0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019d2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80019d6:	d068      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80019d8:	f7ff ffd5 	bl	8001986 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019dc:	2300      	movs	r3, #0
 80019de:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	0712      	lsls	r2, r2, #28
 80019e6:	d50f      	bpl.n	8001a08 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	0710      	lsls	r0, r2, #28
 80019ec:	d50c      	bpl.n	8001a08 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019ee:	f06f 0208 	mvn.w	r2, #8
 80019f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019f4:	2204      	movs	r2, #4
 80019f6:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019f8:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019fc:	0799      	lsls	r1, r3, #30
 80019fe:	d05a      	beq.n	8001ab6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a00:	f7ff ffc1 	bl	8001986 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a04:	2300      	movs	r3, #0
 8001a06:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	06d2      	lsls	r2, r2, #27
 8001a0e:	d510      	bpl.n	8001a32 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	06d0      	lsls	r0, r2, #27
 8001a14:	d50d      	bpl.n	8001a32 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a16:	f06f 0210 	mvn.w	r2, #16
 8001a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a20:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a22:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a24:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001a28:	d04b      	beq.n	8001ac2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2a:	f7ff ffac 	bl	8001986 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	07d1      	lsls	r1, r2, #31
 8001a38:	d508      	bpl.n	8001a4c <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	07d2      	lsls	r2, r2, #31
 8001a3e:	d505      	bpl.n	8001a4c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a40:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a44:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a46:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a48:	f002 f9c2 	bl	8003dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	0610      	lsls	r0, r2, #24
 8001a52:	d508      	bpl.n	8001a66 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	0611      	lsls	r1, r2, #24
 8001a58:	d505      	bpl.n	8001a66 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a60:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a62:	f000 f8e4 	bl	8001c2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	0652      	lsls	r2, r2, #25
 8001a6c:	d508      	bpl.n	8001a80 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	0650      	lsls	r0, r2, #25
 8001a72:	d505      	bpl.n	8001a80 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a74:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a7a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001a7c:	f7ff ff85 	bl	800198a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	0691      	lsls	r1, r2, #26
 8001a86:	d522      	bpl.n	8001ace <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	0692      	lsls	r2, r2, #26
 8001a8c:	d51f      	bpl.n	8001ace <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a8e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a92:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a98:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001a9a:	f000 b8c7 	b.w	8001c2c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	f7ff ff71 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff ff70 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
 8001aa8:	e783      	b.n	80019b2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	f7ff ff6b 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7ff ff6a 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ab4:	e792      	b.n	80019dc <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab6:	f7ff ff65 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff ff64 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ac0:	e7a0      	b.n	8001a04 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac2:	f7ff ff5f 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff ff5e 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
 8001acc:	e7af      	b.n	8001a2e <HAL_TIM_IRQHandler+0xa2>
}
 8001ace:	bd10      	pop	{r4, pc}

08001ad0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad0:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001ad2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad4:	4290      	cmp	r0, r2
 8001ad6:	d012      	beq.n	8001afe <TIM_Base_SetConfig+0x2e>
 8001ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001adc:	4290      	cmp	r0, r2
 8001ade:	d00e      	beq.n	8001afe <TIM_Base_SetConfig+0x2e>
 8001ae0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ae4:	d00b      	beq.n	8001afe <TIM_Base_SetConfig+0x2e>
 8001ae6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001aea:	4290      	cmp	r0, r2
 8001aec:	d007      	beq.n	8001afe <TIM_Base_SetConfig+0x2e>
 8001aee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001af2:	4290      	cmp	r0, r2
 8001af4:	d003      	beq.n	8001afe <TIM_Base_SetConfig+0x2e>
 8001af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001afa:	4290      	cmp	r0, r2
 8001afc:	d11d      	bne.n	8001b3a <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001afe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b04:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b06:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <TIM_Base_SetConfig+0x94>)
 8001b08:	4290      	cmp	r0, r2
 8001b0a:	d012      	beq.n	8001b32 <TIM_Base_SetConfig+0x62>
 8001b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b10:	4290      	cmp	r0, r2
 8001b12:	d00e      	beq.n	8001b32 <TIM_Base_SetConfig+0x62>
 8001b14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b18:	d00b      	beq.n	8001b32 <TIM_Base_SetConfig+0x62>
 8001b1a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001b1e:	4290      	cmp	r0, r2
 8001b20:	d007      	beq.n	8001b32 <TIM_Base_SetConfig+0x62>
 8001b22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b26:	4290      	cmp	r0, r2
 8001b28:	d003      	beq.n	8001b32 <TIM_Base_SetConfig+0x62>
 8001b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b2e:	4290      	cmp	r0, r2
 8001b30:	d103      	bne.n	8001b3a <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b32:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b38:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b3a:	694a      	ldr	r2, [r1, #20]
 8001b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b40:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001b42:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b44:	688b      	ldr	r3, [r1, #8]
 8001b46:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b48:	680b      	ldr	r3, [r1, #0]
 8001b4a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <TIM_Base_SetConfig+0x94>)
 8001b4e:	4298      	cmp	r0, r3
 8001b50:	d003      	beq.n	8001b5a <TIM_Base_SetConfig+0x8a>
 8001b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b56:	4298      	cmp	r0, r3
 8001b58:	d101      	bne.n	8001b5e <TIM_Base_SetConfig+0x8e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b5a:	690b      	ldr	r3, [r1, #16]
 8001b5c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	6143      	str	r3, [r0, #20]
}
 8001b62:	4770      	bx	lr
 8001b64:	40012c00 	.word	0x40012c00

08001b68 <HAL_TIM_Base_Init>:
{
 8001b68:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	b330      	cbz	r0, 8001bbc <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b76:	b91b      	cbnz	r3, 8001b80 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001b78:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001b7c:	f002 fa4e 	bl	800401c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b82:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b88:	1d21      	adds	r1, r4, #4
 8001b8a:	f7ff ffa1 	bl	8001ad0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b8e:	2301      	movs	r3, #1
  return HAL_OK;
 8001b90:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b92:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001b9a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001b9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001ba2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001baa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001bb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001bba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	e7fc      	b.n	8001bba <HAL_TIM_Base_Init+0x52>

08001bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bc0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001bc2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001bc6:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	f04f 0002 	mov.w	r0, #2
 8001bce:	d02a      	beq.n	8001c26 <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bd0:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001bd6:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bd8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bda:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bde:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8001be0:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001be2:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be4:	4c10      	ldr	r4, [pc, #64]	; (8001c28 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8001be6:	42a3      	cmp	r3, r4
 8001be8:	d012      	beq.n	8001c10 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8001bea:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8001bee:	42a3      	cmp	r3, r4
 8001bf0:	d00e      	beq.n	8001c10 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8001bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf6:	d00b      	beq.n	8001c10 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8001bf8:	f5a4 3498 	sub.w	r4, r4, #77824	; 0x13000
 8001bfc:	42a3      	cmp	r3, r4
 8001bfe:	d007      	beq.n	8001c10 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8001c00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c04:	42a3      	cmp	r3, r4
 8001c06:	d003      	beq.n	8001c10 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8001c08:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c0c:	42a3      	cmp	r3, r4
 8001c0e:	d104      	bne.n	8001c1a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c10:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c12:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c16:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c18:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c1a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001c1c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c1e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c22:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8001c26:	bd30      	pop	{r4, r5, pc}
 8001c28:	40012c00 	.word	0x40012c00

08001c2c <HAL_TIMEx_CommutCallback>:
 8001c2c:	4770      	bx	lr

08001c2e <HAL_TIMEx_BreakCallback>:
 8001c2e:	4770      	bx	lr

08001c30 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c30:	6803      	ldr	r3, [r0, #0]
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c38:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c3a:	695a      	ldr	r2, [r3, #20]
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c42:	2320      	movs	r3, #32
 8001c44:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001c48:	4770      	bx	lr
	...

08001c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c4c:	b510      	push	{r4, lr}
 8001c4e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c50:	6803      	ldr	r3, [r0, #0]
 8001c52:	68c1      	ldr	r1, [r0, #12]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c5e:	6882      	ldr	r2, [r0, #8]
 8001c60:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001c62:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c64:	4302      	orrs	r2, r0
 8001c66:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001c68:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001c6c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c70:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001c72:	430a      	orrs	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	69a1      	ldr	r1, [r4, #24]
 8001c7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <UART_SetConfig+0x70>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d115      	bne.n	8001cb4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c88:	f7ff fdc2 	bl	8001810 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c8c:	2319      	movs	r3, #25
 8001c8e:	4343      	muls	r3, r0
 8001c90:	6862      	ldr	r2, [r4, #4]
 8001c92:	6820      	ldr	r0, [r4, #0]
 8001c94:	0092      	lsls	r2, r2, #2
 8001c96:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c9a:	2264      	movs	r2, #100	; 0x64
 8001c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ca0:	fb02 3311 	mls	r3, r2, r1, r3
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	3332      	adds	r3, #50	; 0x32
 8001ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cac:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001cb0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8001cb2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cb4:	f7ff fd9c 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 8001cb8:	e7e8      	b.n	8001c8c <UART_SetConfig+0x40>
 8001cba:	bf00      	nop
 8001cbc:	40013800 	.word	0x40013800

08001cc0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	460e      	mov	r6, r1
 8001cc6:	4617      	mov	r7, r2
 8001cc8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	ea36 0303 	bics.w	r3, r6, r3
 8001cd2:	d101      	bne.n	8001cd8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	e014      	b.n	8001d02 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8001cd8:	1c6b      	adds	r3, r5, #1
 8001cda:	d0f7      	beq.n	8001ccc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cdc:	b995      	cbnz	r5, 8001d04 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cde:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001ce0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ce8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001cf8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d04:	f7fe fae2 	bl	80002cc <HAL_GetTick>
 8001d08:	1bc0      	subs	r0, r0, r7
 8001d0a:	4285      	cmp	r5, r0
 8001d0c:	d2dd      	bcs.n	8001cca <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8001d0e:	e7e6      	b.n	8001cde <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08001d10 <HAL_UART_Init>:
{
 8001d10:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001d12:	4604      	mov	r4, r0
 8001d14:	b340      	cbz	r0, 8001d68 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d16:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d1e:	b91b      	cbnz	r3, 8001d28 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001d20:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001d24:	f002 f9e2 	bl	80040ec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d28:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001d2a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d2c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001d30:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d32:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001d34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d38:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001d3a:	f7ff ff87 	bl	8001c4c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d3e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d40:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d50:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d58:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001d5a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d62:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001d66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d68:	2001      	movs	r0, #1
 8001d6a:	e7fc      	b.n	8001d66 <HAL_UART_Init+0x56>

08001d6c <HAL_UART_Transmit>:
{
 8001d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d70:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001d72:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001d76:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001d78:	2b20      	cmp	r3, #32
{
 8001d7a:	460e      	mov	r6, r1
 8001d7c:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001d7e:	d148      	bne.n	8001e12 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8001d80:	2900      	cmp	r1, #0
 8001d82:	d044      	beq.n	8001e0e <HAL_UART_Transmit+0xa2>
 8001d84:	2a00      	cmp	r2, #0
 8001d86:	d042      	beq.n	8001e0e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8001d88:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d040      	beq.n	8001e12 <HAL_UART_Transmit+0xa6>
 8001d90:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d92:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8001d94:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d98:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9a:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d9c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001da0:	f7fe fa94 	bl	80002cc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001da6:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8001dac:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dae:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db0:	d103      	bne.n	8001dba <HAL_UART_Transmit+0x4e>
 8001db2:	6923      	ldr	r3, [r4, #16]
 8001db4:	b90b      	cbnz	r3, 8001dba <HAL_UART_Transmit+0x4e>
 8001db6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001db8:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001dc0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	b953      	cbnz	r3, 8001ddc <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	4642      	mov	r2, r8
 8001dca:	2140      	movs	r1, #64	; 0x40
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff ff77 	bl	8001cc0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001dd2:	b950      	cbnz	r0, 8001dea <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001dda:	e007      	b.n	8001dec <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ddc:	464b      	mov	r3, r9
 8001dde:	4642      	mov	r2, r8
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	4620      	mov	r0, r4
 8001de4:	f7ff ff6c 	bl	8001cc0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001de8:	b110      	cbz	r0, 8001df0 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001dea:	2003      	movs	r0, #3
}
 8001dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8001df0:	6822      	ldr	r2, [r4, #0]
 8001df2:	b94e      	cbnz	r6, 8001e08 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001df4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dfc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001dfe:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001e00:	3901      	subs	r1, #1
 8001e02:	b289      	uxth	r1, r1
 8001e04:	84e1      	strh	r1, [r4, #38]	; 0x26
 8001e06:	e7db      	b.n	8001dc0 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e08:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001e0c:	e7f6      	b.n	8001dfc <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001e0e:	2001      	movs	r0, #1
 8001e10:	e7ec      	b.n	8001dec <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001e12:	2002      	movs	r0, #2
 8001e14:	e7ea      	b.n	8001dec <HAL_UART_Transmit+0x80>

08001e16 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e16:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d120      	bne.n	8001e60 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001e1e:	b1e9      	cbz	r1, 8001e5c <HAL_UART_Receive_IT+0x46>
 8001e20:	b1e2      	cbz	r2, 8001e5c <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001e22:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d01a      	beq.n	8001e60 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001e2a:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001e2c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2e:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e30:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e32:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e34:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e38:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8001e3a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8001e3e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e40:	68d1      	ldr	r1, [r2, #12]
    return HAL_OK;
 8001e42:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001e44:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001e48:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001e4a:	6951      	ldr	r1, [r2, #20]
 8001e4c:	f041 0101 	orr.w	r1, r1, #1
 8001e50:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001e52:	68d1      	ldr	r1, [r2, #12]
 8001e54:	f041 0120 	orr.w	r1, r1, #32
 8001e58:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001e5a:	4770      	bx	lr
      return HAL_ERROR;
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	4770      	bx	lr
    return HAL_BUSY;
 8001e60:	2002      	movs	r0, #2
}
 8001e62:	4770      	bx	lr

08001e64 <HAL_UART_TxCpltCallback>:
 8001e64:	4770      	bx	lr

08001e66 <UART_Receive_IT>:
{
 8001e66:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e68:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001e6c:	2b22      	cmp	r3, #34	; 0x22
 8001e6e:	d133      	bne.n	8001ed8 <UART_Receive_IT+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e70:	6881      	ldr	r1, [r0, #8]
 8001e72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e74:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001e78:	6802      	ldr	r2, [r0, #0]
 8001e7a:	d120      	bne.n	8001ebe <UART_Receive_IT+0x58>
 8001e7c:	6901      	ldr	r1, [r0, #16]
 8001e7e:	bb09      	cbnz	r1, 8001ec4 <UART_Receive_IT+0x5e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e80:	6852      	ldr	r2, [r2, #4]
 8001e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e86:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8001e8a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8001e8c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001e8e:	3c01      	subs	r4, #1
 8001e90:	b2a4      	uxth	r4, r4
 8001e92:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001e94:	b98c      	cbnz	r4, 8001eba <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e96:	6803      	ldr	r3, [r0, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	f022 0220 	bic.w	r2, r2, #32
 8001e9e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001eb6:	f001 ff5f 	bl	8003d78 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001eba:	2000      	movs	r0, #0
 8001ebc:	e00d      	b.n	8001eda <UART_Receive_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ebe:	b939      	cbnz	r1, 8001ed0 <UART_Receive_IT+0x6a>
 8001ec0:	6901      	ldr	r1, [r0, #16]
 8001ec2:	b929      	cbnz	r1, 8001ed0 <UART_Receive_IT+0x6a>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ec4:	6852      	ldr	r2, [r2, #4]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8001eca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ecc:	3301      	adds	r3, #1
 8001ece:	e7dc      	b.n	8001e8a <UART_Receive_IT+0x24>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ed0:	6852      	ldr	r2, [r2, #4]
 8001ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ed6:	e7f7      	b.n	8001ec8 <UART_Receive_IT+0x62>
    return HAL_BUSY;
 8001ed8:	2002      	movs	r0, #2
}
 8001eda:	bd10      	pop	{r4, pc}

08001edc <HAL_UART_ErrorCallback>:
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ee0:	6803      	ldr	r3, [r0, #0]
{
 8001ee2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ee4:	681a      	ldr	r2, [r3, #0]
{
 8001ee6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001ee8:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001eea:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001eec:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001eee:	d107      	bne.n	8001f00 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ef0:	0696      	lsls	r6, r2, #26
 8001ef2:	d55c      	bpl.n	8001fae <HAL_UART_IRQHandler+0xce>
 8001ef4:	068d      	lsls	r5, r1, #26
 8001ef6:	d55a      	bpl.n	8001fae <HAL_UART_IRQHandler+0xce>
}
 8001ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001efc:	f7ff bfb3 	b.w	8001e66 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f00:	f005 0001 	and.w	r0, r5, #1
 8001f04:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8001f08:	4305      	orrs	r5, r0
 8001f0a:	d050      	beq.n	8001fae <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f0c:	07d6      	lsls	r6, r2, #31
 8001f0e:	d505      	bpl.n	8001f1c <HAL_UART_IRQHandler+0x3c>
 8001f10:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f12:	bf42      	ittt	mi
 8001f14:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001f16:	f043 0301 	orrmi.w	r3, r3, #1
 8001f1a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f1c:	0753      	lsls	r3, r2, #29
 8001f1e:	d504      	bpl.n	8001f2a <HAL_UART_IRQHandler+0x4a>
 8001f20:	b118      	cbz	r0, 8001f2a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f2a:	0796      	lsls	r6, r2, #30
 8001f2c:	d504      	bpl.n	8001f38 <HAL_UART_IRQHandler+0x58>
 8001f2e:	b118      	cbz	r0, 8001f38 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f38:	0715      	lsls	r5, r2, #28
 8001f3a:	d507      	bpl.n	8001f4c <HAL_UART_IRQHandler+0x6c>
 8001f3c:	f001 0320 	and.w	r3, r1, #32
 8001f40:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f42:	bf1e      	ittt	ne
 8001f44:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 8001f46:	f043 0308 	orrne.w	r3, r3, #8
 8001f4a:	63e3      	strne	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f4e:	b34b      	cbz	r3, 8001fa4 <HAL_UART_IRQHandler+0xc4>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f50:	0690      	lsls	r0, r2, #26
 8001f52:	d504      	bpl.n	8001f5e <HAL_UART_IRQHandler+0x7e>
 8001f54:	0689      	lsls	r1, r1, #26
 8001f56:	d502      	bpl.n	8001f5e <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7ff ff84 	bl	8001e66 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f5e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001f60:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f62:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f64:	6be5      	ldr	r5, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f6a:	f005 0508 	and.w	r5, r5, #8
 8001f6e:	431d      	orrs	r5, r3
 8001f70:	d019      	beq.n	8001fa6 <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8001f72:	f7ff fe5d 	bl	8001c30 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	0652      	lsls	r2, r2, #25
 8001f7c:	d50f      	bpl.n	8001f9e <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f7e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001f80:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f86:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001f88:	b148      	cbz	r0, 8001f9e <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_UART_IRQHandler+0x140>)
 8001f8c:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f8e:	f7fe fa1d 	bl	80003cc <HAL_DMA_Abort_IT>
 8001f92:	b138      	cbz	r0, 8001fa4 <HAL_UART_IRQHandler+0xc4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f94:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f9c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff ff9c 	bl	8001edc <HAL_UART_ErrorCallback>
}
 8001fa4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001fa6:	f7ff ff99 	bl	8001edc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001faa:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001fac:	e7fa      	b.n	8001fa4 <HAL_UART_IRQHandler+0xc4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fae:	0616      	lsls	r6, r2, #24
 8001fb0:	d526      	bpl.n	8002000 <HAL_UART_IRQHandler+0x120>
 8001fb2:	060d      	lsls	r5, r1, #24
 8001fb4:	d524      	bpl.n	8002000 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001fb6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001fba:	2a21      	cmp	r2, #33	; 0x21
 8001fbc:	d1f2      	bne.n	8001fa4 <HAL_UART_IRQHandler+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fbe:	68a1      	ldr	r1, [r4, #8]
 8001fc0:	6a22      	ldr	r2, [r4, #32]
 8001fc2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001fc6:	d116      	bne.n	8001ff6 <HAL_UART_IRQHandler+0x116>
 8001fc8:	6921      	ldr	r1, [r4, #16]
 8001fca:	b9a1      	cbnz	r1, 8001ff6 <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001fcc:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001fd0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001fd4:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001fd6:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001fd8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001fda:	3a01      	subs	r2, #1
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	d1df      	bne.n	8001fa4 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fea:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	e7d6      	b.n	8001fa4 <HAL_UART_IRQHandler+0xc4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001ff6:	1c51      	adds	r1, r2, #1
 8001ff8:	6221      	str	r1, [r4, #32]
 8001ffa:	7812      	ldrb	r2, [r2, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	e7eb      	b.n	8001fd8 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002000:	0650      	lsls	r0, r2, #25
 8002002:	d5cf      	bpl.n	8001fa4 <HAL_UART_IRQHandler+0xc4>
 8002004:	064a      	lsls	r2, r1, #25
 8002006:	d5cd      	bpl.n	8001fa4 <HAL_UART_IRQHandler+0xc4>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002008:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800200a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800200c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002010:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002012:	2320      	movs	r3, #32
 8002014:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002018:	f7ff ff24 	bl	8001e64 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800201c:	e7c2      	b.n	8001fa4 <HAL_UART_IRQHandler+0xc4>
 800201e:	bf00      	nop
 8002020:	08002025 	.word	0x08002025

08002024 <UART_DMAAbortOnError>:
{
 8002024:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002026:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002028:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800202a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800202c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800202e:	f7ff ff55 	bl	8001edc <HAL_UART_ErrorCallback>
}
 8002032:	bd08      	pop	{r3, pc}

08002034 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002034:	b084      	sub	sp, #16
 8002036:	a801      	add	r0, sp, #4
 8002038:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800203c:	b004      	add	sp, #16
 800203e:	2000      	movs	r0, #0
 8002040:	4770      	bx	lr

08002042 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002042:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002044:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8002048:	2000      	movs	r0, #0
 800204a:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800204e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8002052:	4770      	bx	lr

08002054 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002054:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002058:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800205c:	045b      	lsls	r3, r3, #17
 800205e:	0c5b      	lsrs	r3, r3, #17
 8002060:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002064:	2000      	movs	r0, #0
 8002066:	4770      	bx	lr

08002068 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002068:	2000      	movs	r0, #0
 800206a:	4770      	bx	lr

0800206c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800206c:	b084      	sub	sp, #16
 800206e:	b510      	push	{r4, lr}
 8002070:	4604      	mov	r4, r0
 8002072:	a803      	add	r0, sp, #12
 8002074:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002078:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800207a:	2301      	movs	r3, #1
 800207c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8002080:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002084:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002088:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 800208c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002090:	b004      	add	sp, #16
 8002092:	4770      	bx	lr

08002094 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002094:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002096:	780d      	ldrb	r5, [r1, #0]
{
 8002098:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800209a:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800209e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80020a0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80020a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020a8:	0412      	lsls	r2, r2, #16
 80020aa:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80020ac:	2803      	cmp	r0, #3
 80020ae:	d84f      	bhi.n	8002150 <USB_ActivateEndpoint+0xbc>
 80020b0:	e8df f000 	tbb	[pc, r0]
 80020b4:	47494b02 	.word	0x47494b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80020b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80020bc:	f248 0480 	movw	r4, #32896	; 0x8080
 80020c0:	4322      	orrs	r2, r4
 80020c2:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80020c6:	780e      	ldrb	r6, [r1, #0]
 80020c8:	4d9b      	ldr	r5, [pc, #620]	; (8002338 <USB_ActivateEndpoint+0x2a4>)
 80020ca:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80020ce:	b292      	uxth	r2, r2
 80020d0:	402a      	ands	r2, r5
 80020d2:	4332      	orrs	r2, r6
 80020d4:	4322      	orrs	r2, r4
 80020d6:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 80020da:	7b0c      	ldrb	r4, [r1, #12]
 80020dc:	780a      	ldrb	r2, [r1, #0]
 80020de:	2c00      	cmp	r4, #0
 80020e0:	f040 8089 	bne.w	80021f6 <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 80020e4:	88cc      	ldrh	r4, [r1, #6]
 80020e6:	784e      	ldrb	r6, [r1, #1]
 80020e8:	0864      	lsrs	r4, r4, #1
 80020ea:	0064      	lsls	r4, r4, #1
 80020ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80020f0:	b386      	cbz	r6, 8002154 <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80020f2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80020f6:	b2b6      	uxth	r6, r6
 80020f8:	4432      	add	r2, r6
 80020fa:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020fe:	780c      	ldrb	r4, [r1, #0]
 8002100:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002104:	0652      	lsls	r2, r2, #25
 8002106:	d509      	bpl.n	800211c <USB_ActivateEndpoint+0x88>
 8002108:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800210c:	b292      	uxth	r2, r2
 800210e:	402a      	ands	r2, r5
 8002110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002114:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002118:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800211c:	78ca      	ldrb	r2, [r1, #3]
 800211e:	780c      	ldrb	r4, [r1, #0]
 8002120:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002122:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002126:	4985      	ldr	r1, [pc, #532]	; (800233c <USB_ActivateEndpoint+0x2a8>)
 8002128:	b292      	uxth	r2, r2
 800212a:	ea02 0201 	and.w	r2, r2, r1
 800212e:	bf18      	it	ne
 8002130:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002134:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002138:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800213c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8002140:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8002142:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8002146:	2000      	movs	r0, #0
      break;
 8002148:	e7b8      	b.n	80020bc <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800214a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 800214e:	e7fa      	b.n	8002146 <USB_ActivateEndpoint+0xb2>
      ret = HAL_ERROR;
 8002150:	2001      	movs	r0, #1
 8002152:	e7b3      	b.n	80020bc <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002154:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002158:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800215a:	b2ad      	uxth	r5, r5
 800215c:	442a      	add	r2, r5
 800215e:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002162:	780a      	ldrb	r2, [r1, #0]
 8002164:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8002168:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800216c:	b2a4      	uxth	r4, r4
 800216e:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002172:	bb7e      	cbnz	r6, 80021d4 <USB_ActivateEndpoint+0x140>
 8002174:	5b15      	ldrh	r5, [r2, r4]
 8002176:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800217a:	042d      	lsls	r5, r5, #16
 800217c:	0c2d      	lsrs	r5, r5, #16
 800217e:	5315      	strh	r5, [r2, r4]
 8002180:	5b15      	ldrh	r5, [r2, r4]
 8002182:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8002186:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800218a:	b2ad      	uxth	r5, r5
 800218c:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800218e:	780c      	ldrb	r4, [r1, #0]
 8002190:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002194:	0455      	lsls	r5, r2, #17
 8002196:	d50d      	bpl.n	80021b4 <USB_ActivateEndpoint+0x120>
 8002198:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800219c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80021a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021a4:	0412      	lsls	r2, r2, #16
 80021a6:	0c12      	lsrs	r2, r2, #16
 80021a8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80021ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021b0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80021b4:	7809      	ldrb	r1, [r1, #0]
 80021b6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80021ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021c2:	0412      	lsls	r2, r2, #16
 80021c4:	0c12      	lsrs	r2, r2, #16
 80021c6:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80021ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021d2:	e071      	b.n	80022b8 <USB_ActivateEndpoint+0x224>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80021d4:	2e3e      	cmp	r6, #62	; 0x3e
 80021d6:	d805      	bhi.n	80021e4 <USB_ActivateEndpoint+0x150>
 80021d8:	0875      	lsrs	r5, r6, #1
 80021da:	07f7      	lsls	r7, r6, #31
 80021dc:	bf48      	it	mi
 80021de:	3501      	addmi	r5, #1
 80021e0:	02ad      	lsls	r5, r5, #10
 80021e2:	e7d2      	b.n	800218a <USB_ActivateEndpoint+0xf6>
 80021e4:	0977      	lsrs	r7, r6, #5
 80021e6:	4d56      	ldr	r5, [pc, #344]	; (8002340 <USB_ActivateEndpoint+0x2ac>)
 80021e8:	06f6      	lsls	r6, r6, #27
 80021ea:	bf08      	it	eq
 80021ec:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80021f0:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80021f4:	e7c9      	b.n	800218a <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80021f6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80021fa:	b2a4      	uxth	r4, r4
 80021fc:	402c      	ands	r4, r5
 80021fe:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8002202:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002206:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800220a:	780a      	ldrb	r2, [r1, #0]
 800220c:	890c      	ldrh	r4, [r1, #8]
 800220e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002212:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002216:	0864      	lsrs	r4, r4, #1
 8002218:	b2b6      	uxth	r6, r6
 800221a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800221e:	0064      	lsls	r4, r4, #1
 8002220:	5394      	strh	r4, [r2, r6]
 8002222:	780a      	ldrb	r2, [r1, #0]
 8002224:	894c      	ldrh	r4, [r1, #10]
 8002226:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800222a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800222e:	0864      	lsrs	r4, r4, #1
 8002230:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8002234:	0064      	lsls	r4, r4, #1
 8002236:	b2b6      	uxth	r6, r6
 8002238:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 800223a:	784a      	ldrb	r2, [r1, #1]
 800223c:	780c      	ldrb	r4, [r1, #0]
 800223e:	2a00      	cmp	r2, #0
 8002240:	d13d      	bne.n	80022be <USB_ActivateEndpoint+0x22a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002242:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002246:	0452      	lsls	r2, r2, #17
 8002248:	d509      	bpl.n	800225e <USB_ActivateEndpoint+0x1ca>
 800224a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800224e:	b292      	uxth	r2, r2
 8002250:	402a      	ands	r2, r5
 8002252:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800225a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800225e:	780c      	ldrb	r4, [r1, #0]
 8002260:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002264:	0657      	lsls	r7, r2, #25
 8002266:	d50d      	bpl.n	8002284 <USB_ActivateEndpoint+0x1f0>
 8002268:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800226c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002270:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002274:	0412      	lsls	r2, r2, #16
 8002276:	0c12      	lsrs	r2, r2, #16
 8002278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800227c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002280:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002284:	f248 0480 	movw	r4, #32896	; 0x8080
 8002288:	780d      	ldrb	r5, [r1, #0]
 800228a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800228e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002292:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002296:	0412      	lsls	r2, r2, #16
 8002298:	0c12      	lsrs	r2, r2, #16
 800229a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800229e:	4322      	orrs	r2, r4
 80022a0:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80022a4:	7809      	ldrb	r1, [r1, #0]
 80022a6:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80022aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80022ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b2:	0412      	lsls	r2, r2, #16
 80022b4:	0c12      	lsrs	r2, r2, #16
 80022b6:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80022b8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80022bc:	e740      	b.n	8002140 <USB_ActivateEndpoint+0xac>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80022be:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022c2:	0456      	lsls	r6, r2, #17
 80022c4:	d509      	bpl.n	80022da <USB_ActivateEndpoint+0x246>
 80022c6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022ca:	b292      	uxth	r2, r2
 80022cc:	402a      	ands	r2, r5
 80022ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80022d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022d6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80022da:	780c      	ldrb	r4, [r1, #0]
 80022dc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022e0:	0652      	lsls	r2, r2, #25
 80022e2:	d50d      	bpl.n	8002300 <USB_ActivateEndpoint+0x26c>
 80022e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80022e8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80022ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022f0:	0412      	lsls	r2, r2, #16
 80022f2:	0c12      	lsrs	r2, r2, #16
 80022f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80022fc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8002300:	78ca      	ldrb	r2, [r1, #3]
 8002302:	780c      	ldrb	r4, [r1, #0]
 8002304:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002306:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800230a:	4d0c      	ldr	r5, [pc, #48]	; (800233c <USB_ActivateEndpoint+0x2a8>)
 800230c:	b292      	uxth	r2, r2
 800230e:	ea02 0205 	and.w	r2, r2, r5
 8002312:	bf18      	it	ne
 8002314:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800231c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002320:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002324:	7809      	ldrb	r1, [r1, #0]
 8002326:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800232a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800232e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002332:	0412      	lsls	r2, r2, #16
 8002334:	0c12      	lsrs	r2, r2, #16
 8002336:	e748      	b.n	80021ca <USB_ActivateEndpoint+0x136>
 8002338:	ffff8f8f 	.word	0xffff8f8f
 800233c:	ffff8fbf 	.word	0xffff8fbf
 8002340:	ffff8000 	.word	0xffff8000

08002344 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002344:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8002346:	7b0c      	ldrb	r4, [r1, #12]
 8002348:	784b      	ldrb	r3, [r1, #1]
 800234a:	780a      	ldrb	r2, [r1, #0]
 800234c:	2c00      	cmp	r4, #0
 800234e:	d13d      	bne.n	80023cc <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 8002350:	b313      	cbz	r3, 8002398 <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002352:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002356:	065c      	lsls	r4, r3, #25
 8002358:	d50d      	bpl.n	8002376 <USB_DeactivateEndpoint+0x32>
 800235a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800235e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	0c1b      	lsrs	r3, r3, #16
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002372:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002376:	780a      	ldrb	r2, [r1, #0]
 8002378:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800237c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	0c1b      	lsrs	r3, r3, #16
 8002388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002394:	2000      	movs	r0, #0
 8002396:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002398:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800239c:	045b      	lsls	r3, r3, #17
 800239e:	d50d      	bpl.n	80023bc <USB_DeactivateEndpoint+0x78>
 80023a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ac:	041b      	lsls	r3, r3, #16
 80023ae:	0c1b      	lsrs	r3, r3, #16
 80023b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80023bc:	780a      	ldrb	r2, [r1, #0]
 80023be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	e7db      	b.n	8002384 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d14e      	bne.n	800246e <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023d4:	045c      	lsls	r4, r3, #17
 80023d6:	d50d      	bpl.n	80023f4 <USB_DeactivateEndpoint+0xb0>
 80023d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e4:	041b      	lsls	r3, r3, #16
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023f4:	780a      	ldrb	r2, [r1, #0]
 80023f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80023fa:	065b      	lsls	r3, r3, #25
 80023fc:	d50d      	bpl.n	800241a <USB_DeactivateEndpoint+0xd6>
 80023fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002412:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002416:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800241a:	780a      	ldrb	r2, [r1, #0]
 800241c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	0c1b      	lsrs	r3, r3, #16
 800242c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002430:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002434:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002438:	f248 0280 	movw	r2, #32896	; 0x8080
 800243c:	780c      	ldrb	r4, [r1, #0]
 800243e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	4313      	orrs	r3, r2
 8002450:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002454:	7809      	ldrb	r1, [r1, #0]
 8002456:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800245a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800245e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	4313      	orrs	r3, r2
 8002468:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800246c:	e792      	b.n	8002394 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800246e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002472:	045c      	lsls	r4, r3, #17
 8002474:	d50d      	bpl.n	8002492 <USB_DeactivateEndpoint+0x14e>
 8002476:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800247a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	041b      	lsls	r3, r3, #16
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800248a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002492:	780a      	ldrb	r2, [r1, #0]
 8002494:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002498:	065b      	lsls	r3, r3, #25
 800249a:	d50d      	bpl.n	80024b8 <USB_DeactivateEndpoint+0x174>
 800249c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80024b8:	780a      	ldrb	r2, [r1, #0]
 80024ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80024d6:	f248 0280 	movw	r2, #32896	; 0x8080
 80024da:	780c      	ldrb	r4, [r1, #0]
 80024dc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80024e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024f2:	7809      	ldrb	r1, [r1, #0]
 80024f4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80024f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002500:	e7af      	b.n	8002462 <USB_DeactivateEndpoint+0x11e>

08002502 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002502:	784b      	ldrb	r3, [r1, #1]
 8002504:	780a      	ldrb	r2, [r1, #0]
 8002506:	b18b      	cbz	r3, 800252c <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002508:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800250c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002514:	041b      	lsls	r3, r3, #16
 8002516:	0c1b      	lsrs	r3, r3, #16
 8002518:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800251c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002524:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002528:	2000      	movs	r0, #0
 800252a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800252c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	0c1b      	lsrs	r3, r3, #16
 800253c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002540:	e7ec      	b.n	800251c <USB_EPSetStall+0x1a>

08002542 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002542:	7b0b      	ldrb	r3, [r1, #12]
 8002544:	bb43      	cbnz	r3, 8002598 <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 8002546:	784b      	ldrb	r3, [r1, #1]
 8002548:	780a      	ldrb	r2, [r1, #0]
 800254a:	b33b      	cbz	r3, 800259c <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800254c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002550:	065b      	lsls	r3, r3, #25
 8002552:	d50d      	bpl.n	8002570 <USB_EPClearStall+0x2e>
 8002554:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	0c1b      	lsrs	r3, r3, #16
 8002564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002568:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800256c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002570:	78cb      	ldrb	r3, [r1, #3]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d010      	beq.n	8002598 <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002576:	780a      	ldrb	r2, [r1, #0]
 8002578:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800258c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002594:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002598:	2000      	movs	r0, #0
 800259a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800259c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025a0:	045b      	lsls	r3, r3, #17
 80025a2:	d50d      	bpl.n	80025c0 <USB_EPClearStall+0x7e>
 80025a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80025c0:	780a      	ldrb	r2, [r1, #0]
 80025c2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80025d6:	e7d9      	b.n	800258c <USB_EPClearStall+0x4a>

080025d8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80025d8:	b911      	cbnz	r1, 80025e0 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80025e0:	2000      	movs	r0, #0
 80025e2:	4770      	bx	lr

080025e4 <USB_DevConnect>:
 80025e4:	2000      	movs	r0, #0
 80025e6:	4770      	bx	lr

080025e8 <USB_DevDisconnect>:
 80025e8:	2000      	movs	r0, #0
 80025ea:	4770      	bx	lr

080025ec <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80025ec:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80025f0:	b280      	uxth	r0, r0
 80025f2:	4770      	bx	lr

080025f4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80025f4:	2000      	movs	r0, #0
 80025f6:	4770      	bx	lr

080025f8 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80025f8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80025fc:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80025fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002602:	085b      	lsrs	r3, r3, #1
 8002604:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8002608:	429a      	cmp	r2, r3
 800260a:	d100      	bne.n	800260e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800260c:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800260e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8002612:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8002616:	e7f7      	b.n	8002608 <USB_WritePMA+0x10>

08002618 <USB_EPStartXfer>:
{
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 800261c:	7849      	ldrb	r1, [r1, #1]
{
 800261e:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8002620:	2901      	cmp	r1, #1
 8002622:	7b2a      	ldrb	r2, [r5, #12]
 8002624:	f040 81a1 	bne.w	800296a <USB_EPStartXfer+0x352>
    if (ep->xfer_len > ep->maxpacket)
 8002628:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800262c:	69ae      	ldr	r6, [r5, #24]
 800262e:	6969      	ldr	r1, [r5, #20]
 8002630:	4566      	cmp	r6, ip
 8002632:	bf28      	it	cs
 8002634:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 8002636:	bb02      	cbnz	r2, 800267a <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002638:	b2b6      	uxth	r6, r6
 800263a:	88ea      	ldrh	r2, [r5, #6]
 800263c:	4633      	mov	r3, r6
 800263e:	f7ff ffdb 	bl	80025f8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002642:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002646:	7829      	ldrb	r1, [r5, #0]
 8002648:	b290      	uxth	r0, r2
 800264a:	f204 4204 	addw	r2, r4, #1028	; 0x404
 800264e:	0109      	lsls	r1, r1, #4
 8002650:	4402      	add	r2, r0
 8002652:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002654:	782a      	ldrb	r2, [r5, #0]
 8002656:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800265a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800265e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002662:	041b      	lsls	r3, r3, #16
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 800266a:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800266c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002674:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8002678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 800267a:	78eb      	ldrb	r3, [r5, #3]
 800267c:	782f      	ldrb	r7, [r5, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	f040 8138 	bne.w	80028f4 <USB_EPStartXfer+0x2dc>
        if (ep->xfer_len_db > ep->maxpacket)
 8002684:	6a2b      	ldr	r3, [r5, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002686:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800268a:	459c      	cmp	ip, r3
 800268c:	f080 811a 	bcs.w	80028c4 <USB_EPStartXfer+0x2ac>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8002690:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002694:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002698:	0412      	lsls	r2, r2, #16
 800269a:	0c12      	lsrs	r2, r2, #16
 800269c:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80026a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026a4:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80026a8:	782a      	ldrb	r2, [r5, #0]
          ep->xfer_len_db -= len;
 80026aa:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80026ac:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 80026b0:	622b      	str	r3, [r5, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80026b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80026b6:	b2b3      	uxth	r3, r6
 80026b8:	7868      	ldrb	r0, [r5, #1]
 80026ba:	f000 8083 	beq.w	80027c4 <USB_EPStartXfer+0x1ac>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80026be:	2800      	cmp	r0, #0
 80026c0:	d152      	bne.n	8002768 <USB_EPStartXfer+0x150>
 80026c2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80026c6:	f204 470c 	addw	r7, r4, #1036	; 0x40c
 80026ca:	b280      	uxth	r0, r0
 80026cc:	4438      	add	r0, r7
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	2e00      	cmp	r6, #0
 80026d2:	d136      	bne.n	8002742 <USB_EPStartXfer+0x12a>
 80026d4:	5a87      	ldrh	r7, [r0, r2]
 80026d6:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80026da:	043f      	lsls	r7, r7, #16
 80026dc:	0c3f      	lsrs	r7, r7, #16
 80026de:	5287      	strh	r7, [r0, r2]
 80026e0:	5a87      	ldrh	r7, [r0, r2]
 80026e2:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 80026e6:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 80026ea:	b2bf      	uxth	r7, r7
 80026ec:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026ee:	4620      	mov	r0, r4
 80026f0:	896a      	ldrh	r2, [r5, #10]
 80026f2:	f7ff ff81 	bl	80025f8 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80026f6:	6a2a      	ldr	r2, [r5, #32]
 80026f8:	692b      	ldr	r3, [r5, #16]
            ep->xfer_buff += len;
 80026fa:	6969      	ldr	r1, [r5, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80026fc:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80026fe:	bf8a      	itet	hi
 8002700:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8002702:	2300      	movls	r3, #0
 8002704:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002706:	7868      	ldrb	r0, [r5, #1]
            ep->xfer_buff += len;
 8002708:	4431      	add	r1, r6
 800270a:	622b      	str	r3, [r5, #32]
 800270c:	6169      	str	r1, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800270e:	b293      	uxth	r3, r2
 8002710:	2800      	cmp	r0, #0
 8002712:	d14b      	bne.n	80027ac <USB_EPStartXfer+0x194>
 8002714:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002718:	782e      	ldrb	r6, [r5, #0]
 800271a:	b280      	uxth	r0, r0
 800271c:	f204 4704 	addw	r7, r4, #1028	; 0x404
 8002720:	0136      	lsls	r6, r6, #4
 8002722:	4438      	add	r0, r7
 8002724:	bb5a      	cbnz	r2, 800277e <USB_EPStartXfer+0x166>
 8002726:	5a32      	ldrh	r2, [r6, r0]
 8002728:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800272c:	0412      	lsls	r2, r2, #16
 800272e:	0c12      	lsrs	r2, r2, #16
 8002730:	5232      	strh	r2, [r6, r0]
 8002732:	5a32      	ldrh	r2, [r6, r0]
 8002734:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002738:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800273c:	b292      	uxth	r2, r2
 800273e:	5232      	strh	r2, [r6, r0]
 8002740:	e026      	b.n	8002790 <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002742:	2e3e      	cmp	r6, #62	; 0x3e
 8002744:	d806      	bhi.n	8002754 <USB_EPStartXfer+0x13c>
 8002746:	0877      	lsrs	r7, r6, #1
 8002748:	f016 0f01 	tst.w	r6, #1
 800274c:	bf18      	it	ne
 800274e:	3701      	addne	r7, #1
 8002750:	02bf      	lsls	r7, r7, #10
 8002752:	e7ca      	b.n	80026ea <USB_EPStartXfer+0xd2>
 8002754:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8002758:	06f7      	lsls	r7, r6, #27
 800275a:	4fa3      	ldr	r7, [pc, #652]	; (80029e8 <USB_EPStartXfer+0x3d0>)
 800275c:	bf08      	it	eq
 800275e:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002762:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8002766:	e7c0      	b.n	80026ea <USB_EPStartXfer+0xd2>
 8002768:	2801      	cmp	r0, #1
 800276a:	d1c0      	bne.n	80026ee <USB_EPStartXfer+0xd6>
 800276c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002770:	0112      	lsls	r2, r2, #4
 8002772:	b287      	uxth	r7, r0
 8002774:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8002778:	4438      	add	r0, r7
 800277a:	5283      	strh	r3, [r0, r2]
 800277c:	e7b7      	b.n	80026ee <USB_EPStartXfer+0xd6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800277e:	2a3e      	cmp	r2, #62	; 0x3e
 8002780:	d80b      	bhi.n	800279a <USB_EPStartXfer+0x182>
 8002782:	0857      	lsrs	r7, r2, #1
 8002784:	07d2      	lsls	r2, r2, #31
 8002786:	bf48      	it	mi
 8002788:	3701      	addmi	r7, #1
 800278a:	02bf      	lsls	r7, r7, #10
 800278c:	b2bf      	uxth	r7, r7
 800278e:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002790:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002792:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002794:	f7ff ff30 	bl	80025f8 <USB_WritePMA>
 8002798:	e75c      	b.n	8002654 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800279a:	0957      	lsrs	r7, r2, #5
 800279c:	06d2      	lsls	r2, r2, #27
 800279e:	4a92      	ldr	r2, [pc, #584]	; (80029e8 <USB_EPStartXfer+0x3d0>)
 80027a0:	bf08      	it	eq
 80027a2:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80027a6:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80027aa:	e7c7      	b.n	800273c <USB_EPStartXfer+0x124>
 80027ac:	2801      	cmp	r0, #1
 80027ae:	d1ef      	bne.n	8002790 <USB_EPStartXfer+0x178>
 80027b0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80027b4:	7828      	ldrb	r0, [r5, #0]
 80027b6:	b296      	uxth	r6, r2
 80027b8:	f204 4204 	addw	r2, r4, #1028	; 0x404
 80027bc:	0100      	lsls	r0, r0, #4
 80027be:	4432      	add	r2, r6
 80027c0:	5283      	strh	r3, [r0, r2]
 80027c2:	e7e5      	b.n	8002790 <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d152      	bne.n	800286e <USB_EPStartXfer+0x256>
 80027c8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80027cc:	f204 4704 	addw	r7, r4, #1028	; 0x404
 80027d0:	b280      	uxth	r0, r0
 80027d2:	4438      	add	r0, r7
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	2e00      	cmp	r6, #0
 80027d8:	d136      	bne.n	8002848 <USB_EPStartXfer+0x230>
 80027da:	5a87      	ldrh	r7, [r0, r2]
 80027dc:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80027e0:	043f      	lsls	r7, r7, #16
 80027e2:	0c3f      	lsrs	r7, r7, #16
 80027e4:	5287      	strh	r7, [r0, r2]
 80027e6:	5a87      	ldrh	r7, [r0, r2]
 80027e8:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 80027ec:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 80027f0:	b2bf      	uxth	r7, r7
 80027f2:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80027f4:	4620      	mov	r0, r4
 80027f6:	892a      	ldrh	r2, [r5, #8]
 80027f8:	f7ff fefe 	bl	80025f8 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80027fc:	6a2a      	ldr	r2, [r5, #32]
 80027fe:	692b      	ldr	r3, [r5, #16]
            ep->xfer_buff += len;
 8002800:	6969      	ldr	r1, [r5, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002802:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8002804:	bf8a      	itet	hi
 8002806:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8002808:	2300      	movls	r3, #0
 800280a:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800280c:	7868      	ldrb	r0, [r5, #1]
            ep->xfer_buff += len;
 800280e:	4431      	add	r1, r6
 8002810:	622b      	str	r3, [r5, #32]
 8002812:	6169      	str	r1, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002814:	b293      	uxth	r3, r2
 8002816:	2800      	cmp	r0, #0
 8002818:	d148      	bne.n	80028ac <USB_EPStartXfer+0x294>
 800281a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 800281e:	782e      	ldrb	r6, [r5, #0]
 8002820:	b280      	uxth	r0, r0
 8002822:	f204 470c 	addw	r7, r4, #1036	; 0x40c
 8002826:	0136      	lsls	r6, r6, #4
 8002828:	4438      	add	r0, r7
 800282a:	bb5a      	cbnz	r2, 8002884 <USB_EPStartXfer+0x26c>
 800282c:	5a32      	ldrh	r2, [r6, r0]
 800282e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002832:	0412      	lsls	r2, r2, #16
 8002834:	0c12      	lsrs	r2, r2, #16
 8002836:	5232      	strh	r2, [r6, r0]
 8002838:	5a32      	ldrh	r2, [r6, r0]
 800283a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800283e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002842:	b292      	uxth	r2, r2
 8002844:	5232      	strh	r2, [r6, r0]
 8002846:	e026      	b.n	8002896 <USB_EPStartXfer+0x27e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002848:	2e3e      	cmp	r6, #62	; 0x3e
 800284a:	d806      	bhi.n	800285a <USB_EPStartXfer+0x242>
 800284c:	0877      	lsrs	r7, r6, #1
 800284e:	f016 0f01 	tst.w	r6, #1
 8002852:	bf18      	it	ne
 8002854:	3701      	addne	r7, #1
 8002856:	02bf      	lsls	r7, r7, #10
 8002858:	e7ca      	b.n	80027f0 <USB_EPStartXfer+0x1d8>
 800285a:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 800285e:	06f7      	lsls	r7, r6, #27
 8002860:	4f61      	ldr	r7, [pc, #388]	; (80029e8 <USB_EPStartXfer+0x3d0>)
 8002862:	bf08      	it	eq
 8002864:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8002868:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 800286c:	e7c0      	b.n	80027f0 <USB_EPStartXfer+0x1d8>
 800286e:	2801      	cmp	r0, #1
 8002870:	d1c0      	bne.n	80027f4 <USB_EPStartXfer+0x1dc>
 8002872:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	b287      	uxth	r7, r0
 800287a:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800287e:	4438      	add	r0, r7
 8002880:	5283      	strh	r3, [r0, r2]
 8002882:	e7b7      	b.n	80027f4 <USB_EPStartXfer+0x1dc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002884:	2a3e      	cmp	r2, #62	; 0x3e
 8002886:	d808      	bhi.n	800289a <USB_EPStartXfer+0x282>
 8002888:	0857      	lsrs	r7, r2, #1
 800288a:	07d2      	lsls	r2, r2, #31
 800288c:	bf48      	it	mi
 800288e:	3701      	addmi	r7, #1
 8002890:	02bf      	lsls	r7, r7, #10
 8002892:	b2bf      	uxth	r7, r7
 8002894:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002896:	896a      	ldrh	r2, [r5, #10]
 8002898:	e77b      	b.n	8002792 <USB_EPStartXfer+0x17a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800289a:	0957      	lsrs	r7, r2, #5
 800289c:	06d2      	lsls	r2, r2, #27
 800289e:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <USB_EPStartXfer+0x3d0>)
 80028a0:	bf08      	it	eq
 80028a2:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80028a6:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80028aa:	e7ca      	b.n	8002842 <USB_EPStartXfer+0x22a>
 80028ac:	2801      	cmp	r0, #1
 80028ae:	d1f2      	bne.n	8002896 <USB_EPStartXfer+0x27e>
 80028b0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80028b4:	7828      	ldrb	r0, [r5, #0]
 80028b6:	b296      	uxth	r6, r2
 80028b8:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 80028bc:	0100      	lsls	r0, r0, #4
 80028be:	4432      	add	r2, r6
 80028c0:	5283      	strh	r3, [r0, r2]
 80028c2:	e7e8      	b.n	8002896 <USB_EPStartXfer+0x27e>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80028c4:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80028c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028cc:	0412      	lsls	r2, r2, #16
 80028ce:	0c12      	lsrs	r2, r2, #16
 80028d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028d8:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80028dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80028e0:	782e      	ldrb	r6, [r5, #0]
 80028e2:	b297      	uxth	r7, r2
 80028e4:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80028e8:	443a      	add	r2, r7
 80028ea:	0136      	lsls	r6, r6, #4
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80028f0:	892a      	ldrh	r2, [r5, #8]
 80028f2:	e74f      	b.n	8002794 <USB_EPStartXfer+0x17c>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80028f4:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 80028f8:	b2b3      	uxth	r3, r6
 80028fa:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80028fe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002902:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8002906:	b290      	uxth	r0, r2
 8002908:	bf15      	itete	ne
 800290a:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800290e:	f204 4204 	addweq	r2, r4, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002912:	1812      	addne	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002914:	1812      	addeq	r2, r2, r0
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002916:	bf15      	itete	ne
 8002918:	53d3      	strhne	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800291a:	53d3      	strheq	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 800291c:	896a      	ldrhne	r2, [r5, #10]
          pmabuffer = ep->pmaaddr0;
 800291e:	892a      	ldrheq	r2, [r5, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002920:	4620      	mov	r0, r4
 8002922:	f7ff fe69 	bl	80025f8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002926:	786b      	ldrb	r3, [r5, #1]
 8002928:	782a      	ldrb	r2, [r5, #0]
 800292a:	b973      	cbnz	r3, 800294a <USB_EPStartXfer+0x332>
 800292c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002944:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002948:	e684      	b.n	8002654 <USB_EPStartXfer+0x3c>
 800294a:	2b01      	cmp	r3, #1
 800294c:	f47f ae82 	bne.w	8002654 <USB_EPStartXfer+0x3c>
 8002950:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	0c1b      	lsrs	r3, r3, #16
 8002960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002968:	e7ec      	b.n	8002944 <USB_EPStartXfer+0x32c>
    if (ep->doublebuffer == 0U)
 800296a:	2a00      	cmp	r2, #0
 800296c:	d13e      	bne.n	80029ec <USB_EPStartXfer+0x3d4>
      if (ep->xfer_len > ep->maxpacket)
 800296e:	69ab      	ldr	r3, [r5, #24]
 8002970:	6929      	ldr	r1, [r5, #16]
 8002972:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8002974:	bf84      	itt	hi
 8002976:	1a5a      	subhi	r2, r3, r1
 8002978:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800297a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800297e:	7828      	ldrb	r0, [r5, #0]
 8002980:	61aa      	str	r2, [r5, #24]
 8002982:	b28a      	uxth	r2, r1
 8002984:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8002988:	0100      	lsls	r0, r0, #4
 800298a:	4411      	add	r1, r2
 800298c:	b96b      	cbnz	r3, 80029aa <USB_EPStartXfer+0x392>
 800298e:	5a43      	ldrh	r3, [r0, r1]
 8002990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	0c1b      	lsrs	r3, r3, #16
 8002998:	5243      	strh	r3, [r0, r1]
 800299a:	5a43      	ldrh	r3, [r0, r1]
 800299c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	5243      	strh	r3, [r0, r1]
 80029a8:	e008      	b.n	80029bc <USB_EPStartXfer+0x3a4>
 80029aa:	2b3e      	cmp	r3, #62	; 0x3e
 80029ac:	d812      	bhi.n	80029d4 <USB_EPStartXfer+0x3bc>
 80029ae:	085a      	lsrs	r2, r3, #1
 80029b0:	07df      	lsls	r7, r3, #31
 80029b2:	bf48      	it	mi
 80029b4:	3201      	addmi	r2, #1
 80029b6:	0292      	lsls	r2, r2, #10
 80029b8:	b292      	uxth	r2, r2
 80029ba:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029bc:	782a      	ldrb	r2, [r5, #0]
 80029be:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80029c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80029d2:	e64a      	b.n	800266a <USB_EPStartXfer+0x52>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80029d4:	095a      	lsrs	r2, r3, #5
 80029d6:	06de      	lsls	r6, r3, #27
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <USB_EPStartXfer+0x3d0>)
 80029da:	bf08      	it	eq
 80029dc:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80029e0:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80029e4:	e7de      	b.n	80029a4 <USB_EPStartXfer+0x38c>
 80029e6:	bf00      	nop
 80029e8:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 80029ec:	78eb      	ldrb	r3, [r5, #3]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d17e      	bne.n	8002af0 <USB_EPStartXfer+0x4d8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80029f2:	b9b9      	cbnz	r1, 8002a24 <USB_EPStartXfer+0x40c>
 80029f4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80029f8:	7829      	ldrb	r1, [r5, #0]
 80029fa:	b293      	uxth	r3, r2
 80029fc:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002a00:	6928      	ldr	r0, [r5, #16]
 8002a02:	0109      	lsls	r1, r1, #4
 8002a04:	441a      	add	r2, r3
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d144      	bne.n	8002a94 <USB_EPStartXfer+0x47c>
 8002a0a:	5a8b      	ldrh	r3, [r1, r2]
 8002a0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	0c1b      	lsrs	r3, r3, #16
 8002a14:	528b      	strh	r3, [r1, r2]
 8002a16:	5a8b      	ldrh	r3, [r1, r2]
 8002a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	528b      	strh	r3, [r1, r2]
 8002a24:	786a      	ldrb	r2, [r5, #1]
 8002a26:	782b      	ldrb	r3, [r5, #0]
 8002a28:	2a00      	cmp	r2, #0
 8002a2a:	d155      	bne.n	8002ad8 <USB_EPStartXfer+0x4c0>
 8002a2c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002a30:	6928      	ldr	r0, [r5, #16]
 8002a32:	b28a      	uxth	r2, r1
 8002a34:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8002a38:	4411      	add	r1, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d13a      	bne.n	8002ab6 <USB_EPStartXfer+0x49e>
 8002a40:	5aca      	ldrh	r2, [r1, r3]
 8002a42:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002a46:	0412      	lsls	r2, r2, #16
 8002a48:	0c12      	lsrs	r2, r2, #16
 8002a4a:	52ca      	strh	r2, [r1, r3]
 8002a4c:	5aca      	ldrh	r2, [r1, r3]
 8002a4e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a52:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a56:	b292      	uxth	r2, r2
 8002a58:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8002a5a:	69eb      	ldr	r3, [r5, #28]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ad      	beq.n	80029bc <USB_EPStartXfer+0x3a4>
 8002a60:	f244 0340 	movw	r3, #16448	; 0x4040
 8002a64:	782a      	ldrb	r2, [r5, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002a66:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002a6a:	ea03 0001 	and.w	r0, r3, r1
 8002a6e:	438b      	bics	r3, r1
 8002a70:	d001      	beq.n	8002a76 <USB_EPStartXfer+0x45e>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d1a2      	bne.n	80029bc <USB_EPStartXfer+0x3a4>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8002a76:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	041b      	lsls	r3, r3, #16
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a8e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002a92:	e793      	b.n	80029bc <USB_EPStartXfer+0x3a4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002a94:	283e      	cmp	r0, #62	; 0x3e
 8002a96:	d805      	bhi.n	8002aa4 <USB_EPStartXfer+0x48c>
 8002a98:	0843      	lsrs	r3, r0, #1
 8002a9a:	07c0      	lsls	r0, r0, #31
 8002a9c:	bf48      	it	mi
 8002a9e:	3301      	addmi	r3, #1
 8002aa0:	029b      	lsls	r3, r3, #10
 8002aa2:	e7bd      	b.n	8002a20 <USB_EPStartXfer+0x408>
 8002aa4:	0946      	lsrs	r6, r0, #5
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <USB_EPStartXfer+0x5b8>)
 8002aa8:	06c7      	lsls	r7, r0, #27
 8002aaa:	bf08      	it	eq
 8002aac:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002ab0:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8002ab4:	e7b4      	b.n	8002a20 <USB_EPStartXfer+0x408>
 8002ab6:	283e      	cmp	r0, #62	; 0x3e
 8002ab8:	d805      	bhi.n	8002ac6 <USB_EPStartXfer+0x4ae>
 8002aba:	0842      	lsrs	r2, r0, #1
 8002abc:	07c0      	lsls	r0, r0, #31
 8002abe:	bf48      	it	mi
 8002ac0:	3201      	addmi	r2, #1
 8002ac2:	0292      	lsls	r2, r2, #10
 8002ac4:	e7c7      	b.n	8002a56 <USB_EPStartXfer+0x43e>
 8002ac6:	0946      	lsrs	r6, r0, #5
 8002ac8:	4a41      	ldr	r2, [pc, #260]	; (8002bd0 <USB_EPStartXfer+0x5b8>)
 8002aca:	06c7      	lsls	r7, r0, #27
 8002acc:	bf08      	it	eq
 8002ace:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002ad2:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8002ad6:	e7be      	b.n	8002a56 <USB_EPStartXfer+0x43e>
 8002ad8:	2a01      	cmp	r2, #1
 8002ada:	d1be      	bne.n	8002a5a <USB_EPStartXfer+0x442>
 8002adc:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	b291      	uxth	r1, r2
 8002ae4:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 8002ae8:	440a      	add	r2, r1
 8002aea:	8a29      	ldrh	r1, [r5, #16]
 8002aec:	52d1      	strh	r1, [r2, r3]
 8002aee:	e7b4      	b.n	8002a5a <USB_EPStartXfer+0x442>
      else if (ep->type == EP_TYPE_ISOC)
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d16a      	bne.n	8002bca <USB_EPStartXfer+0x5b2>
        if (ep->xfer_len > ep->maxpacket)
 8002af4:	69ab      	ldr	r3, [r5, #24]
 8002af6:	692a      	ldr	r2, [r5, #16]
 8002af8:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8002afa:	bf94      	ite	ls
 8002afc:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8002afe:	1a98      	subhi	r0, r3, r2
 8002b00:	61a8      	str	r0, [r5, #24]
 8002b02:	bf88      	it	hi
 8002b04:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002b06:	b9a9      	cbnz	r1, 8002b34 <USB_EPStartXfer+0x51c>
 8002b08:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002b0c:	7828      	ldrb	r0, [r5, #0]
 8002b0e:	b28a      	uxth	r2, r1
 8002b10:	f204 4104 	addw	r1, r4, #1028	; 0x404
 8002b14:	0100      	lsls	r0, r0, #4
 8002b16:	4411      	add	r1, r2
 8002b18:	bb33      	cbnz	r3, 8002b68 <USB_EPStartXfer+0x550>
 8002b1a:	5a42      	ldrh	r2, [r0, r1]
 8002b1c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002b20:	0412      	lsls	r2, r2, #16
 8002b22:	0c12      	lsrs	r2, r2, #16
 8002b24:	5242      	strh	r2, [r0, r1]
 8002b26:	5a42      	ldrh	r2, [r0, r1]
 8002b28:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002b2c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002b30:	b292      	uxth	r2, r2
 8002b32:	5242      	strh	r2, [r0, r1]
 8002b34:	7869      	ldrb	r1, [r5, #1]
 8002b36:	782a      	ldrb	r2, [r5, #0]
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	d139      	bne.n	8002bb0 <USB_EPStartXfer+0x598>
 8002b3c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	b281      	uxth	r1, r0
 8002b44:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8002b48:	4408      	add	r0, r1
 8002b4a:	b9f3      	cbnz	r3, 8002b8a <USB_EPStartXfer+0x572>
 8002b4c:	5a83      	ldrh	r3, [r0, r2]
 8002b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	5283      	strh	r3, [r0, r2]
 8002b58:	5a83      	ldrh	r3, [r0, r2]
 8002b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	5283      	strh	r3, [r0, r2]
 8002b66:	e729      	b.n	80029bc <USB_EPStartXfer+0x3a4>
 8002b68:	2b3e      	cmp	r3, #62	; 0x3e
 8002b6a:	d805      	bhi.n	8002b78 <USB_EPStartXfer+0x560>
 8002b6c:	085a      	lsrs	r2, r3, #1
 8002b6e:	07de      	lsls	r6, r3, #31
 8002b70:	bf48      	it	mi
 8002b72:	3201      	addmi	r2, #1
 8002b74:	0292      	lsls	r2, r2, #10
 8002b76:	e7db      	b.n	8002b30 <USB_EPStartXfer+0x518>
 8002b78:	095e      	lsrs	r6, r3, #5
 8002b7a:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <USB_EPStartXfer+0x5b8>)
 8002b7c:	06df      	lsls	r7, r3, #27
 8002b7e:	bf08      	it	eq
 8002b80:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002b84:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8002b88:	e7d2      	b.n	8002b30 <USB_EPStartXfer+0x518>
 8002b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8002b8c:	d807      	bhi.n	8002b9e <USB_EPStartXfer+0x586>
 8002b8e:	0859      	lsrs	r1, r3, #1
 8002b90:	07de      	lsls	r6, r3, #31
 8002b92:	bf48      	it	mi
 8002b94:	3101      	addmi	r1, #1
 8002b96:	0289      	lsls	r1, r1, #10
 8002b98:	b289      	uxth	r1, r1
 8002b9a:	5281      	strh	r1, [r0, r2]
 8002b9c:	e70e      	b.n	80029bc <USB_EPStartXfer+0x3a4>
 8002b9e:	0959      	lsrs	r1, r3, #5
 8002ba0:	06db      	lsls	r3, r3, #27
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <USB_EPStartXfer+0x5b8>)
 8002ba4:	bf08      	it	eq
 8002ba6:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8002baa:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002bae:	e7d8      	b.n	8002b62 <USB_EPStartXfer+0x54a>
 8002bb0:	2901      	cmp	r1, #1
 8002bb2:	f47f af03 	bne.w	80029bc <USB_EPStartXfer+0x3a4>
 8002bb6:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b288      	uxth	r0, r1
 8002bbe:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8002bc2:	4401      	add	r1, r0
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	528b      	strh	r3, [r1, r2]
 8002bc8:	e6f8      	b.n	80029bc <USB_EPStartXfer+0x3a4>
        return HAL_ERROR;
 8002bca:	2001      	movs	r0, #1
 8002bcc:	e554      	b.n	8002678 <USB_EPStartXfer+0x60>
 8002bce:	bf00      	nop
 8002bd0:	ffff8000 	.word	0xffff8000

08002bd4 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002bd4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8002bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002bda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002bde:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 8002be0:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002be2:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8002be4:	462e      	mov	r6, r5
 8002be6:	3402      	adds	r4, #2
 8002be8:	b936      	cbnz	r6, 8002bf8 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002bea:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002bec:	bf44      	itt	mi
 8002bee:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002bf2:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8002bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002bf8:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8002bfc:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8002bfe:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002c00:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002c04:	0a00      	lsrs	r0, r0, #8
 8002c06:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8002c0a:	e7ec      	b.n	8002be6 <USB_ReadPMA+0x12>

08002c0c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002c0c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8002c10:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002c12:	b16b      	cbz	r3, 8002c30 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002c14:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002c18:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002c1c:	28ff      	cmp	r0, #255	; 0xff
 8002c1e:	d007      	beq.n	8002c30 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	4621      	mov	r1, r4
 8002c24:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002c28:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002c2a:	23ff      	movs	r3, #255	; 0xff
 8002c2c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8002c30:	2000      	movs	r0, #0
 8002c32:	bd10      	pop	{r4, pc}

08002c34 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8002c34:	2343      	movs	r3, #67	; 0x43
 8002c36:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002c38:	4800      	ldr	r0, [pc, #0]	; (8002c3c <USBD_CDC_GetFSCfgDesc+0x8>)
 8002c3a:	4770      	bx	lr
 8002c3c:	20000040 	.word	0x20000040

08002c40 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8002c40:	2343      	movs	r3, #67	; 0x43
 8002c42:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002c44:	4800      	ldr	r0, [pc, #0]	; (8002c48 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002c46:	4770      	bx	lr
 8002c48:	20000084 	.word	0x20000084

08002c4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002c4c:	2343      	movs	r3, #67	; 0x43
 8002c4e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002c50:	4800      	ldr	r0, [pc, #0]	; (8002c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002c52:	4770      	bx	lr
 8002c54:	200000d4 	.word	0x200000d4

08002c58 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8002c58:	230a      	movs	r3, #10
 8002c5a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002c5c:	4800      	ldr	r0, [pc, #0]	; (8002c60 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002c5e:	4770      	bx	lr
 8002c60:	200000c8 	.word	0x200000c8

08002c64 <USBD_CDC_DataOut>:
{
 8002c64:	b538      	push	{r3, r4, r5, lr}
 8002c66:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002c68:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002c6c:	f001 fc42 	bl	80044f4 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8002c70:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002c74:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8002c78:	b14b      	cbz	r3, 8002c8e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002c7a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002c7e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8002c88:	4798      	blx	r3
    return USBD_OK;
 8002c8a:	2000      	movs	r0, #0
}
 8002c8c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002c8e:	2002      	movs	r0, #2
 8002c90:	e7fc      	b.n	8002c8c <USBD_CDC_DataOut+0x28>

08002c92 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002c92:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8002c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData != NULL)
 8002c98:	b1d2      	cbz	r2, 8002cd0 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002c9a:	2714      	movs	r7, #20
 8002c9c:	fb07 0701 	mla	r7, r7, r1, r0
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	b18b      	cbz	r3, 8002cc8 <USBD_CDC_DataIn+0x36>
 8002ca4:	2628      	movs	r6, #40	; 0x28
 8002ca6:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8002caa:	fb06 4501 	mla	r5, r6, r1, r4
 8002cae:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8002cb0:	fbb3 f4f5 	udiv	r4, r3, r5
 8002cb4:	fb05 3414 	mls	r4, r5, r4, r3
 8002cb8:	b934      	cbnz	r4, 8002cc8 <USBD_CDC_DataIn+0x36>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002cba:	4623      	mov	r3, r4
 8002cbc:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 8002cbe:	61fc      	str	r4, [r7, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002cc0:	f001 fbfc 	bl	80044bc <USBD_LL_Transmit>
    return USBD_OK;
 8002cc4:	4620      	mov	r0, r4
}
 8002cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8002cce:	e7fa      	b.n	8002cc6 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	e7f8      	b.n	8002cc6 <USBD_CDC_DataIn+0x34>

08002cd4 <USBD_CDC_Setup>:
{
 8002cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8002cd8:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cdc:	780a      	ldrb	r2, [r1, #0]
{
 8002cde:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ce0:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8002ce4:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002ce6:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8002cea:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8002cee:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cf2:	d028      	beq.n	8002d46 <USBD_CDC_Setup+0x72>
 8002cf4:	2c20      	cmp	r4, #32
 8002cf6:	d142      	bne.n	8002d7e <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8002cf8:	88cc      	ldrh	r4, [r1, #6]
 8002cfa:	784b      	ldrb	r3, [r1, #1]
 8002cfc:	b1e4      	cbz	r4, 8002d38 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8002cfe:	0612      	lsls	r2, r2, #24
 8002d00:	d511      	bpl.n	8002d26 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002d02:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8002d06:	4639      	mov	r1, r7
 8002d08:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	4622      	mov	r2, r4
 8002d10:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002d12:	4639      	mov	r1, r7
 8002d14:	4628      	mov	r0, r5
 8002d16:	88f2      	ldrh	r2, [r6, #6]
 8002d18:	f000 fc4b 	bl	80035b2 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8002d1c:	4644      	mov	r4, r8
}
 8002d1e:	4620      	mov	r0, r4
 8002d20:	b003      	add	sp, #12
 8002d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002d26:	4622      	mov	r2, r4
 8002d28:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 8002d2a:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8002d2e:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8002d32:	f000 fc53 	bl	80035dc <USBD_CtlPrepareRx>
 8002d36:	e7f1      	b.n	8002d1c <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002d38:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	6895      	ldr	r5, [r2, #8]
 8002d40:	4622      	mov	r2, r4
 8002d42:	47a8      	blx	r5
 8002d44:	e7eb      	b.n	8002d1e <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8002d46:	784b      	ldrb	r3, [r1, #1]
 8002d48:	2b0a      	cmp	r3, #10
 8002d4a:	d00c      	beq.n	8002d66 <USBD_CDC_Setup+0x92>
 8002d4c:	2b0b      	cmp	r3, #11
 8002d4e:	d012      	beq.n	8002d76 <USBD_CDC_Setup+0xa2>
 8002d50:	b9ab      	cbnz	r3, 8002d7e <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002d52:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d111      	bne.n	8002d7e <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002d60:	f000 fc27 	bl	80035b2 <USBD_CtlSendData>
 8002d64:	e7db      	b.n	8002d1e <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002d66:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d107      	bne.n	8002d7e <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f10d 0105 	add.w	r1, sp, #5
 8002d74:	e7f4      	b.n	8002d60 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002d76:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d0cf      	beq.n	8002d1e <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8002d7e:	4631      	mov	r1, r6
 8002d80:	4628      	mov	r0, r5
 8002d82:	f000 fbef 	bl	8003564 <USBD_CtlError>
          ret = USBD_FAIL;
 8002d86:	2402      	movs	r4, #2
          break;
 8002d88:	e7c9      	b.n	8002d1e <USBD_CDC_Setup+0x4a>

08002d8a <USBD_CDC_DeInit>:
{
 8002d8a:	b538      	push	{r3, r4, r5, lr}
 8002d8c:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002d8e:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002d90:	2181      	movs	r1, #129	; 0x81
 8002d92:	f001 fb49 	bl	8004428 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002d96:	2101      	movs	r1, #1
 8002d98:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002d9a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002d9c:	f001 fb44 	bl	8004428 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002da0:	2182      	movs	r1, #130	; 0x82
 8002da2:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002da4:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002da8:	f001 fb3e 	bl	8004428 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002dac:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002db0:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8002db2:	b14b      	cbz	r3, 8002dc8 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002db4:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002dbc:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8002dc0:	f001 fba0 	bl	8004504 <USBD_static_free>
    pdev->pClassData = NULL;
 8002dc4:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8002dc8:	2000      	movs	r0, #0
 8002dca:	bd38      	pop	{r3, r4, r5, pc}

08002dcc <USBD_CDC_Init>:
{
 8002dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002dd0:	7c03      	ldrb	r3, [r0, #16]
{
 8002dd2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002dd4:	bbbb      	cbnz	r3, 8002e46 <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dda:	2202      	movs	r2, #2
 8002ddc:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002dde:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002de0:	f001 fb12 	bl	8004408 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002de4:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002de8:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002dea:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002dec:	4629      	mov	r1, r5
 8002dee:	2202      	movs	r2, #2
 8002df0:	4620      	mov	r0, r4
 8002df2:	f001 fb09 	bl	8004408 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002df6:	2308      	movs	r3, #8
 8002df8:	2203      	movs	r2, #3
 8002dfa:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002dfc:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002e00:	4620      	mov	r0, r4
 8002e02:	f001 fb01 	bl	8004408 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002e06:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002e0a:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002e0c:	f001 fb76 	bl	80044fc <USBD_static_malloc>
 8002e10:	4605      	mov	r5, r0
 8002e12:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8002e16:	b340      	cbz	r0, 8002e6a <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 8002e18:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002e1c:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4798      	blx	r3
    hcdc->TxState = 0U;
 8002e24:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8002e28:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002e2c:	7c26      	ldrb	r6, [r4, #16]
 8002e2e:	b99e      	cbnz	r6, 8002e58 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e34:	4639      	mov	r1, r7
 8002e36:	4620      	mov	r0, r4
 8002e38:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8002e3c:	f001 fb4c 	bl	80044d8 <USBD_LL_PrepareReceive>
}
 8002e40:	4630      	mov	r0, r6
 8002e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002e46:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002e48:	2340      	movs	r3, #64	; 0x40
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	2181      	movs	r1, #129	; 0x81
 8002e4e:	f001 fadb 	bl	8004408 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002e52:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002e54:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002e56:	e7c8      	b.n	8002dea <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002e58:	2340      	movs	r3, #64	; 0x40
 8002e5a:	4639      	mov	r1, r7
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8002e62:	f001 fb39 	bl	80044d8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8002e66:	4646      	mov	r6, r8
 8002e68:	e7ea      	b.n	8002e40 <USBD_CDC_Init+0x74>
    ret = 1U;
 8002e6a:	463e      	mov	r6, r7
 8002e6c:	e7e8      	b.n	8002e40 <USBD_CDC_Init+0x74>

08002e6e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8002e6e:	b119      	cbz	r1, 8002e78 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8002e70:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8002e74:	2000      	movs	r0, #0
 8002e76:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002e78:	2002      	movs	r0, #2
  }

  return ret;
}
 8002e7a:	4770      	bx	lr

08002e7c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002e7c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8002e80:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002e82:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002e86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002e8a:	4770      	bx	lr

08002e8c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8002e8c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8002e90:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002e92:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002e96:	4770      	bx	lr

08002e98 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002e98:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8002e9c:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8002e9e:	b182      	cbz	r2, 8002ec2 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8002ea0:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	b974      	cbnz	r4, 8002ec6 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8002ea8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8002eac:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8002eb0:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8002eb2:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8002eb4:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f001 faff 	bl	80044bc <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8002ebe:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8002ec0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8002ec2:	2002      	movs	r0, #2
 8002ec4:	e7fc      	b.n	8002ec0 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	e7fa      	b.n	8002ec0 <USBD_CDC_TransmitPacket+0x28>

08002eca <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002eca:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8002ece:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8002ed0:	b182      	cbz	r2, 8002ef4 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002ed2:	7c04      	ldrb	r4, [r0, #16]
 8002ed4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002ed8:	b934      	cbnz	r4, 8002ee8 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ede:	2101      	movs	r1, #1
 8002ee0:	f001 fafa 	bl	80044d8 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002ee8:	2340      	movs	r3, #64	; 0x40
 8002eea:	2101      	movs	r1, #1
 8002eec:	f001 faf4 	bl	80044d8 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8002ef0:	2400      	movs	r4, #0
 8002ef2:	e7f7      	b.n	8002ee4 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8002ef4:	2402      	movs	r4, #2
 8002ef6:	e7f5      	b.n	8002ee4 <USBD_CDC_ReceivePacket+0x1a>

08002ef8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002ef8:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002efa:	b180      	cbz	r0, 8002f1e <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002efc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f00:	b113      	cbz	r3, 8002f08 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002f08:	b109      	cbz	r1, 8002f0e <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002f0a:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f0e:	2301      	movs	r3, #1
  pdev->id = id;
 8002f10:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f12:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002f16:	f001 fa27 	bl	8004368 <USBD_LL_Init>

  return USBD_OK;
 8002f1a:	2000      	movs	r0, #0
}
 8002f1c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002f1e:	2002      	movs	r0, #2
 8002f20:	e7fc      	b.n	8002f1c <USBD_Init+0x24>

08002f22 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002f22:	b119      	cbz	r1, 8002f2c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002f24:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8002f28:	2000      	movs	r0, #0
 8002f2a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002f2c:	2002      	movs	r0, #2
  }

  return status;
}
 8002f2e:	4770      	bx	lr

08002f30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002f30:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002f32:	f001 fa5b 	bl	80043ec <USBD_LL_Start>

  return USBD_OK;
}
 8002f36:	2000      	movs	r0, #0
 8002f38:	bd08      	pop	{r3, pc}

08002f3a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002f3a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002f3c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f40:	b90b      	cbnz	r3, 8002f46 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002f42:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002f44:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4798      	blx	r3
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d0fa      	beq.n	8002f44 <USBD_SetClassConfig+0xa>
 8002f4e:	e7f8      	b.n	8002f42 <USBD_SetClassConfig+0x8>

08002f50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002f50:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002f52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4798      	blx	r3

  return USBD_OK;
}
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	bd08      	pop	{r3, pc}

08002f5e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002f5e:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002f60:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8002f64:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002f66:	4628      	mov	r0, r5
 8002f68:	f000 fae8 	bl	800353c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002f6c:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002f6e:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002f72:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002f76:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8002f7a:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002f7e:	f001 031f 	and.w	r3, r1, #31
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d008      	beq.n	8002f98 <USBD_LL_SetupStage+0x3a>
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d00b      	beq.n	8002fa2 <USBD_LL_SetupStage+0x44>
 8002f8a:	b97b      	cbnz	r3, 8002fac <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f000 f8fc 	bl	800318c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8002f94:	2000      	movs	r0, #0
 8002f96:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002f98:	4629      	mov	r1, r5
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f000 fa20 	bl	80033e0 <USBD_StdItfReq>
      break;
 8002fa0:	e7f8      	b.n	8002f94 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f000 fa3f 	bl	8003428 <USBD_StdEPReq>
      break;
 8002faa:	e7f3      	b.n	8002f94 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002fac:	4620      	mov	r0, r4
 8002fae:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002fb2:	f001 fa47 	bl	8004444 <USBD_LL_StallEP>
      break;
 8002fb6:	e7ed      	b.n	8002f94 <USBD_LL_SetupStage+0x36>

08002fb8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4604      	mov	r4, r0
 8002fbc:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002fbe:	460d      	mov	r5, r1
 8002fc0:	bb39      	cbnz	r1, 8003012 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002fc2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d11c      	bne.n	8003004 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8002fca:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 8002fce:	4291      	cmp	r1, r2
 8002fd0:	d90b      	bls.n	8002fea <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8002fd2:	1a89      	subs	r1, r1, r2

        USBD_CtlContinueRx(pdev, pdata,
 8002fd4:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8002fd6:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002fda:	bf8c      	ite	hi
 8002fdc:	b28a      	uxthhi	r2, r1
 8002fde:	b292      	uxthls	r2, r2
 8002fe0:	4631      	mov	r1, r6
 8002fe2:	f000 fb08 	bl	80035f6 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002fea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	b123      	cbz	r3, 8002ffc <USBD_LL_DataOutStage+0x44>
 8002ff2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002ff6:	2a03      	cmp	r2, #3
 8002ff8:	d100      	bne.n	8002ffc <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8002ffa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f000 fb02 	bl	8003606 <USBD_CtlSendStatus>
 8003002:	e7f0      	b.n	8002fe6 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003004:	2b05      	cmp	r3, #5
 8003006:	d1ee      	bne.n	8002fe6 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003008:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800300c:	f001 fa1a 	bl	8004444 <USBD_LL_StallEP>
 8003010:	e7e9      	b.n	8002fe6 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003012:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	b133      	cbz	r3, 8003028 <USBD_LL_DataOutStage+0x70>
 800301a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800301e:	2a03      	cmp	r2, #3
 8003020:	d102      	bne.n	8003028 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8003022:	4798      	blx	r3
  return USBD_OK;
 8003024:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8003026:	e7de      	b.n	8002fe6 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8003028:	2502      	movs	r5, #2
 800302a:	e7dc      	b.n	8002fe6 <USBD_LL_DataOutStage+0x2e>

0800302c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	4604      	mov	r4, r0
 8003030:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003032:	460d      	mov	r5, r1
 8003034:	2900      	cmp	r1, #0
 8003036:	d147      	bne.n	80030c8 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003038:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800303c:	2b02      	cmp	r3, #2
 800303e:	d13c      	bne.n	80030ba <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003040:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8003044:	429e      	cmp	r6, r3
 8003046:	d914      	bls.n	8003072 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8003048:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800304a:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 800304c:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800304e:	b29a      	uxth	r2, r3
 8003050:	f000 fabc 	bl	80035cc <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003054:	462b      	mov	r3, r5
 8003056:	462a      	mov	r2, r5
 8003058:	4629      	mov	r1, r5
 800305a:	4620      	mov	r0, r4
 800305c:	f001 fa3c 	bl	80044d8 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003060:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800306e:	4628      	mov	r0, r5
 8003070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003072:	69c2      	ldr	r2, [r0, #28]
 8003074:	fbb2 f6f3 	udiv	r6, r2, r3
 8003078:	fb03 2616 	mls	r6, r3, r6, r2
 800307c:	b95e      	cbnz	r6, 8003096 <USBD_LL_DataInStage+0x6a>
 800307e:	4293      	cmp	r3, r2
 8003080:	d809      	bhi.n	8003096 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8003082:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8003086:	429a      	cmp	r2, r3
 8003088:	d205      	bcs.n	8003096 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800308a:	460a      	mov	r2, r1
 800308c:	f000 fa9e 	bl	80035cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003090:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8003094:	e7de      	b.n	8003054 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003096:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	b12b      	cbz	r3, 80030aa <USBD_LL_DataInStage+0x7e>
 800309e:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80030a2:	2a03      	cmp	r2, #3
 80030a4:	d101      	bne.n	80030aa <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80030a6:	4620      	mov	r0, r4
 80030a8:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	4620      	mov	r0, r4
 80030ae:	f001 f9c9 	bl	8004444 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80030b2:	4620      	mov	r0, r4
 80030b4:	f000 fab2 	bl	800361c <USBD_CtlReceiveStatus>
 80030b8:	e7d2      	b.n	8003060 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80030ba:	f033 0304 	bics.w	r3, r3, #4
 80030be:	d1cf      	bne.n	8003060 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	f001 f9bf 	bl	8004444 <USBD_LL_StallEP>
 80030c6:	e7cb      	b.n	8003060 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80030c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	b133      	cbz	r3, 80030de <USBD_LL_DataInStage+0xb2>
 80030d0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80030d4:	2a03      	cmp	r2, #3
 80030d6:	d102      	bne.n	80030de <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 80030d8:	4798      	blx	r3
  return USBD_OK;
 80030da:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 80030dc:	e7c7      	b.n	800306e <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 80030de:	2502      	movs	r5, #2
 80030e0:	e7c5      	b.n	800306e <USBD_LL_DataInStage+0x42>

080030e2 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80030e2:	2200      	movs	r2, #0
{
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80030e8:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80030ea:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80030ec:	4611      	mov	r1, r2
 80030ee:	2340      	movs	r3, #64	; 0x40
 80030f0:	f001 f98a 	bl	8004408 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80030f4:	4633      	mov	r3, r6
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	2200      	movs	r2, #0
 80030fa:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80030fc:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003100:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003104:	f001 f980 	bl	8004408 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003108:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800310a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800310e:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003110:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003112:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003116:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800311a:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800311c:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8003120:	b123      	cbz	r3, 800312c <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003122:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003126:	4620      	mov	r0, r4
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4798      	blx	r3
  }

  return USBD_OK;
}
 800312c:	2000      	movs	r0, #0
 800312e:	bd70      	pop	{r4, r5, r6, pc}

08003130 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003130:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003132:	2000      	movs	r0, #0
 8003134:	4770      	bx	lr

08003136 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003136:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800313a:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800313e:	2304      	movs	r3, #4
 8003140:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003144:	2000      	movs	r0, #0
 8003146:	4770      	bx	lr

08003148 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003148:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800314c:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800314e:	bf04      	itt	eq
 8003150:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003154:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003158:	2000      	movs	r0, #0
 800315a:	4770      	bx	lr

0800315c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800315c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800315e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003162:	2a03      	cmp	r2, #3
 8003164:	d104      	bne.n	8003170 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003166:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	b103      	cbz	r3, 8003170 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800316e:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003170:	2000      	movs	r0, #0
 8003172:	bd08      	pop	{r3, pc}

08003174 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003174:	b510      	push	{r4, lr}
 8003176:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	f001 f963 	bl	8004444 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800317e:	4620      	mov	r0, r4
}
 8003180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003184:	2100      	movs	r1, #0
 8003186:	f001 b95d 	b.w	8004444 <USBD_LL_StallEP>
	...

0800318c <USBD_StdDevReq>:
{
 800318c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800318e:	780b      	ldrb	r3, [r1, #0]
 8003190:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003196:	2b20      	cmp	r3, #32
{
 8003198:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800319a:	d012      	beq.n	80031c2 <USBD_StdDevReq+0x36>
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d010      	beq.n	80031c2 <USBD_StdDevReq+0x36>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d151      	bne.n	8003248 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 80031a4:	784b      	ldrb	r3, [r1, #1]
 80031a6:	2b09      	cmp	r3, #9
 80031a8:	d84e      	bhi.n	8003248 <USBD_StdDevReq+0xbc>
 80031aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80031ae:	00ee      	.short	0x00ee
 80031b0:	004d010a 	.word	0x004d010a
 80031b4:	004d0103 	.word	0x004d0103
 80031b8:	00130087 	.word	0x00130087
 80031bc:	00d6004d 	.word	0x00d6004d
 80031c0:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 80031c2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80031c6:	4629      	mov	r1, r5
 80031c8:	4620      	mov	r0, r4
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4798      	blx	r3
}
 80031ce:	2000      	movs	r0, #0
 80031d0:	b003      	add	sp, #12
 80031d2:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80031da:	884b      	ldrh	r3, [r1, #2]
 80031dc:	0a1a      	lsrs	r2, r3, #8
 80031de:	3a01      	subs	r2, #1
 80031e0:	2a06      	cmp	r2, #6
 80031e2:	d831      	bhi.n	8003248 <USBD_StdDevReq+0xbc>
 80031e4:	e8df f002 	tbb	[pc, r2]
 80031e8:	30231604 	.word	0x30231604
 80031ec:	4830      	.short	0x4830
 80031ee:	52          	.byte	0x52
 80031ef:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80031f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80031f4:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80031f6:	7c20      	ldrb	r0, [r4, #16]
 80031f8:	f10d 0106 	add.w	r1, sp, #6
 80031fc:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80031fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003202:	2a00      	cmp	r2, #0
 8003204:	d056      	beq.n	80032b4 <USBD_StdDevReq+0x128>
 8003206:	88eb      	ldrh	r3, [r5, #6]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d14a      	bne.n	80032a2 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800320c:	4620      	mov	r0, r4
 800320e:	f000 f9fa 	bl	8003606 <USBD_CtlSendStatus>
 8003212:	e7dc      	b.n	80031ce <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003214:	7c02      	ldrb	r2, [r0, #16]
 8003216:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800321a:	b932      	cbnz	r2, 800322a <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800321e:	f10d 0006 	add.w	r0, sp, #6
 8003222:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003224:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003226:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8003228:	e7e9      	b.n	80031fe <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	e7f7      	b.n	800321e <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b05      	cmp	r3, #5
 8003232:	d809      	bhi.n	8003248 <USBD_StdDevReq+0xbc>
 8003234:	e8df f003 	tbb	[pc, r3]
 8003238:	14100c03 	.word	0x14100c03
 800323c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800323e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003242:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1d6      	bne.n	80031f6 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8003248:	4620      	mov	r0, r4
 800324a:	f7ff ff93 	bl	8003174 <USBD_CtlError.constprop.0>
        break;
 800324e:	e7be      	b.n	80031ce <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003250:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	e7f5      	b.n	8003244 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003258:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	e7f1      	b.n	8003244 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003260:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	e7ed      	b.n	8003244 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003268:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	e7e9      	b.n	8003244 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003270:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	e7e5      	b.n	8003244 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003278:	7c03      	ldrb	r3, [r0, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e4      	bne.n	8003248 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800327e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003282:	f10d 0006 	add.w	r0, sp, #6
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	4798      	blx	r3
  if (err != 0U)
 800328a:	e7b8      	b.n	80031fe <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800328c:	7c03      	ldrb	r3, [r0, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1da      	bne.n	8003248 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003292:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003296:	f10d 0006 	add.w	r0, sp, #6
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800329e:	2307      	movs	r3, #7
 80032a0:	e7c1      	b.n	8003226 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 80032a2:	429a      	cmp	r2, r3
 80032a4:	bf28      	it	cs
 80032a6:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80032a8:	4601      	mov	r1, r0
 80032aa:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80032ac:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80032b0:	f000 f97f 	bl	80035b2 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80032b4:	88eb      	ldrh	r3, [r5, #6]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d189      	bne.n	80031ce <USBD_StdDevReq+0x42>
 80032ba:	e7a7      	b.n	800320c <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80032bc:	888b      	ldrh	r3, [r1, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1c2      	bne.n	8003248 <USBD_StdDevReq+0xbc>
 80032c2:	88cb      	ldrh	r3, [r1, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1bf      	bne.n	8003248 <USBD_StdDevReq+0xbc>
 80032c8:	884d      	ldrh	r5, [r1, #2]
 80032ca:	2d7f      	cmp	r5, #127	; 0x7f
 80032cc:	d8bc      	bhi.n	8003248 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80032ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d0b8      	beq.n	8003248 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80032d6:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80032d8:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80032dc:	f001 f8e0 	bl	80044a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80032e0:	4620      	mov	r0, r4
 80032e2:	f000 f990 	bl	8003606 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80032e6:	b11d      	cbz	r5, 80032f0 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80032e8:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80032ea:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80032ee:	e76e      	b.n	80031ce <USBD_StdDevReq+0x42>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e7fa      	b.n	80032ea <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 80032f4:	7889      	ldrb	r1, [r1, #2]
 80032f6:	4d39      	ldr	r5, [pc, #228]	; (80033dc <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80032f8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80032fa:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80032fc:	d8a4      	bhi.n	8003248 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80032fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003302:	2b02      	cmp	r3, #2
 8003304:	d008      	beq.n	8003318 <USBD_StdDevReq+0x18c>
 8003306:	2b03      	cmp	r3, #3
 8003308:	d015      	beq.n	8003336 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800330a:	f7ff ff33 	bl	8003174 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800330e:	4620      	mov	r0, r4
 8003310:	7829      	ldrb	r1, [r5, #0]
 8003312:	f7ff fe1d 	bl	8002f50 <USBD_ClrClassConfig>
        break;
 8003316:	e75a      	b.n	80031ce <USBD_StdDevReq+0x42>
        if (cfgidx)
 8003318:	2900      	cmp	r1, #0
 800331a:	f43f af77 	beq.w	800320c <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800331e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003320:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8003322:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003324:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003328:	4620      	mov	r0, r4
 800332a:	f7ff fe06 	bl	8002f3a <USBD_SetClassConfig>
 800332e:	2802      	cmp	r0, #2
 8003330:	f47f af6c 	bne.w	800320c <USBD_StdDevReq+0x80>
 8003334:	e788      	b.n	8003248 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8003336:	b931      	cbnz	r1, 8003346 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003338:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800333a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800333c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003340:	f7ff fe06 	bl	8002f50 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8003344:	e762      	b.n	800320c <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8003346:	6841      	ldr	r1, [r0, #4]
 8003348:	2901      	cmp	r1, #1
 800334a:	f43f af5f 	beq.w	800320c <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800334e:	b2c9      	uxtb	r1, r1
 8003350:	f7ff fdfe 	bl	8002f50 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003354:	7829      	ldrb	r1, [r5, #0]
 8003356:	6061      	str	r1, [r4, #4]
 8003358:	e7e6      	b.n	8003328 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 800335a:	88ca      	ldrh	r2, [r1, #6]
 800335c:	2a01      	cmp	r2, #1
 800335e:	f47f af73 	bne.w	8003248 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8003362:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003366:	2b02      	cmp	r3, #2
 8003368:	d80a      	bhi.n	8003380 <USBD_StdDevReq+0x1f4>
 800336a:	2b00      	cmp	r3, #0
 800336c:	f43f af6c 	beq.w	8003248 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8003370:	4601      	mov	r1, r0
 8003372:	2300      	movs	r3, #0
 8003374:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003378:	4620      	mov	r0, r4
 800337a:	f000 f91a 	bl	80035b2 <USBD_CtlSendData>
      break;
 800337e:	e726      	b.n	80031ce <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8003380:	2b03      	cmp	r3, #3
 8003382:	f47f af61 	bne.w	8003248 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003386:	1d01      	adds	r1, r0, #4
 8003388:	e7f6      	b.n	8003378 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800338a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800338e:	3b01      	subs	r3, #1
 8003390:	2b02      	cmp	r3, #2
 8003392:	f63f af59 	bhi.w	8003248 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8003396:	88cb      	ldrh	r3, [r1, #6]
 8003398:	2b02      	cmp	r3, #2
 800339a:	f47f af55 	bne.w	8003248 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800339e:	2301      	movs	r3, #1
 80033a0:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80033a2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80033a6:	b10b      	cbz	r3, 80033ac <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80033a8:	2303      	movs	r3, #3
 80033aa:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80033ac:	2202      	movs	r2, #2
 80033ae:	f104 010c 	add.w	r1, r4, #12
 80033b2:	e7e1      	b.n	8003378 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80033b4:	884b      	ldrh	r3, [r1, #2]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	f47f af09 	bne.w	80031ce <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80033bc:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80033c0:	e724      	b.n	800320c <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 80033c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80033c6:	3b01      	subs	r3, #1
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	f63f af3d 	bhi.w	8003248 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80033ce:	884b      	ldrh	r3, [r1, #2]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	f47f aefc 	bne.w	80031ce <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e7f0      	b.n	80033bc <USBD_StdDevReq+0x230>
 80033da:	bf00      	nop
 80033dc:	20000214 	.word	0x20000214

080033e0 <USBD_StdItfReq>:
{
 80033e0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033e2:	780b      	ldrb	r3, [r1, #0]
{
 80033e4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033e6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80033ea:	2a40      	cmp	r2, #64	; 0x40
{
 80033ec:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80033ee:	d001      	beq.n	80033f4 <USBD_StdItfReq+0x14>
 80033f0:	065b      	lsls	r3, r3, #25
 80033f2:	d415      	bmi.n	8003420 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 80033f4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80033f8:	3b01      	subs	r3, #1
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d810      	bhi.n	8003420 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80033fe:	792b      	ldrb	r3, [r5, #4]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d80d      	bhi.n	8003420 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003404:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003408:	4629      	mov	r1, r5
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4620      	mov	r0, r4
 800340e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003410:	88eb      	ldrh	r3, [r5, #6]
 8003412:	b91b      	cbnz	r3, 800341c <USBD_StdItfReq+0x3c>
 8003414:	b910      	cbnz	r0, 800341c <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8003416:	4620      	mov	r0, r4
 8003418:	f000 f8f5 	bl	8003606 <USBD_CtlSendStatus>
}
 800341c:	2000      	movs	r0, #0
 800341e:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8003420:	4620      	mov	r0, r4
 8003422:	f7ff fea7 	bl	8003174 <USBD_CtlError.constprop.0>
          break;
 8003426:	e7f9      	b.n	800341c <USBD_StdItfReq+0x3c>

08003428 <USBD_StdEPReq>:
{
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	780a      	ldrb	r2, [r1, #0]
 800342c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800342e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003432:	2a20      	cmp	r2, #32
{
 8003434:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003436:	d027      	beq.n	8003488 <USBD_StdEPReq+0x60>
 8003438:	2a40      	cmp	r2, #64	; 0x40
 800343a:	d025      	beq.n	8003488 <USBD_StdEPReq+0x60>
 800343c:	bb92      	cbnz	r2, 80034a4 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 800343e:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003440:	888d      	ldrh	r5, [r1, #4]
 8003442:	2a01      	cmp	r2, #1
 8003444:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8003446:	d03d      	beq.n	80034c4 <USBD_StdEPReq+0x9c>
 8003448:	2a03      	cmp	r2, #3
 800344a:	d025      	beq.n	8003498 <USBD_StdEPReq+0x70>
 800344c:	bb52      	cbnz	r2, 80034a4 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 800344e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003452:	2b02      	cmp	r3, #2
 8003454:	d04d      	beq.n	80034f2 <USBD_StdEPReq+0xca>
 8003456:	2b03      	cmp	r3, #3
 8003458:	d124      	bne.n	80034a4 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 800345a:	2214      	movs	r2, #20
 800345c:	f001 030f 	and.w	r3, r1, #15
 8003460:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003464:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8003468:	d054      	beq.n	8003514 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	b1d3      	cbz	r3, 80034a4 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800346e:	2314      	movs	r3, #20
 8003470:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8003474:	fb05 3303 	mla	r3, r5, r3, r3
 8003478:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800347a:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 800347e:	d155      	bne.n	800352c <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8003480:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003482:	2202      	movs	r2, #2
 8003484:	4629      	mov	r1, r5
 8003486:	e041      	b.n	800350c <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8003488:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 800348c:	4619      	mov	r1, r3
 800348e:	4620      	mov	r0, r4
 8003490:	6892      	ldr	r2, [r2, #8]
 8003492:	4790      	blx	r2
}
 8003494:	2000      	movs	r0, #0
 8003496:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8003498:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800349c:	2a02      	cmp	r2, #2
 800349e:	d01f      	beq.n	80034e0 <USBD_StdEPReq+0xb8>
 80034a0:	2a03      	cmp	r2, #3
 80034a2:	d003      	beq.n	80034ac <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 80034a4:	4620      	mov	r0, r4
 80034a6:	f7ff fe65 	bl	8003174 <USBD_CtlError.constprop.0>
              break;
 80034aa:	e7f3      	b.n	8003494 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80034ac:	885a      	ldrh	r2, [r3, #2]
 80034ae:	b92a      	cbnz	r2, 80034bc <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 80034b0:	064a      	lsls	r2, r1, #25
 80034b2:	d003      	beq.n	80034bc <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80034b4:	88db      	ldrh	r3, [r3, #6]
 80034b6:	b90b      	cbnz	r3, 80034bc <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 80034b8:	f000 ffc4 	bl	8004444 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80034bc:	4620      	mov	r0, r4
 80034be:	f000 f8a2 	bl	8003606 <USBD_CtlSendStatus>
              break;
 80034c2:	e7e7      	b.n	8003494 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 80034c4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80034c8:	2a02      	cmp	r2, #2
 80034ca:	d009      	beq.n	80034e0 <USBD_StdEPReq+0xb8>
 80034cc:	2a03      	cmp	r2, #3
 80034ce:	d1e9      	bne.n	80034a4 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80034d0:	885b      	ldrh	r3, [r3, #2]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1de      	bne.n	8003494 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80034d6:	064d      	lsls	r5, r1, #25
 80034d8:	d0f0      	beq.n	80034bc <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80034da:	f000 ffc1 	bl	8004460 <USBD_LL_ClearStallEP>
 80034de:	e7ed      	b.n	80034bc <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80034e0:	064b      	lsls	r3, r1, #25
 80034e2:	d0df      	beq.n	80034a4 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 80034e4:	f000 ffae 	bl	8004444 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	4620      	mov	r0, r4
 80034ec:	f000 ffaa 	bl	8004444 <USBD_LL_StallEP>
 80034f0:	e7d0      	b.n	8003494 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80034f2:	064a      	lsls	r2, r1, #25
 80034f4:	d1d6      	bne.n	80034a4 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80034f6:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80034f8:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80034fc:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003500:	bf4c      	ite	mi
 8003502:	f100 0114 	addmi.w	r1, r0, #20
 8003506:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 800350a:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800350c:	4620      	mov	r0, r4
 800350e:	f000 f850 	bl	80035b2 <USBD_CtlSendData>
              break;
 8003512:	e7bf      	b.n	8003494 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003514:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0c3      	beq.n	80034a4 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800351c:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 800351e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003522:	fb03 0505 	mla	r5, r3, r5, r0
 8003526:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800352a:	e7a6      	b.n	800347a <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800352c:	4620      	mov	r0, r4
 800352e:	f000 ffa5 	bl	800447c <USBD_LL_IsStallEP>
 8003532:	b108      	cbz	r0, 8003538 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8003534:	2301      	movs	r3, #1
 8003536:	e7a3      	b.n	8003480 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8003538:	6028      	str	r0, [r5, #0]
 800353a:	e7a2      	b.n	8003482 <USBD_StdEPReq+0x5a>

0800353c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800353c:	780b      	ldrb	r3, [r1, #0]
 800353e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8003540:	784b      	ldrb	r3, [r1, #1]
 8003542:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003544:	78ca      	ldrb	r2, [r1, #3]
 8003546:	788b      	ldrb	r3, [r1, #2]
 8003548:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800354c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800354e:	794a      	ldrb	r2, [r1, #5]
 8003550:	790b      	ldrb	r3, [r1, #4]
 8003552:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003556:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003558:	79ca      	ldrb	r2, [r1, #7]
 800355a:	798b      	ldrb	r3, [r1, #6]
 800355c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003560:	80c3      	strh	r3, [r0, #6]
}
 8003562:	4770      	bx	lr

08003564 <USBD_CtlError>:
{
 8003564:	b510      	push	{r4, lr}
 8003566:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	f000 ff6b 	bl	8004444 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800356e:	4620      	mov	r0, r4
}
 8003570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003574:	2100      	movs	r1, #0
 8003576:	f000 bf65 	b.w	8004444 <USBD_LL_StallEP>

0800357a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800357a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800357c:	b188      	cbz	r0, 80035a2 <USBD_GetString+0x28>
 800357e:	2500      	movs	r5, #0
 8003580:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003582:	462b      	mov	r3, r5
 8003584:	3501      	adds	r5, #1
 8003586:	5d44      	ldrb	r4, [r0, r5]
 8003588:	2c00      	cmp	r4, #0
 800358a:	d1fa      	bne.n	8003582 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800358c:	b2db      	uxtb	r3, r3
 800358e:	3301      	adds	r3, #1
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003594:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003596:	2303      	movs	r3, #3
 8003598:	704b      	strb	r3, [r1, #1]
 800359a:	2302      	movs	r3, #2
    while (*desc != '\0')
 800359c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80035a0:	b905      	cbnz	r5, 80035a4 <USBD_GetString+0x2a>
}
 80035a2:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	54cd      	strb	r5, [r1, r3]
 80035a8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80035aa:	3302      	adds	r3, #2
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	548c      	strb	r4, [r1, r2]
 80035b0:	e7f4      	b.n	800359c <USBD_GetString+0x22>

080035b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80035b2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80035b4:	2202      	movs	r2, #2
{
 80035b6:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80035b8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80035bc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80035c0:	460a      	mov	r2, r1
 80035c2:	2100      	movs	r1, #0
 80035c4:	f000 ff7a 	bl	80044bc <USBD_LL_Transmit>

  return USBD_OK;
}
 80035c8:	2000      	movs	r0, #0
 80035ca:	bd10      	pop	{r4, pc}

080035cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80035cc:	b508      	push	{r3, lr}
 80035ce:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80035d0:	460a      	mov	r2, r1
 80035d2:	2100      	movs	r1, #0
 80035d4:	f000 ff72 	bl	80044bc <USBD_LL_Transmit>

  return USBD_OK;
}
 80035d8:	2000      	movs	r0, #0
 80035da:	bd08      	pop	{r3, pc}

080035dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80035dc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80035de:	2203      	movs	r2, #3
{
 80035e0:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80035e2:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80035e6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80035ea:	460a      	mov	r2, r1
 80035ec:	2100      	movs	r1, #0
 80035ee:	f000 ff73 	bl	80044d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80035f2:	2000      	movs	r0, #0
 80035f4:	bd10      	pop	{r4, pc}

080035f6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80035f6:	b508      	push	{r3, lr}
 80035f8:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80035fa:	460a      	mov	r2, r1
 80035fc:	2100      	movs	r1, #0
 80035fe:	f000 ff6b 	bl	80044d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003602:	2000      	movs	r0, #0
 8003604:	bd08      	pop	{r3, pc}

08003606 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003606:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003608:	2304      	movs	r3, #4
 800360a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800360e:	2300      	movs	r3, #0
 8003610:	461a      	mov	r2, r3
 8003612:	4619      	mov	r1, r3
 8003614:	f000 ff52 	bl	80044bc <USBD_LL_Transmit>

  return USBD_OK;
}
 8003618:	2000      	movs	r0, #0
 800361a:	bd08      	pop	{r3, pc}

0800361c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800361c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800361e:	2305      	movs	r3, #5
 8003620:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003624:	2300      	movs	r3, #0
 8003626:	461a      	mov	r2, r3
 8003628:	4619      	mov	r1, r3
 800362a:	f000 ff55 	bl	80044d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800362e:	2000      	movs	r0, #0
 8003630:	bd08      	pop	{r3, pc}
	...

08003634 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	2210      	movs	r2, #16
{
 8003636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800363a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	eb0d 0002 	add.w	r0, sp, r2
 8003640:	2100      	movs	r1, #0
 8003642:	f001 f82f 	bl	80046a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003646:	4b4f      	ldr	r3, [pc, #316]	; (8003784 <MX_GPIO_Init+0x150>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|CUT_12VOUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003648:	4f4f      	ldr	r7, [pc, #316]	; (8003788 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800364a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|DIR2_Pin|PUL2_Pin|EN1_Pin, GPIO_PIN_RESET);
 800364c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8003794 <MX_GPIO_Init+0x160>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003650:	f042 0210 	orr.w	r2, r2, #16
 8003654:	619a      	str	r2, [r3, #24]
 8003656:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR1_Pin|PUL1_Pin|SOL_LOCK1_Pin|SOL_LOCK2_Pin, GPIO_PIN_RESET);
 8003658:	4d4c      	ldr	r5, [pc, #304]	; (800378c <MX_GPIO_Init+0x158>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800365a:	f002 0210 	and.w	r2, r2, #16
 800365e:	9200      	str	r2, [sp, #0]
 8003660:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003662:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|CUT_12VOUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003664:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003666:	f042 0220 	orr.w	r2, r2, #32
 800366a:	619a      	str	r2, [r3, #24]
 800366c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|CUT_12VOUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 800366e:	f44f 5142 	mov.w	r1, #12416	; 0x3080
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003672:	f002 0220 	and.w	r2, r2, #32
 8003676:	9201      	str	r2, [sp, #4]
 8003678:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800367a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|CUT_12VOUT_Pin|LED3_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800367e:	f042 0204 	orr.w	r2, r2, #4
 8003682:	619a      	str	r2, [r3, #24]
 8003684:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003686:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003688:	f002 0204 	and.w	r2, r2, #4
 800368c:	9202      	str	r2, [sp, #8]
 800368e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003690:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003692:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003696:	f042 0208 	orr.w	r2, r2, #8
 800369a:	619a      	str	r2, [r3, #24]
 800369c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|CUT_12VOUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 800369e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	9303      	str	r3, [sp, #12]
 80036a6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|CUT_12VOUT_Pin|LED2_Pin, GPIO_PIN_RESET);
 80036a8:	f7fd f81e 	bl	80006e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN2_Pin|DIR2_Pin|PUL2_Pin|EN1_Pin, GPIO_PIN_RESET);
 80036ac:	4640      	mov	r0, r8
 80036ae:	2200      	movs	r2, #0
 80036b0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80036b4:	f7fd f818 	bl	80006e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIR1_Pin|PUL1_Pin|SOL_LOCK1_Pin|SOL_LOCK2_Pin, GPIO_PIN_RESET);
 80036b8:	4628      	mov	r0, r5
 80036ba:	2200      	movs	r2, #0
 80036bc:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 80036c0:	f7fd f812 	bl	80006e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80036c4:	2201      	movs	r2, #1
 80036c6:	4638      	mov	r0, r7
 80036c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036cc:	f7fd f80c 	bl	80006e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d0:	f44f 5362 	mov.w	r3, #14464	; 0x3880
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d4:	4638      	mov	r0, r7
 80036d6:	a904      	add	r1, sp, #16

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN2_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80036d8:	2711      	movs	r7, #17
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036da:	e9cd 3904 	strd	r3, r9, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e2:	f7fc ff11 	bl	8000508 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80036e6:	f44f 7390 	mov.w	r3, #288	; 0x120
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ea:	4640      	mov	r0, r8
 80036ec:	a904      	add	r1, sp, #16

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR2_Pin|PUL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ee:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80036f2:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fa:	f7fc ff05 	bl	8000508 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIR2_Pin|PUL2_Pin;
 80036fe:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003700:	4640      	mov	r0, r8
 8003702:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003704:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800370a:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370e:	f7fc fefb 	bl	8000508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR1_Pin|PUL1_Pin;
 8003712:	f44f 6382 	mov.w	r3, #1040	; 0x410
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003716:	4628      	mov	r0, r5
 8003718:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800371a:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800371e:	e9cd 4a06 	strd	r4, sl, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003722:	f7fc fef1 	bl	8000508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EI3_BLIMIT_Pin|EI5_TLIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003726:	2228      	movs	r2, #40	; 0x28
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	4628      	mov	r0, r5
 800372c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800372e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003734:	f7fc fee8 	bl	8000508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DOOR_Pin;
 8003738:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DOOR_GPIO_Port, &GPIO_InitStruct);
 800373a:	4628      	mov	r0, r5
 800373c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800373e:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DOOR_GPIO_Port, &GPIO_InitStruct);
 8003744:	f7fc fee0 	bl	8000508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SOL_LOCK1_Pin|SOL_LOCK2_Pin;
 8003748:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374c:	4628      	mov	r0, r5
 800374e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003750:	e9cd 3904 	strd	r3, r9, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003754:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003758:	f7fc fed6 	bl	8000508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800375c:	4622      	mov	r2, r4
 800375e:	4621      	mov	r1, r4
 8003760:	2009      	movs	r0, #9
 8003762:	f7fc fddd 	bl	8000320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003766:	2009      	movs	r0, #9
 8003768:	f7fc fe0c 	bl	8000384 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800376c:	4622      	mov	r2, r4
 800376e:	4621      	mov	r1, r4
 8003770:	2017      	movs	r0, #23
 8003772:	f7fc fdd5 	bl	8000320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003776:	2017      	movs	r0, #23
 8003778:	f7fc fe04 	bl	8000384 <HAL_NVIC_EnableIRQ>

}
 800377c:	b008      	add	sp, #32
 800377e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000
 8003788:	40011000 	.word	0x40011000
 800378c:	40010c00 	.word	0x40010c00
 8003790:	10210000 	.word	0x10210000
 8003794:	40010800 	.word	0x40010800

08003798 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8003798:	b510      	push	{r4, lr}
 800379a:	4614      	mov	r4, r2
	HAL_UART_Transmit(&DEBUGPORT, (uint8_t*) ptr, (uint16_t) len, 0xFFFFFFFF);
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	b292      	uxth	r2, r2
 80037a2:	4802      	ldr	r0, [pc, #8]	; (80037ac <_write+0x14>)
 80037a4:	f7fe fae2 	bl	8001d6c <HAL_UART_Transmit>
	return len;
}
 80037a8:	4620      	mov	r0, r4
 80037aa:	bd10      	pop	{r4, pc}
 80037ac:	2000060c 	.word	0x2000060c

080037b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037b0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037b2:	2610      	movs	r6, #16
{
 80037b4:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037b6:	4632      	mov	r2, r6
 80037b8:	2100      	movs	r1, #0
 80037ba:	a80f      	add	r0, sp, #60	; 0x3c
 80037bc:	f000 ff72 	bl	80046a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037c0:	2214      	movs	r2, #20
 80037c2:	2100      	movs	r1, #0
 80037c4:	a801      	add	r0, sp, #4
 80037c6:	f000 ff6d 	bl	80046a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037ca:	2218      	movs	r2, #24
 80037cc:	2100      	movs	r1, #0
 80037ce:	eb0d 0002 	add.w	r0, sp, r2
 80037d2:	f000 ff67 	bl	80046a4 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037d6:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037d8:	2201      	movs	r2, #1
 80037da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037de:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037e4:	e9cd 5313 	strd	r5, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ec:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037ee:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037f0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037f2:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037f4:	f7fd fd8a 	bl	800130c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037f8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037fa:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003802:	4629      	mov	r1, r5
 8003804:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003806:	e9cd 3404 	strd	r3, r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800380a:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800380c:	f7fd ff54 	bl	80016b8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003810:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003812:	9606      	str	r6, [sp, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003814:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003816:	f7fe f80b 	bl	8001830 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800381a:	b016      	add	sp, #88	; 0x58
 800381c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003820 <check_tablet_alive>:
	} else
		door_check++;

}

void check_tablet_alive(int max_trying_count) {
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CDC_Transmit_FS((uint8_t*) "callme\r", (uint16_t) strlen("callme\r"));
 8003822:	2107      	movs	r1, #7
void check_tablet_alive(int max_trying_count) {
 8003824:	4607      	mov	r7, r0
	CDC_Transmit_FS((uint8_t*) "callme\r", (uint16_t) strlen("callme\r"));
 8003826:	4817      	ldr	r0, [pc, #92]	; (8003884 <check_tablet_alive+0x64>)
 8003828:	f000 fd26 	bl	8004278 <CDC_Transmit_FS>
	HAL_UART_Transmit(&COMMPORT, (uint8_t*) "callme\r",
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	2207      	movs	r2, #7
 8003832:	4914      	ldr	r1, [pc, #80]	; (8003884 <check_tablet_alive+0x64>)
 8003834:	4814      	ldr	r0, [pc, #80]	; (8003888 <check_tablet_alive+0x68>)
 8003836:	f7fe fa99 	bl	8001d6c <HAL_UART_Transmit>
			(uint16_t) strlen("callme\r"), 0xFFFFFFFF);
	printf(" alive calling!\r\n");
 800383a:	4814      	ldr	r0, [pc, #80]	; (800388c <check_tablet_alive+0x6c>)
 800383c:	f000 ffc0 	bl	80047c0 <puts>
	if (PAD_boot_flag == 1) {
		alive_call_fail++;
	}
	time_second = 0;
 8003840:	2500      	movs	r5, #0
	if (PAD_boot_flag == 1) {
 8003842:	4c13      	ldr	r4, [pc, #76]	; (8003890 <check_tablet_alive+0x70>)
 8003844:	4e13      	ldr	r6, [pc, #76]	; (8003894 <check_tablet_alive+0x74>)
 8003846:	7822      	ldrb	r2, [r4, #0]
 8003848:	2a01      	cmp	r2, #1
		alive_call_fail++;
 800384a:	bf02      	ittt	eq
 800384c:	6833      	ldreq	r3, [r6, #0]
 800384e:	3301      	addeq	r3, #1
 8003850:	6033      	streq	r3, [r6, #0]
	time_second = 0;
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <check_tablet_alive+0x78>)
 8003854:	601d      	str	r5, [r3, #0]

	if (alive_call_fail >= max_trying_count) { // check alive for 'max_trying_count' times
 8003856:	6833      	ldr	r3, [r6, #0]
 8003858:	42bb      	cmp	r3, r7
 800385a:	db12      	blt.n	8003882 <check_tablet_alive+0x62>
		HAL_GPIO_WritePin(CUT_12VOUT_GPIO_Port, CUT_12VOUT_Pin, GPIO_PIN_SET);
 800385c:	2201      	movs	r2, #1
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	480e      	ldr	r0, [pc, #56]	; (800389c <check_tablet_alive+0x7c>)
 8003862:	f7fc ff41 	bl	80006e8 <HAL_GPIO_WritePin>
		printf(" Tablet died, rebooted!\r\n"); // control relay for powering tablet
 8003866:	480e      	ldr	r0, [pc, #56]	; (80038a0 <check_tablet_alive+0x80>)
 8003868:	f000 ffaa 	bl	80047c0 <puts>
		HAL_Delay(2000);
 800386c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003870:	f7fc fd32 	bl	80002d8 <HAL_Delay>
		HAL_GPIO_WritePin(CUT_12VOUT_GPIO_Port, CUT_12VOUT_Pin, GPIO_PIN_RESET);
 8003874:	462a      	mov	r2, r5
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	4808      	ldr	r0, [pc, #32]	; (800389c <check_tablet_alive+0x7c>)
 800387a:	f7fc ff35 	bl	80006e8 <HAL_GPIO_WritePin>
		alive_call_fail = 0;
 800387e:	6035      	str	r5, [r6, #0]
		PAD_boot_flag = 0;
 8003880:	7025      	strb	r5, [r4, #0]
	}
}
 8003882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003884:	08005d1d 	.word	0x08005d1d
 8003888:	2000060c 	.word	0x2000060c
 800388c:	08005d25 	.word	0x08005d25
 8003890:	2000027a 	.word	0x2000027a
 8003894:	200002ec 	.word	0x200002ec
 8003898:	20000304 	.word	0x20000304
 800389c:	40011000 	.word	0x40011000
 80038a0:	08005d36 	.word	0x08005d36

080038a4 <Report_to_Server>:

void Report_to_Server(int report_path) {
 80038a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int total = 0, sum = 0;

	for (int i = 0; i < 3; i++)
		sum += Bstate.cmd[i];
 80038a6:	4a2b      	ldr	r2, [pc, #172]	; (8003954 <Report_to_Server+0xb0>)
void Report_to_Server(int report_path) {
 80038a8:	4606      	mov	r6, r0
	for (int i = 0; i < 2; i++) {
		sum += Bstate.door[i];
		sum += Bstate.lock[i];
		sum += Bstate.scan[i];
	}
	sum += Bstate.end[0];
 80038aa:	4613      	mov	r3, r2
		sum += Bstate.cmd[i];
 80038ac:	7851      	ldrb	r1, [r2, #1]
 80038ae:	7815      	ldrb	r5, [r2, #0]
	total = sum;
	total = total & 0xff;
	total = ~total + 1;

	sprintf(Txbuffer, "%s%s%s%s%s", Bstate.cmd, Bstate.door, Bstate.lock, Bstate.scan, Bstate.end);
 80038b0:	4c29      	ldr	r4, [pc, #164]	; (8003958 <Report_to_Server+0xb4>)
		sum += Bstate.cmd[i];
 80038b2:	440d      	add	r5, r1
 80038b4:	7891      	ldrb	r1, [r2, #2]
	sprintf(Txbuffer, "%s%s%s%s%s", Bstate.cmd, Bstate.door, Bstate.lock, Bstate.scan, Bstate.end);
 80038b6:	4620      	mov	r0, r4
		sum += Bstate.cmd[i];
 80038b8:	440d      	add	r5, r1
		sum += Bstate.door[i];
 80038ba:	7951      	ldrb	r1, [r2, #5]
 80038bc:	4429      	add	r1, r5
		sum += Bstate.lock[i];
 80038be:	7a95      	ldrb	r5, [r2, #10]
 80038c0:	4429      	add	r1, r5
		sum += Bstate.scan[i];
 80038c2:	7bd5      	ldrb	r5, [r2, #15]
 80038c4:	440d      	add	r5, r1
		sum += Bstate.door[i];
 80038c6:	7991      	ldrb	r1, [r2, #6]
 80038c8:	440d      	add	r5, r1
		sum += Bstate.lock[i];
 80038ca:	7ad1      	ldrb	r1, [r2, #11]
 80038cc:	4429      	add	r1, r5
		sum += Bstate.scan[i];
 80038ce:	7c15      	ldrb	r5, [r2, #16]
 80038d0:	4429      	add	r1, r5
	sum += Bstate.end[0];
 80038d2:	f813 5f14 	ldrb.w	r5, [r3, #20]!
	sprintf(Txbuffer, "%s%s%s%s%s", Bstate.cmd, Bstate.door, Bstate.lock, Bstate.scan, Bstate.end);
 80038d6:	9302      	str	r3, [sp, #8]
 80038d8:	f102 030f 	add.w	r3, r2, #15
	sum += Bstate.end[0];
 80038dc:	440d      	add	r5, r1
	sprintf(Txbuffer, "%s%s%s%s%s", Bstate.cmd, Bstate.door, Bstate.lock, Bstate.scan, Bstate.end);
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	f102 030a 	add.w	r3, r2, #10
 80038e4:	491d      	ldr	r1, [pc, #116]	; (800395c <Report_to_Server+0xb8>)
 80038e6:	9300      	str	r3, [sp, #0]
	total = total & 0xff;
 80038e8:	b2ed      	uxtb	r5, r5
	sprintf(Txbuffer, "%s%s%s%s%s", Bstate.cmd, Bstate.door, Bstate.lock, Bstate.scan, Bstate.end);
 80038ea:	1d53      	adds	r3, r2, #5
 80038ec:	f000 ff70 	bl	80047d0 <siprintf>
	total = ~total + 1;
 80038f0:	426d      	negs	r5, r5
	printf(" Txbuffer: %s\r\n", Txbuffer);
 80038f2:	4621      	mov	r1, r4
 80038f4:	481a      	ldr	r0, [pc, #104]	; (8003960 <Report_to_Server+0xbc>)
 80038f6:	f000 fedd 	bl	80046b4 <iprintf>

	Txbuffer[10] = total;	//checksum
 80038fa:	72a5      	strb	r5, [r4, #10]

	if (report_path == REPORT_CMD) {
 80038fc:	b9f6      	cbnz	r6, 800393c <Report_to_Server+0x98>
		if (Rxcplt_flag == 1) {
 80038fe:	4b19      	ldr	r3, [pc, #100]	; (8003964 <Report_to_Server+0xc0>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10c      	bne.n	8003920 <Report_to_Server+0x7c>
			CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer));
		}
	} else if (report_path == REPORT_DOOR) {
		CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer));
		HAL_UART_Transmit(&COMMPORT, (uint8_t*) Txbuffer,
				(uint16_t) strlen(Txbuffer), 0xFFFFFFFF);
 8003906:	4620      	mov	r0, r4
 8003908:	f7fc fc96 	bl	8000238 <strlen>
		HAL_UART_Transmit(&COMMPORT, (uint8_t*) Txbuffer,
 800390c:	f04f 33ff 	mov.w	r3, #4294967295
 8003910:	4621      	mov	r1, r4
 8003912:	b282      	uxth	r2, r0
 8003914:	4814      	ldr	r0, [pc, #80]	; (8003968 <Report_to_Server+0xc4>)
	 } else if(report_path == REPORT_DOOR) {
	 CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t)strlen(Txbuffer));
	 HAL_UART_Transmit(&COMMPORT, (uint8_t *)Txbuffer, (uint16_t)strlen(Txbuffer), 0xFFFFFFFF);
	 }
	 */
}
 8003916:	b004      	add	sp, #16
 8003918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Transmit(&COMMPORT, (uint8_t*) Txbuffer,
 800391c:	f7fe ba26 	b.w	8001d6c <HAL_UART_Transmit>
		} else if (CDC_flag == 1) {
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <Report_to_Server+0xc8>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d113      	bne.n	8003950 <Report_to_Server+0xac>
			CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer));
 8003928:	4620      	mov	r0, r4
 800392a:	f7fc fc85 	bl	8000238 <strlen>
 800392e:	b281      	uxth	r1, r0
 8003930:	4620      	mov	r0, r4
}
 8003932:	b004      	add	sp, #16
 8003934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer));
 8003938:	f000 bc9e 	b.w	8004278 <CDC_Transmit_FS>
	} else if (report_path == REPORT_DOOR) {
 800393c:	2e01      	cmp	r6, #1
 800393e:	d107      	bne.n	8003950 <Report_to_Server+0xac>
		CDC_Transmit_FS((uint8_t*) Txbuffer, (uint16_t) strlen(Txbuffer));
 8003940:	4620      	mov	r0, r4
 8003942:	f7fc fc79 	bl	8000238 <strlen>
 8003946:	b281      	uxth	r1, r0
 8003948:	4620      	mov	r0, r4
 800394a:	f000 fc95 	bl	8004278 <CDC_Transmit_FS>
 800394e:	e7da      	b.n	8003906 <Report_to_Server+0x62>
}
 8003950:	b004      	add	sp, #16
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	20000117 	.word	0x20000117
 8003958:	200002e0 	.word	0x200002e0
 800395c:	08005d4f 	.word	0x08005d4f
 8003960:	08005d5a 	.word	0x08005d5a
 8003964:	200002df 	.word	0x200002df
 8003968:	2000060c 	.word	0x2000060c
 800396c:	20000215 	.word	0x20000215

08003970 <check_door>:
	door_check_enable = 0;
 8003970:	2200      	movs	r2, #0
 8003972:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <check_door+0x9c>)
void check_door(void) {
 8003974:	b570      	push	{r4, r5, r6, lr}
	if (HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin) == GPIO_PIN_SET)
 8003976:	2140      	movs	r1, #64	; 0x40
 8003978:	4825      	ldr	r0, [pc, #148]	; (8003a10 <check_door+0xa0>)
	door_check_enable = 0;
 800397a:	601a      	str	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(DOOR_GPIO_Port, DOOR_Pin) == GPIO_PIN_SET)
 800397c:	f7fc feae 	bl	80006dc <HAL_GPIO_ReadPin>
 8003980:	2801      	cmp	r0, #1
		open_check++;   // open
 8003982:	bf0c      	ite	eq
 8003984:	4a23      	ldreq	r2, [pc, #140]	; (8003a14 <check_door+0xa4>)
		close_check++;  // close
 8003986:	4a24      	ldrne	r2, [pc, #144]	; (8003a18 <check_door+0xa8>)
 8003988:	6813      	ldr	r3, [r2, #0]
 800398a:	3301      	adds	r3, #1
 800398c:	6013      	str	r3, [r2, #0]
	if (door_check > 3) {  // 5 times when door_check is 0,1,2,3,4
 800398e:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <check_door+0xac>)
 8003990:	6813      	ldr	r3, [r2, #0]
 8003992:	4616      	mov	r6, r2
 8003994:	2b03      	cmp	r3, #3
 8003996:	dd36      	ble.n	8003a06 <check_door+0x96>
		if (open_check > 3) { // open
 8003998:	4d1e      	ldr	r5, [pc, #120]	; (8003a14 <check_door+0xa4>)
 800399a:	682a      	ldr	r2, [r5, #0]
 800399c:	2a03      	cmp	r2, #3
 800399e:	dd14      	ble.n	80039ca <check_door+0x5a>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80039a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039a4:	481e      	ldr	r0, [pc, #120]	; (8003a20 <check_door+0xb0>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	f7fc fe9e 	bl	80006e8 <HAL_GPIO_WritePin>
			if (!strcmp(Bstate.door, "1,")) {    // "1," == closed
 80039ac:	491d      	ldr	r1, [pc, #116]	; (8003a24 <check_door+0xb4>)
 80039ae:	481e      	ldr	r0, [pc, #120]	; (8003a28 <check_door+0xb8>)
 80039b0:	f7fc fc38 	bl	8000224 <strcmp>
 80039b4:	b948      	cbnz	r0, 80039ca <check_door+0x5a>
				strcpy(Bstate.door, "0,");
 80039b6:	491d      	ldr	r1, [pc, #116]	; (8003a2c <check_door+0xbc>)
 80039b8:	481b      	ldr	r0, [pc, #108]	; (8003a28 <check_door+0xb8>)
 80039ba:	f000 ff29 	bl	8004810 <strcpy>
				Report_to_Server(REPORT_DOOR);
 80039be:	2001      	movs	r0, #1
 80039c0:	f7ff ff70 	bl	80038a4 <Report_to_Server>
				printf(" Door is opened!\r\n");
 80039c4:	481a      	ldr	r0, [pc, #104]	; (8003a30 <check_door+0xc0>)
 80039c6:	f000 fefb 	bl	80047c0 <puts>
		if (close_check > 3) {  //close
 80039ca:	4c13      	ldr	r4, [pc, #76]	; (8003a18 <check_door+0xa8>)
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	2a03      	cmp	r2, #3
 80039d0:	dd14      	ble.n	80039fc <check_door+0x8c>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80039d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039d6:	4812      	ldr	r0, [pc, #72]	; (8003a20 <check_door+0xb0>)
 80039d8:	2200      	movs	r2, #0
 80039da:	f7fc fe85 	bl	80006e8 <HAL_GPIO_WritePin>
			if (!strcmp(Bstate.door, "0,")) {	// "0," == opened
 80039de:	4913      	ldr	r1, [pc, #76]	; (8003a2c <check_door+0xbc>)
 80039e0:	4811      	ldr	r0, [pc, #68]	; (8003a28 <check_door+0xb8>)
 80039e2:	f7fc fc1f 	bl	8000224 <strcmp>
 80039e6:	b948      	cbnz	r0, 80039fc <check_door+0x8c>
				strcpy(Bstate.door, "1,");
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <check_door+0xb4>)
 80039ea:	480f      	ldr	r0, [pc, #60]	; (8003a28 <check_door+0xb8>)
 80039ec:	f000 ff10 	bl	8004810 <strcpy>
				Report_to_Server(REPORT_DOOR);
 80039f0:	2001      	movs	r0, #1
 80039f2:	f7ff ff57 	bl	80038a4 <Report_to_Server>
				printf(" Door is closed!\r\n");
 80039f6:	480f      	ldr	r0, [pc, #60]	; (8003a34 <check_door+0xc4>)
 80039f8:	f000 fee2 	bl	80047c0 <puts>
		door_check = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	6033      	str	r3, [r6, #0]
		open_check = 0;
 8003a00:	602b      	str	r3, [r5, #0]
		close_check = 0;
 8003a02:	6023      	str	r3, [r4, #0]
}
 8003a04:	bd70      	pop	{r4, r5, r6, pc}
		door_check++;
 8003a06:	3301      	adds	r3, #1
 8003a08:	6013      	str	r3, [r2, #0]
}
 8003a0a:	e7fb      	b.n	8003a04 <check_door+0x94>
 8003a0c:	200002fc 	.word	0x200002fc
 8003a10:	40010c00 	.word	0x40010c00
 8003a14:	20000300 	.word	0x20000300
 8003a18:	200002f4 	.word	0x200002f4
 8003a1c:	200002f8 	.word	0x200002f8
 8003a20:	40011000 	.word	0x40011000
 8003a24:	08005d6a 	.word	0x08005d6a
 8003a28:	2000011c 	.word	0x2000011c
 8003a2c:	08005d6d 	.word	0x08005d6d
 8003a30:	08005d70 	.word	0x08005d70
 8003a34:	08005d82 	.word	0x08005d82

08003a38 <Rfid_Scanning>:

void Rfid_Scanning(int speed) {
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	4604      	mov	r4, r0
	uint8_t i = 0;

	printf(" scanning...... \r\n");
 8003a3c:	4816      	ldr	r0, [pc, #88]	; (8003a98 <Rfid_Scanning+0x60>)
 8003a3e:	f000 febf 	bl	80047c0 <puts>
	strcpy(Bstate.scan, "1,");  // ���� ����, ��ĵ��...
 8003a42:	4916      	ldr	r1, [pc, #88]	; (8003a9c <Rfid_Scanning+0x64>)
 8003a44:	4816      	ldr	r0, [pc, #88]	; (8003aa0 <Rfid_Scanning+0x68>)
 8003a46:	f000 fee3 	bl	8004810 <strcpy>
	Report_to_Server(REPORT_CMD);
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f7ff ff2a 	bl	80038a4 <Report_to_Server>

	for (i = 0; i < (speed * 2); ++i) {
 8003a50:	2500      	movs	r5, #0
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8003a52:	4e14      	ldr	r6, [pc, #80]	; (8003aa4 <Rfid_Scanning+0x6c>)
	for (i = 0; i < (speed * 2); ++i) {
 8003a54:	0064      	lsls	r4, r4, #1
 8003a56:	b2eb      	uxtb	r3, r5
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	f105 0501 	add.w	r5, r5, #1
 8003a5e:	db08      	blt.n	8003a72 <Rfid_Scanning+0x3a>
		HAL_Delay(500);
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		HAL_Delay(500);
	}
	strcpy(Bstate.scan, "0,");  // ���� ����, ��ĵ ��...
 8003a60:	4911      	ldr	r1, [pc, #68]	; (8003aa8 <Rfid_Scanning+0x70>)
 8003a62:	480f      	ldr	r0, [pc, #60]	; (8003aa0 <Rfid_Scanning+0x68>)
 8003a64:	f000 fed4 	bl	8004810 <strcpy>
	printf(" scan is completed!!\r\n");
}
 8003a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf(" scan is completed!!\r\n");
 8003a6c:	480f      	ldr	r0, [pc, #60]	; (8003aac <Rfid_Scanning+0x74>)
 8003a6e:	f000 bea7 	b.w	80047c0 <puts>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8003a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a76:	4630      	mov	r0, r6
 8003a78:	f7fc fe3b 	bl	80006f2 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8003a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a80:	f7fc fc2a 	bl	80002d8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8003a84:	4630      	mov	r0, r6
 8003a86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a8a:	f7fc fe32 	bl	80006f2 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8003a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a92:	f7fc fc21 	bl	80002d8 <HAL_Delay>
	for (i = 0; i < (speed * 2); ++i) {
 8003a96:	e7de      	b.n	8003a56 <Rfid_Scanning+0x1e>
 8003a98:	08005d94 	.word	0x08005d94
 8003a9c:	08005d6a 	.word	0x08005d6a
 8003aa0:	20000126 	.word	0x20000126
 8003aa4:	40011000 	.word	0x40011000
 8003aa8:	08005d6d 	.word	0x08005d6d
 8003aac:	08005da6 	.word	0x08005da6

08003ab0 <command_parsing>:
void command_parsing(char *str_ptr) {
 8003ab0:	b538      	push	{r3, r4, r5, lr}
	if (!strcmp(str_ptr, "OK")) {
 8003ab2:	4947      	ldr	r1, [pc, #284]	; (8003bd0 <command_parsing+0x120>)
void command_parsing(char *str_ptr) {
 8003ab4:	4605      	mov	r5, r0
	if (!strcmp(str_ptr, "OK")) {
 8003ab6:	f7fc fbb5 	bl	8000224 <strcmp>
 8003aba:	4604      	mov	r4, r0
 8003abc:	b960      	cbnz	r0, 8003ad8 <command_parsing+0x28>
		printf(" OK signal received\r\n");
 8003abe:	4845      	ldr	r0, [pc, #276]	; (8003bd4 <command_parsing+0x124>)
 8003ac0:	f000 fe7e 	bl	80047c0 <puts>
		str_ptr = strtok(NULL, ",");
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4944      	ldr	r1, [pc, #272]	; (8003bd8 <command_parsing+0x128>)
 8003ac8:	f000 feaa 	bl	8004820 <strtok>
		PAD_boot_flag = 1;
 8003acc:	2201      	movs	r2, #1
 8003ace:	4b43      	ldr	r3, [pc, #268]	; (8003bdc <command_parsing+0x12c>)
 8003ad0:	701a      	strb	r2, [r3, #0]
		alive_call_fail = 0;
 8003ad2:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <command_parsing+0x130>)
 8003ad4:	601c      	str	r4, [r3, #0]
}
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
	} else if (!strcmp(str_ptr, "BR")) {
 8003ad8:	4628      	mov	r0, r5
 8003ada:	4942      	ldr	r1, [pc, #264]	; (8003be4 <command_parsing+0x134>)
 8003adc:	f7fc fba2 	bl	8000224 <strcmp>
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	b958      	cbnz	r0, 8003afc <command_parsing+0x4c>
		printf(" Board Read\r\n");
 8003ae4:	4840      	ldr	r0, [pc, #256]	; (8003be8 <command_parsing+0x138>)
 8003ae6:	f000 fe6b 	bl	80047c0 <puts>
		str_ptr = strtok(NULL, ",");
 8003aea:	4620      	mov	r0, r4
 8003aec:	493a      	ldr	r1, [pc, #232]	; (8003bd8 <command_parsing+0x128>)
 8003aee:	f000 fe97 	bl	8004820 <strtok>
			Report_to_Server(REPORT_CMD);
 8003af2:	4620      	mov	r0, r4
}
 8003af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			Report_to_Server(REPORT_CMD);
 8003af8:	f7ff bed4 	b.w	80038a4 <Report_to_Server>
	} else if (!strcmp(str_ptr, "UD")) {
 8003afc:	4628      	mov	r0, r5
 8003afe:	493b      	ldr	r1, [pc, #236]	; (8003bec <command_parsing+0x13c>)
 8003b00:	f7fc fb90 	bl	8000224 <strcmp>
 8003b04:	4604      	mov	r4, r0
 8003b06:	bb08      	cbnz	r0, 8003b4c <command_parsing+0x9c>
		printf(" Unlock Door\r\n");
 8003b08:	4839      	ldr	r0, [pc, #228]	; (8003bf0 <command_parsing+0x140>)
 8003b0a:	f000 fe59 	bl	80047c0 <puts>
		str_ptr = strtok(NULL, ",");
 8003b0e:	4932      	ldr	r1, [pc, #200]	; (8003bd8 <command_parsing+0x128>)
 8003b10:	4620      	mov	r0, r4
 8003b12:	f000 fe85 	bl	8004820 <strtok>
		HAL_GPIO_WritePin(SOL_LOCK1_GPIO_Port, SOL_LOCK1_Pin, GPIO_PIN_RESET); // lock SOL_LOCK1 ---> Unlock of EM Lock
 8003b16:	4622      	mov	r2, r4
 8003b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b1c:	4835      	ldr	r0, [pc, #212]	; (8003bf4 <command_parsing+0x144>)
 8003b1e:	f7fc fde3 	bl	80006e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOL_LOCK2_GPIO_Port, SOL_LOCK2_Pin, GPIO_PIN_RESET); // lock SOL_LOCK2 ---> Unlock of EM Lock
 8003b22:	4622      	mov	r2, r4
 8003b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b28:	4832      	ldr	r0, [pc, #200]	; (8003bf4 <command_parsing+0x144>)
 8003b2a:	f7fc fddd 	bl	80006e8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);	// 1s delay for unlock operation
 8003b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b32:	f7fc fbd1 	bl	80002d8 <HAL_Delay>
		strcpy(Bstate.lock, "0,");  // ���� ����
 8003b36:	4930      	ldr	r1, [pc, #192]	; (8003bf8 <command_parsing+0x148>)
 8003b38:	4830      	ldr	r0, [pc, #192]	; (8003bfc <command_parsing+0x14c>)
 8003b3a:	f000 fe69 	bl	8004810 <strcpy>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8003b3e:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8003b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b44:	482e      	ldr	r0, [pc, #184]	; (8003c00 <command_parsing+0x150>)
 8003b46:	f7fc fdcf 	bl	80006e8 <HAL_GPIO_WritePin>
		Report_to_Server(REPORT_CMD);
 8003b4a:	e7d2      	b.n	8003af2 <command_parsing+0x42>
	} else if (!strcmp(str_ptr, "LD")) {
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	492d      	ldr	r1, [pc, #180]	; (8003c04 <command_parsing+0x154>)
 8003b50:	f7fc fb68 	bl	8000224 <strcmp>
 8003b54:	4604      	mov	r4, r0
 8003b56:	b9e0      	cbnz	r0, 8003b92 <command_parsing+0xe2>
		printf(" Lock Door\r\n");
 8003b58:	482b      	ldr	r0, [pc, #172]	; (8003c08 <command_parsing+0x158>)
 8003b5a:	f000 fe31 	bl	80047c0 <puts>
		str_ptr = strtok(NULL, ",");
 8003b5e:	491e      	ldr	r1, [pc, #120]	; (8003bd8 <command_parsing+0x128>)
 8003b60:	4620      	mov	r0, r4
 8003b62:	f000 fe5d 	bl	8004820 <strtok>
		HAL_GPIO_WritePin(SOL_LOCK1_GPIO_Port, SOL_LOCK1_Pin, GPIO_PIN_SET); // unlock SOL_LOCK1  ---> Lock of EM Lock
 8003b66:	2201      	movs	r2, #1
 8003b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b6c:	4821      	ldr	r0, [pc, #132]	; (8003bf4 <command_parsing+0x144>)
 8003b6e:	f7fc fdbb 	bl	80006e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SOL_LOCK2_GPIO_Port, SOL_LOCK2_Pin, GPIO_PIN_SET); // unlock SOL_LOCK2  ---> Lock of EM Lock
 8003b72:	2201      	movs	r2, #1
 8003b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b78:	481e      	ldr	r0, [pc, #120]	; (8003bf4 <command_parsing+0x144>)
 8003b7a:	f7fc fdb5 	bl	80006e8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);	// 1s delay for lock operation
 8003b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b82:	f7fc fba9 	bl	80002d8 <HAL_Delay>
		strcpy(Bstate.lock, "1,");  // ���� ����
 8003b86:	4921      	ldr	r1, [pc, #132]	; (8003c0c <command_parsing+0x15c>)
 8003b88:	481c      	ldr	r0, [pc, #112]	; (8003bfc <command_parsing+0x14c>)
 8003b8a:	f000 fe41 	bl	8004810 <strcpy>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8003b8e:	4622      	mov	r2, r4
 8003b90:	e7d6      	b.n	8003b40 <command_parsing+0x90>
	} else if (!strcmp(str_ptr, "RS")) {
 8003b92:	4628      	mov	r0, r5
 8003b94:	491e      	ldr	r1, [pc, #120]	; (8003c10 <command_parsing+0x160>)
 8003b96:	f7fc fb45 	bl	8000224 <strcmp>
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d19a      	bne.n	8003ad6 <command_parsing+0x26>
		printf(" RFID Scanning\r\n");
 8003ba0:	481c      	ldr	r0, [pc, #112]	; (8003c14 <command_parsing+0x164>)
 8003ba2:	f000 fe0d 	bl	80047c0 <puts>
		str_ptr = strtok(NULL, ",");
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	490b      	ldr	r1, [pc, #44]	; (8003bd8 <command_parsing+0x128>)
 8003baa:	f000 fe39 	bl	8004820 <strtok>
		if (str_ptr == '\0') {
 8003bae:	4605      	mov	r5, r0
 8003bb0:	b920      	cbnz	r0, 8003bbc <command_parsing+0x10c>
}
 8003bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printf(" need more parameter!\r\n");
 8003bb6:	4818      	ldr	r0, [pc, #96]	; (8003c18 <command_parsing+0x168>)
 8003bb8:	f000 be02 	b.w	80047c0 <puts>
			printf(" speed:%s\r\n", str_ptr);
 8003bbc:	4601      	mov	r1, r0
 8003bbe:	4817      	ldr	r0, [pc, #92]	; (8003c1c <command_parsing+0x16c>)
 8003bc0:	f000 fd78 	bl	80046b4 <iprintf>
			Rfid_Scanning(atoi(str_ptr));
 8003bc4:	4628      	mov	r0, r5
 8003bc6:	f000 fd3e 	bl	8004646 <atoi>
 8003bca:	f7ff ff35 	bl	8003a38 <Rfid_Scanning>
 8003bce:	e790      	b.n	8003af2 <command_parsing+0x42>
 8003bd0:	08005dbc 	.word	0x08005dbc
 8003bd4:	08005dbf 	.word	0x08005dbf
 8003bd8:	08005d6e 	.word	0x08005d6e
 8003bdc:	2000027a 	.word	0x2000027a
 8003be0:	200002ec 	.word	0x200002ec
 8003be4:	08005dd4 	.word	0x08005dd4
 8003be8:	08005dd7 	.word	0x08005dd7
 8003bec:	08005de4 	.word	0x08005de4
 8003bf0:	08005de7 	.word	0x08005de7
 8003bf4:	40010c00 	.word	0x40010c00
 8003bf8:	08005d6d 	.word	0x08005d6d
 8003bfc:	20000121 	.word	0x20000121
 8003c00:	40011000 	.word	0x40011000
 8003c04:	08005df5 	.word	0x08005df5
 8003c08:	08005df8 	.word	0x08005df8
 8003c0c:	08005d6a 	.word	0x08005d6a
 8003c10:	08005e04 	.word	0x08005e04
 8003c14:	08005e07 	.word	0x08005e07
 8003c18:	08005e17 	.word	0x08005e17
 8003c1c:	08005e2e 	.word	0x08005e2e

08003c20 <main>:
{
 8003c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Init();
 8003c24:	f7fc fb34 	bl	8000290 <HAL_Init>
  SystemClock_Config();
 8003c28:	f7ff fdc2 	bl	80037b0 <SystemClock_Config>
  MX_GPIO_Init();
 8003c2c:	f7ff fd02 	bl	8003634 <MX_GPIO_Init>
  MX_TIM6_Init();
 8003c30:	f000 f9ac 	bl	8003f8c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8003c34:	f000 fa22 	bl	800407c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003c38:	f000 fa3c 	bl	80040b4 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8003c3c:	f000 f9ca 	bl	8003fd4 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8003c40:	f000 fab6 	bl	80041b0 <MX_USB_DEVICE_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c44:	2200      	movs	r2, #0
 8003c46:	2025      	movs	r0, #37	; 0x25
 8003c48:	4611      	mov	r1, r2
 8003c4a:	f7fc fb69 	bl	8000320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c4e:	2025      	movs	r0, #37	; 0x25
 8003c50:	f7fc fb98 	bl	8000384 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003c54:	2200      	movs	r2, #0
 8003c56:	2036      	movs	r0, #54	; 0x36
 8003c58:	4611      	mov	r1, r2
 8003c5a:	f7fc fb61 	bl	8000320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003c5e:	2036      	movs	r0, #54	; 0x36
 8003c60:	f7fc fb90 	bl	8000384 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c64:	2200      	movs	r2, #0
 8003c66:	2026      	movs	r0, #38	; 0x26
 8003c68:	4611      	mov	r1, r2
 8003c6a:	f7fc fb59 	bl	8000320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c6e:	2026      	movs	r0, #38	; 0x26
 8003c70:	f7fc fb88 	bl	8000384 <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&COMMPORT, &COMMDATA, 1);
 8003c74:	2201      	movs	r2, #1
 8003c76:	492f      	ldr	r1, [pc, #188]	; (8003d34 <main+0x114>)
 8003c78:	482f      	ldr	r0, [pc, #188]	; (8003d38 <main+0x118>)
 8003c7a:	f7fe f8cc 	bl	8001e16 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8003c7e:	482f      	ldr	r0, [pc, #188]	; (8003d3c <main+0x11c>)
 8003c80:	f7fd fe4e 	bl	8001920 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003c84:	482e      	ldr	r0, [pc, #184]	; (8003d40 <main+0x120>)
 8003c86:	f7fd fe4b 	bl	8001920 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(SOL_LOCK1_GPIO_Port, SOL_LOCK1_Pin, GPIO_PIN_SET); // unlock SOL_LOCK1 --> LOCK of EM Lock
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c90:	482c      	ldr	r0, [pc, #176]	; (8003d44 <main+0x124>)
 8003c92:	f7fc fd29 	bl	80006e8 <HAL_GPIO_WritePin>
		if (CDC_flag == 1) {
 8003c96:	4d2c      	ldr	r5, [pc, #176]	; (8003d48 <main+0x128>)
		HAL_GPIO_WritePin(SOL_LOCK2_GPIO_Port, SOL_LOCK2_Pin, GPIO_PIN_SET); // unlock SOL_LOCK2 --> LOCK of EM Lock
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c9e:	4829      	ldr	r0, [pc, #164]	; (8003d44 <main+0x124>)
 8003ca0:	f7fc fd22 	bl	80006e8 <HAL_GPIO_WritePin>
	printf(" hello? \r\n");     // ǥ�� ���? printf�� ����Ͽ�?...
 8003ca4:	4829      	ldr	r0, [pc, #164]	; (8003d4c <main+0x12c>)
 8003ca6:	f000 fd8b 	bl	80047c0 <puts>
 8003caa:	462f      	mov	r7, r5
			printf(" Received CDC data: %s\r\n", CDCbuffer);
 8003cac:	4e28      	ldr	r6, [pc, #160]	; (8003d50 <main+0x130>)
		if (CDC_flag == 1) {
 8003cae:	782b      	ldrb	r3, [r5, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d113      	bne.n	8003cdc <main+0xbc>
			printf(" Received CDC data: %s\r\n", CDCbuffer);
 8003cb4:	4926      	ldr	r1, [pc, #152]	; (8003d50 <main+0x130>)
 8003cb6:	4827      	ldr	r0, [pc, #156]	; (8003d54 <main+0x134>)
 8003cb8:	f000 fcfc 	bl	80046b4 <iprintf>
			if (CDCbuffer[0] != '\0') {
 8003cbc:	7833      	ldrb	r3, [r6, #0]
 8003cbe:	b15b      	cbz	r3, 8003cd8 <main+0xb8>
				str_ptr = strtok(CDCbuffer, ",");
 8003cc0:	4925      	ldr	r1, [pc, #148]	; (8003d58 <main+0x138>)
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	f000 fdac 	bl	8004820 <strtok>
 8003cc8:	4604      	mov	r4, r0
				printf(" command: %s\r\n", str_ptr);
 8003cca:	4601      	mov	r1, r0
 8003ccc:	4823      	ldr	r0, [pc, #140]	; (8003d5c <main+0x13c>)
 8003cce:	f000 fcf1 	bl	80046b4 <iprintf>
				command_parsing(str_ptr);
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff feec 	bl	8003ab0 <command_parsing>
			CDC_flag = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	703b      	strb	r3, [r7, #0]
		if (Rxcplt_flag == 1) {
 8003cdc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003d74 <main+0x154>
 8003ce0:	f898 3000 	ldrb.w	r3, [r8]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d117      	bne.n	8003d18 <main+0xf8>
			printf(" Received data: %s\r\n", Rxbuffer);
 8003ce8:	4c1d      	ldr	r4, [pc, #116]	; (8003d60 <main+0x140>)
 8003cea:	481e      	ldr	r0, [pc, #120]	; (8003d64 <main+0x144>)
 8003cec:	4621      	mov	r1, r4
 8003cee:	f000 fce1 	bl	80046b4 <iprintf>
			if (Rxbuffer[0] != '\0') {
 8003cf2:	7823      	ldrb	r3, [r4, #0]
 8003cf4:	b15b      	cbz	r3, 8003d0e <main+0xee>
				str_ptr = strtok(Rxbuffer, ",");
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	4917      	ldr	r1, [pc, #92]	; (8003d58 <main+0x138>)
 8003cfa:	f000 fd91 	bl	8004820 <strtok>
 8003cfe:	4604      	mov	r4, r0
				printf(" command: %s\r\n", str_ptr);
 8003d00:	4601      	mov	r1, r0
 8003d02:	4816      	ldr	r0, [pc, #88]	; (8003d5c <main+0x13c>)
 8003d04:	f000 fcd6 	bl	80046b4 <iprintf>
				command_parsing(str_ptr);
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f7ff fed1 	bl	8003ab0 <command_parsing>
			buf_index = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	4a15      	ldr	r2, [pc, #84]	; (8003d68 <main+0x148>)
			Rxcplt_flag = 0;
 8003d12:	f888 3000 	strb.w	r3, [r8]
			buf_index = 0;
 8003d16:	7013      	strb	r3, [r2, #0]
		if (time_second >= ALIVE_PRIOD)
 8003d18:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <main+0x14c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2bb3      	cmp	r3, #179	; 0xb3
 8003d1e:	dd02      	ble.n	8003d26 <main+0x106>
			check_tablet_alive(3);
 8003d20:	2003      	movs	r0, #3
 8003d22:	f7ff fd7d 	bl	8003820 <check_tablet_alive>
		if (door_check_enable == 1)
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <main+0x150>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d1bf      	bne.n	8003cae <main+0x8e>
			check_door();
 8003d2e:	f7ff fe1f 	bl	8003970 <check_door>
 8003d32:	e7bc      	b.n	8003cae <main+0x8e>
 8003d34:	20000538 	.word	0x20000538
 8003d38:	2000060c 	.word	0x2000060c
 8003d3c:	2000053c 	.word	0x2000053c
 8003d40:	20000584 	.word	0x20000584
 8003d44:	40010c00 	.word	0x40010c00
 8003d48:	20000215 	.word	0x20000215
 8003d4c:	08005e3a 	.word	0x08005e3a
 8003d50:	20000216 	.word	0x20000216
 8003d54:	08005e44 	.word	0x08005e44
 8003d58:	08005d6e 	.word	0x08005d6e
 8003d5c:	08005e5d 	.word	0x08005e5d
 8003d60:	2000027b 	.word	0x2000027b
 8003d64:	08005e6c 	.word	0x08005e6c
 8003d68:	200002f0 	.word	0x200002f0
 8003d6c:	20000304 	.word	0x20000304
 8003d70:	200002fc 	.word	0x200002fc
 8003d74:	200002df 	.word	0x200002df

08003d78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	// printf("RxINT_Routine");
	if (huart->Instance == COMMUART) {
 8003d78:	6802      	ldr	r2, [r0, #0]
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_UART_RxCpltCallback+0x40>)
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d119      	bne.n	8003db4 <HAL_UART_RxCpltCallback+0x3c>
		if (COMMDATA == EOT) {
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_UART_RxCpltCallback+0x44>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b0d      	cmp	r3, #13
 8003d86:	d10c      	bne.n	8003da2 <HAL_UART_RxCpltCallback+0x2a>
			Rxbuffer[buf_index] = '\0';
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <HAL_UART_RxCpltCallback+0x48>)
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <HAL_UART_RxCpltCallback+0x4c>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	54d1      	strb	r1, [r2, r3]
			Rxcplt_flag = 1;
 8003d92:	2201      	movs	r2, #1
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_UART_RxCpltCallback+0x50>)
 8003d96:	701a      	strb	r2, [r3, #0]
		} else if (COMMDATA != 0x00) {			// except NULL(0x00)
			Rxbuffer[buf_index++] = COMMDATA;
		}

		HAL_UART_Receive_IT(&COMMPORT, &COMMDATA, 1);
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4908      	ldr	r1, [pc, #32]	; (8003dbc <HAL_UART_RxCpltCallback+0x44>)
 8003d9c:	480b      	ldr	r0, [pc, #44]	; (8003dcc <HAL_UART_RxCpltCallback+0x54>)
 8003d9e:	f7fe b83a 	b.w	8001e16 <HAL_UART_Receive_IT>
		} else if (COMMDATA != 0x00) {			// except NULL(0x00)
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f8      	beq.n	8003d98 <HAL_UART_RxCpltCallback+0x20>
			Rxbuffer[buf_index++] = COMMDATA;
 8003da6:	4906      	ldr	r1, [pc, #24]	; (8003dc0 <HAL_UART_RxCpltCallback+0x48>)
 8003da8:	780a      	ldrb	r2, [r1, #0]
 8003daa:	1c50      	adds	r0, r2, #1
 8003dac:	7008      	strb	r0, [r1, #0]
 8003dae:	4905      	ldr	r1, [pc, #20]	; (8003dc4 <HAL_UART_RxCpltCallback+0x4c>)
 8003db0:	548b      	strb	r3, [r1, r2]
 8003db2:	e7f1      	b.n	8003d98 <HAL_UART_RxCpltCallback+0x20>

	}
}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40004400 	.word	0x40004400
 8003dbc:	20000538 	.word	0x20000538
 8003dc0:	200002f0 	.word	0x200002f0
 8003dc4:	2000027b 	.word	0x2000027b
 8003dc8:	200002df 	.word	0x200002df
 8003dcc:	2000060c 	.word	0x2000060c

08003dd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM6) {
 8003dd0:	6803      	ldr	r3, [r0, #0]
 8003dd2:	4a07      	ldr	r2, [pc, #28]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_PeriodElapsedCallback+0x12>
		time_second++;
 8003dd8:	4a06      	ldr	r2, [pc, #24]	; (8003df4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	6013      	str	r3, [r2, #0]
		// HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
		// printf(" alive_call_fail: %d,  time: %d\r\n", alive_call_fail, time_second);
		// CDC_Transmit_FS("CDC_TX test...\r\n", sizeof("CDC_TX test...\r\n"));
	}
	if (htim->Instance == TIM7) {
 8003de0:	4770      	bx	lr
 8003de2:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003de4:	4293      	cmp	r3, r2
		door_check_enable = 1;
 8003de6:	bf02      	ittt	eq
 8003de8:	2201      	moveq	r2, #1
 8003dea:	4b04      	ldreq	r3, [pc, #16]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003dec:	601a      	streq	r2, [r3, #0]
	}
}
 8003dee:	4770      	bx	lr
 8003df0:	40001000 	.word	0x40001000
 8003df4:	20000304 	.word	0x20000304
 8003df8:	40001400 	.word	0x40001400
 8003dfc:	200002fc 	.word	0x200002fc

08003e00 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	/* if(GPIO_Pin == EI5_TLIMIT_Pin) {
	 printf("TLIMIT click!!!\r\n");
	 } */

	if(GPIO_Pin == EI3_BLIMIT_Pin) {
 8003e00:	2808      	cmp	r0, #8
 8003e02:	d102      	bne.n	8003e0a <HAL_GPIO_EXTI_Callback+0xa>
	 printf("BLIMIT click!!!\r\n");
 8003e04:	4801      	ldr	r0, [pc, #4]	; (8003e0c <HAL_GPIO_EXTI_Callback+0xc>)
 8003e06:	f000 bcdb 	b.w	80047c0 <puts>
	 }

}
 8003e0a:	4770      	bx	lr
 8003e0c:	08005e81 	.word	0x08005e81

08003e10 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e14:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <HAL_MspInit+0x3c>)
{
 8003e16:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	619a      	str	r2, [r3, #24]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	f002 0201 	and.w	r2, r2, #1
 8003e26:	9200      	str	r2, [sp, #0]
 8003e28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e30:	61da      	str	r2, [r3, #28]
 8003e32:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e34:	4a07      	ldr	r2, [pc, #28]	; (8003e54 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e3e:	6853      	ldr	r3, [r2, #4]
 8003e40:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e4a:	b002      	add	sp, #8
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40010000 	.word	0x40010000

08003e58 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e58:	4770      	bx	lr

08003e5a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e5a:	e7fe      	b.n	8003e5a <HardFault_Handler>

08003e5c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e5c:	e7fe      	b.n	8003e5c <MemManage_Handler>

08003e5e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e5e:	e7fe      	b.n	8003e5e <BusFault_Handler>

08003e60 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e60:	e7fe      	b.n	8003e60 <UsageFault_Handler>

08003e62 <SVC_Handler>:
 8003e62:	4770      	bx	lr

08003e64 <DebugMon_Handler>:
 8003e64:	4770      	bx	lr

08003e66 <PendSV_Handler>:
 8003e66:	4770      	bx	lr

08003e68 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e68:	f7fc ba24 	b.w	80002b4 <HAL_IncTick>

08003e6c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003e6c:	2008      	movs	r0, #8
 8003e6e:	f7fc bc49 	b.w	8000704 <HAL_GPIO_EXTI_IRQHandler>
	...

08003e74 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003e74:	4801      	ldr	r0, [pc, #4]	; (8003e7c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003e76:	f7fc bcf7 	b.w	8000868 <HAL_PCD_IRQHandler>
 8003e7a:	bf00      	nop
 8003e7c:	200010e0 	.word	0x200010e0

08003e80 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003e80:	2020      	movs	r0, #32
 8003e82:	f7fc bc3f 	b.w	8000704 <HAL_GPIO_EXTI_IRQHandler>
	...

08003e88 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e88:	4801      	ldr	r0, [pc, #4]	; (8003e90 <USART1_IRQHandler+0x8>)
 8003e8a:	f7fe b829 	b.w	8001ee0 <HAL_UART_IRQHandler>
 8003e8e:	bf00      	nop
 8003e90:	200005cc 	.word	0x200005cc

08003e94 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e94:	4801      	ldr	r0, [pc, #4]	; (8003e9c <USART2_IRQHandler+0x8>)
 8003e96:	f7fe b823 	b.w	8001ee0 <HAL_UART_IRQHandler>
 8003e9a:	bf00      	nop
 8003e9c:	2000060c 	.word	0x2000060c

08003ea0 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ea0:	4801      	ldr	r0, [pc, #4]	; (8003ea8 <TIM6_IRQHandler+0x8>)
 8003ea2:	f7fd bd73 	b.w	800198c <HAL_TIM_IRQHandler>
 8003ea6:	bf00      	nop
 8003ea8:	2000053c 	.word	0x2000053c

08003eac <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003eac:	4801      	ldr	r0, [pc, #4]	; (8003eb4 <TIM7_IRQHandler+0x8>)
 8003eae:	f7fd bd6d 	b.w	800198c <HAL_TIM_IRQHandler>
 8003eb2:	bf00      	nop
 8003eb4:	20000584 	.word	0x20000584

08003eb8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003eb8:	2001      	movs	r0, #1
 8003eba:	4770      	bx	lr

08003ebc <_kill>:

int _kill(int pid, int sig)
{
 8003ebc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003ebe:	f000 fbc7 	bl	8004650 <__errno>
 8003ec2:	2316      	movs	r3, #22
 8003ec4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eca:	bd08      	pop	{r3, pc}

08003ecc <_exit>:

void _exit (int status)
{
 8003ecc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003ece:	f000 fbbf 	bl	8004650 <__errno>
 8003ed2:	2316      	movs	r3, #22
 8003ed4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003ed6:	e7fe      	b.n	8003ed6 <_exit+0xa>

08003ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	460e      	mov	r6, r1
 8003edc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ede:	2500      	movs	r5, #0
 8003ee0:	42a5      	cmp	r5, r4
 8003ee2:	db01      	blt.n	8003ee8 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8003ee8:	f3af 8000 	nop.w
 8003eec:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eee:	3501      	adds	r5, #1
 8003ef0:	e7f6      	b.n	8003ee0 <_read+0x8>
	...

08003ef4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003ef4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <_sbrk+0x2c>)
{
 8003ef8:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003efa:	6819      	ldr	r1, [r3, #0]
 8003efc:	b909      	cbnz	r1, 8003f02 <_sbrk+0xe>
		heap_end = &end;
 8003efe:	4909      	ldr	r1, [pc, #36]	; (8003f24 <_sbrk+0x30>)
 8003f00:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003f02:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003f04:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003f06:	4402      	add	r2, r0
 8003f08:	428a      	cmp	r2, r1
 8003f0a:	d906      	bls.n	8003f1a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003f0c:	f000 fba0 	bl	8004650 <__errno>
 8003f10:	230c      	movs	r3, #12
 8003f12:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003f18:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003f1a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003f1c:	e7fc      	b.n	8003f18 <_sbrk+0x24>
 8003f1e:	bf00      	nop
 8003f20:	20000308 	.word	0x20000308
 8003f24:	200015dc 	.word	0x200015dc

08003f28 <_close>:

int _close(int file)
{
	return -1;
}
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	4770      	bx	lr

08003f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8003f32:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8003f34:	604b      	str	r3, [r1, #4]
}
 8003f36:	4770      	bx	lr

08003f38 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003f38:	2001      	movs	r0, #1
 8003f3a:	4770      	bx	lr

08003f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	4770      	bx	lr

08003f40 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <SystemInit+0x40>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	f042 0201 	orr.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <SystemInit+0x44>)
 8003f4e:	400a      	ands	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003f58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f64:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003f6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003f72:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003f74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <SystemInit+0x48>)
 8003f7a:	609a      	str	r2, [r3, #8]
#endif 
}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	f8ff0000 	.word	0xf8ff0000
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <MX_TIM6_Init>:

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 9999;
 8003f8c:	f242 730f 	movw	r3, #9999	; 0x270f
{
 8003f90:	b513      	push	{r0, r1, r4, lr}
  htim6.Init.Prescaler = 9999;
 8003f92:	4a0e      	ldr	r2, [pc, #56]	; (8003fcc <MX_TIM6_Init+0x40>)
  htim6.Instance = TIM6;
 8003f94:	480e      	ldr	r0, [pc, #56]	; (8003fd0 <MX_TIM6_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f96:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 9999;
 8003f98:	e9c0 2300 	strd	r2, r3, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 6399;
 8003f9c:	f641 03ff 	movw	r3, #6399	; 0x18ff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa0:	e9cd 4400 	strd	r4, r4, [sp]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fa4:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 6399;
 8003fa6:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa8:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003faa:	f7fd fddd 	bl	8001b68 <HAL_TIM_Base_Init>
 8003fae:	b108      	cbz	r0, 8003fb4 <MX_TIM6_Init+0x28>
  {
    Error_Handler();
 8003fb0:	f7ff ff2e 	bl	8003e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003fb4:	4669      	mov	r1, sp
 8003fb6:	4806      	ldr	r0, [pc, #24]	; (8003fd0 <MX_TIM6_Init+0x44>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb8:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003fbc:	f7fd fe00 	bl	8001bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc0:	b108      	cbz	r0, 8003fc6 <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
 8003fc2:	f7ff ff25 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003fc6:	b002      	add	sp, #8
 8003fc8:	bd10      	pop	{r4, pc}
 8003fca:	bf00      	nop
 8003fcc:	40001000 	.word	0x40001000
 8003fd0:	2000053c 	.word	0x2000053c

08003fd4 <MX_TIM7_Init>:

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 9999;
 8003fd4:	f242 730f 	movw	r3, #9999	; 0x270f
{
 8003fd8:	b513      	push	{r0, r1, r4, lr}
  htim7.Init.Prescaler = 9999;
 8003fda:	4a0e      	ldr	r2, [pc, #56]	; (8004014 <MX_TIM7_Init+0x40>)
  htim7.Instance = TIM7;
 8003fdc:	480e      	ldr	r0, [pc, #56]	; (8004018 <MX_TIM7_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fde:	2400      	movs	r4, #0
  htim7.Init.Prescaler = 9999;
 8003fe0:	e9c0 2300 	strd	r2, r3, [r0]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 639;
 8003fe4:	f240 237f 	movw	r3, #639	; 0x27f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fe8:	e9cd 4400 	strd	r4, r4, [sp]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fec:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 639;
 8003fee:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff0:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003ff2:	f7fd fdb9 	bl	8001b68 <HAL_TIM_Base_Init>
 8003ff6:	b108      	cbz	r0, 8003ffc <MX_TIM7_Init+0x28>
  {
    Error_Handler();
 8003ff8:	f7ff ff0a 	bl	8003e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003ffc:	4669      	mov	r1, sp
 8003ffe:	4806      	ldr	r0, [pc, #24]	; (8004018 <MX_TIM7_Init+0x44>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004000:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004004:	f7fd fddc 	bl	8001bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8004008:	b108      	cbz	r0, 800400e <MX_TIM7_Init+0x3a>
  {
    Error_Handler();
 800400a:	f7ff ff01 	bl	8003e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800400e:	b002      	add	sp, #8
 8004010:	bd10      	pop	{r4, pc}
 8004012:	bf00      	nop
 8004014:	40001400 	.word	0x40001400
 8004018:	20000584 	.word	0x20000584

0800401c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800401c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM6)
 800401e:	6803      	ldr	r3, [r0, #0]
 8004020:	4a13      	ldr	r2, [pc, #76]	; (8004070 <HAL_TIM_Base_MspInit+0x54>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10c      	bne.n	8004040 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004026:	4b13      	ldr	r3, [pc, #76]	; (8004074 <HAL_TIM_Base_MspInit+0x58>)
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	f042 0210 	orr.w	r2, r2, #16
 800402e:	61da      	str	r2, [r3, #28]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800403a:	b003      	add	sp, #12
 800403c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM7)
 8004040:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <HAL_TIM_Base_MspInit+0x5c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d1f9      	bne.n	800403a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_TIM_Base_MspInit+0x58>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004048:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	f042 0220 	orr.w	r2, r2, #32
 8004050:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004052:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004054:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004056:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004060:	f7fc f95e 	bl	8000320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004064:	2037      	movs	r0, #55	; 0x37
}
 8004066:	b003      	add	sp, #12
 8004068:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800406c:	f7fc b98a 	b.w	8000384 <HAL_NVIC_EnableIRQ>
 8004070:	40001000 	.word	0x40001000
 8004074:	40021000 	.word	0x40021000
 8004078:	40001400 	.word	0x40001400

0800407c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800407c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800407e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8004082:	480a      	ldr	r0, [pc, #40]	; (80040ac <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8004084:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <MX_USART1_UART_Init+0x34>)
 8004086:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800408a:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800408c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800408e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004092:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004096:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004098:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800409a:	f7fd fe39 	bl	8001d10 <HAL_UART_Init>
 800409e:	b118      	cbz	r0, 80040a8 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80040a4:	f7ff beb4 	b.w	8003e10 <Error_Handler>
}
 80040a8:	bd08      	pop	{r3, pc}
 80040aa:	bf00      	nop
 80040ac:	200005cc 	.word	0x200005cc
 80040b0:	40013800 	.word	0x40013800

080040b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80040b4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80040b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80040ba:	480a      	ldr	r0, [pc, #40]	; (80040e4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80040bc:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <MX_USART2_UART_Init+0x34>)
 80040be:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040c2:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040c4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ca:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040ce:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040d2:	f7fd fe1d 	bl	8001d10 <HAL_UART_Init>
 80040d6:	b118      	cbz	r0, 80040e0 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80040dc:	f7ff be98 	b.w	8003e10 <Error_Handler>
}
 80040e0:	bd08      	pop	{r3, pc}
 80040e2:	bf00      	nop
 80040e4:	2000060c 	.word	0x2000060c
 80040e8:	40004400 	.word	0x40004400

080040ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ec:	2210      	movs	r2, #16
{
 80040ee:	b510      	push	{r4, lr}
 80040f0:	4604      	mov	r4, r0
 80040f2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	eb0d 0002 	add.w	r0, sp, r2
 80040f8:	2100      	movs	r1, #0
 80040fa:	f000 fad3 	bl	80046a4 <memset>
  if(uartHandle->Instance==USART1)
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	4a27      	ldr	r2, [pc, #156]	; (80041a0 <HAL_UART_MspInit+0xb4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d129      	bne.n	800415a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004106:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <HAL_UART_MspInit+0xb8>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004108:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 800410c:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410e:	4826      	ldr	r0, [pc, #152]	; (80041a8 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004114:	619a      	str	r2, [r3, #24]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800411c:	9200      	str	r2, [sp, #0]
 800411e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	f042 0204 	orr.w	r2, r2, #4
 8004126:	619a      	str	r2, [r3, #24]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004132:	2302      	movs	r3, #2
 8004134:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004138:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800413c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413e:	f7fc f9e3 	bl	8000508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004142:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004146:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004148:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414a:	4817      	ldr	r0, [pc, #92]	; (80041a8 <HAL_UART_MspInit+0xbc>)
 800414c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004152:	f7fc f9d9 	bl	8000508 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004156:	b008      	add	sp, #32
 8004158:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 800415a:	4a14      	ldr	r2, [pc, #80]	; (80041ac <HAL_UART_MspInit+0xc0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d1fa      	bne.n	8004156 <HAL_UART_MspInit+0x6a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004160:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <HAL_UART_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004162:	4811      	ldr	r0, [pc, #68]	; (80041a8 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004164:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004166:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8004168:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800416c:	61da      	str	r2, [r3, #28]
 800416e:	69da      	ldr	r2, [r3, #28]
 8004170:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004174:	9202      	str	r2, [sp, #8]
 8004176:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	f042 0204 	orr.w	r2, r2, #4
 800417e:	619a      	str	r2, [r3, #24]
 8004180:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	9303      	str	r3, [sp, #12]
 800418a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418c:	2302      	movs	r3, #2
 800418e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004192:	2303      	movs	r3, #3
 8004194:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004196:	f7fc f9b7 	bl	8000508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800419a:	2308      	movs	r3, #8
 800419c:	e7d3      	b.n	8004146 <HAL_UART_MspInit+0x5a>
 800419e:	bf00      	nop
 80041a0:	40013800 	.word	0x40013800
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40010800 	.word	0x40010800
 80041ac:	40004400 	.word	0x40004400

080041b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80041b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80041b2:	2200      	movs	r2, #0
 80041b4:	490e      	ldr	r1, [pc, #56]	; (80041f0 <MX_USB_DEVICE_Init+0x40>)
 80041b6:	480f      	ldr	r0, [pc, #60]	; (80041f4 <MX_USB_DEVICE_Init+0x44>)
 80041b8:	f7fe fe9e 	bl	8002ef8 <USBD_Init>
 80041bc:	b108      	cbz	r0, 80041c2 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80041be:	f7ff fe27 	bl	8003e10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80041c2:	490d      	ldr	r1, [pc, #52]	; (80041f8 <MX_USB_DEVICE_Init+0x48>)
 80041c4:	480b      	ldr	r0, [pc, #44]	; (80041f4 <MX_USB_DEVICE_Init+0x44>)
 80041c6:	f7fe feac 	bl	8002f22 <USBD_RegisterClass>
 80041ca:	b108      	cbz	r0, 80041d0 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80041cc:	f7ff fe20 	bl	8003e10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80041d0:	490a      	ldr	r1, [pc, #40]	; (80041fc <MX_USB_DEVICE_Init+0x4c>)
 80041d2:	4808      	ldr	r0, [pc, #32]	; (80041f4 <MX_USB_DEVICE_Init+0x44>)
 80041d4:	f7fe fe4b 	bl	8002e6e <USBD_CDC_RegisterInterface>
 80041d8:	b108      	cbz	r0, 80041de <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80041da:	f7ff fe19 	bl	8003e10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80041de:	4805      	ldr	r0, [pc, #20]	; (80041f4 <MX_USB_DEVICE_Init+0x44>)
 80041e0:	f7fe fea6 	bl	8002f30 <USBD_Start>
 80041e4:	b118      	cbz	r0, 80041ee <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80041e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80041ea:	f7ff be11 	b.w	8003e10 <Error_Handler>
}
 80041ee:	bd08      	pop	{r3, pc}
 80041f0:	20000144 	.word	0x20000144
 80041f4:	2000064c 	.word	0x2000064c
 80041f8:	20000008 	.word	0x20000008
 80041fc:	20000134 	.word	0x20000134

08004200 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004200:	2000      	movs	r0, #0
 8004202:	4770      	bx	lr

08004204 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004204:	2000      	movs	r0, #0
 8004206:	4770      	bx	lr

08004208 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4604      	mov	r4, r0
 800420c:	460d      	mov	r5, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800420e:	4601      	mov	r1, r0
 8004210:	480c      	ldr	r0, [pc, #48]	; (8004244 <CDC_Receive_FS+0x3c>)
 8004212:	f7fe fe3b 	bl	8002e8c <USBD_CDC_SetRxBuffer>
  for(int16_t i=0; i<*Len; i++) {
 8004216:	2200      	movs	r2, #0
 8004218:	490b      	ldr	r1, [pc, #44]	; (8004248 <CDC_Receive_FS+0x40>)
 800421a:	6828      	ldr	r0, [r5, #0]
 800421c:	b213      	sxth	r3, r2
 800421e:	4283      	cmp	r3, r0
 8004220:	d207      	bcs.n	8004232 <CDC_Receive_FS+0x2a>
	  if(Buf[i] != '\r') {
 8004222:	5ce0      	ldrb	r0, [r4, r3]
 8004224:	3201      	adds	r2, #1
 8004226:	280d      	cmp	r0, #13
 8004228:	d001      	beq.n	800422e <CDC_Receive_FS+0x26>
		  CDCbuffer[i] = Buf[i];
 800422a:	54c8      	strb	r0, [r1, r3]
  for(int16_t i=0; i<*Len; i++) {
 800422c:	e7f5      	b.n	800421a <CDC_Receive_FS+0x12>
	  }
	  else {
		  CDCbuffer[i] = '\0';
 800422e:	2200      	movs	r2, #0
 8004230:	54ca      	strb	r2, [r1, r3]
		  break;
	  }
  }
  CDC_flag = 1;
 8004232:	2201      	movs	r2, #1
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <CDC_Receive_FS+0x44>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004236:	4803      	ldr	r0, [pc, #12]	; (8004244 <CDC_Receive_FS+0x3c>)
  CDC_flag = 1;
 8004238:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800423a:	f7fe fe46 	bl	8002eca <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800423e:	2000      	movs	r0, #0
 8004240:	bd38      	pop	{r3, r4, r5, pc}
 8004242:	bf00      	nop
 8004244:	2000064c 	.word	0x2000064c
 8004248:	20000216 	.word	0x20000216
 800424c:	20000215 	.word	0x20000215

08004250 <CDC_Init_FS>:
{
 8004250:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004252:	4c06      	ldr	r4, [pc, #24]	; (800426c <CDC_Init_FS+0x1c>)
 8004254:	2200      	movs	r2, #0
 8004256:	4620      	mov	r0, r4
 8004258:	4905      	ldr	r1, [pc, #20]	; (8004270 <CDC_Init_FS+0x20>)
 800425a:	f7fe fe0f 	bl	8002e7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800425e:	4620      	mov	r0, r4
 8004260:	4904      	ldr	r1, [pc, #16]	; (8004274 <CDC_Init_FS+0x24>)
 8004262:	f7fe fe13 	bl	8002e8c <USBD_CDC_SetRxBuffer>
}
 8004266:	2000      	movs	r0, #0
 8004268:	bd10      	pop	{r4, pc}
 800426a:	bf00      	nop
 800426c:	2000064c 	.word	0x2000064c
 8004270:	20000cf8 	.word	0x20000cf8
 8004274:	20000910 	.word	0x20000910

08004278 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8004278:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800427a:	4c09      	ldr	r4, [pc, #36]	; (80042a0 <CDC_Transmit_FS+0x28>)
{
 800427c:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800427e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8004282:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004286:	b943      	cbnz	r3, 800429a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004288:	4601      	mov	r1, r0
 800428a:	4620      	mov	r0, r4
 800428c:	f7fe fdf6 	bl	8002e7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004290:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8004292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004296:	f7fe bdff 	b.w	8002e98 <USBD_CDC_TransmitPacket>
}
 800429a:	2001      	movs	r0, #1
 800429c:	bd10      	pop	{r4, pc}
 800429e:	bf00      	nop
 80042a0:	2000064c 	.word	0x2000064c

080042a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80042a4:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80042a6:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <HAL_PCD_MspInit+0x3c>)
 80042a8:	6802      	ldr	r2, [r0, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d115      	bne.n	80042da <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80042ae:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80042b2:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80042b4:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80042b6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80042ba:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80042bc:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80042be:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80042c0:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80042c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80042ca:	f7fc f829 	bl	8000320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80042ce:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80042d0:	b003      	add	sp, #12
 80042d2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80042d6:	f7fc b855 	b.w	8000384 <HAL_NVIC_EnableIRQ>
}
 80042da:	b003      	add	sp, #12
 80042dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80042e0:	40005c00 	.word	0x40005c00

080042e4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80042e4:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80042e8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80042ec:	f7fe be37 	b.w	8002f5e <USBD_LL_SetupStage>

080042f0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80042f0:	2328      	movs	r3, #40	; 0x28
 80042f2:	fb03 0301 	mla	r3, r3, r1, r0
 80042f6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80042fa:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80042fe:	f7fe be5b 	b.w	8002fb8 <USBD_LL_DataOutStage>

08004302 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004302:	2328      	movs	r3, #40	; 0x28
 8004304:	fb03 0301 	mla	r3, r3, r1, r0
 8004308:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800430c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800430e:	f7fe be8d 	b.w	800302c <USBD_LL_DataInStage>

08004312 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004312:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004316:	f7fe bf21 	b.w	800315c <USBD_LL_SOF>

0800431a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800431a:	6883      	ldr	r3, [r0, #8]
{
 800431c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800431e:	2b02      	cmp	r3, #2
{
 8004320:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004322:	d001      	beq.n	8004328 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8004324:	f7ff fd74 	bl	8003e10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004328:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800432c:	2101      	movs	r1, #1
 800432e:	f7fe feff 	bl	8003130 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004332:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8004336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800433a:	f7fe bed2 	b.w	80030e2 <USBD_LL_Reset>
	...

08004340 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004340:	b510      	push	{r4, lr}
 8004342:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004344:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004348:	f7fe fef5 	bl	8003136 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800434c:	69a3      	ldr	r3, [r4, #24]
 800434e:	b123      	cbz	r3, 800435a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004350:	4a02      	ldr	r2, [pc, #8]	; (800435c <HAL_PCD_SuspendCallback+0x1c>)
 8004352:	6913      	ldr	r3, [r2, #16]
 8004354:	f043 0306 	orr.w	r3, r3, #6
 8004358:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800435a:	bd10      	pop	{r4, pc}
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004360:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8004364:	f7fe bef0 	b.w	8003148 <USBD_LL_Resume>

08004368 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004368:	2308      	movs	r3, #8
{
 800436a:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800436c:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <USBD_LL_Init+0x7c>)
{
 800436e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8004370:	481d      	ldr	r0, [pc, #116]	; (80043e8 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004372:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004376:	2302      	movs	r3, #2
 8004378:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800437a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800437c:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8004380:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004384:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004388:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800438a:	f7fc f9c7 	bl	800071c <HAL_PCD_Init>
 800438e:	b108      	cbz	r0, 8004394 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8004390:	f7ff fd3e 	bl	8003e10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004394:	2200      	movs	r2, #0
 8004396:	2318      	movs	r3, #24
 8004398:	4611      	mov	r1, r2
 800439a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800439e:	f7fc ff9b 	bl	80012d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80043a2:	2358      	movs	r3, #88	; 0x58
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80043ac:	f7fc ff94 	bl	80012d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80043b0:	23c0      	movs	r3, #192	; 0xc0
 80043b2:	2200      	movs	r2, #0
 80043b4:	2181      	movs	r1, #129	; 0x81
 80043b6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80043ba:	f7fc ff8d 	bl	80012d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80043be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80043c2:	2200      	movs	r2, #0
 80043c4:	2101      	movs	r1, #1
 80043c6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80043ca:	f7fc ff85 	bl	80012d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80043ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043d2:	2200      	movs	r2, #0
 80043d4:	2182      	movs	r1, #130	; 0x82
 80043d6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80043da:	f7fc ff7d 	bl	80012d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 80043de:	2000      	movs	r0, #0
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	bf00      	nop
 80043e4:	40005c00 	.word	0x40005c00
 80043e8:	200010e0 	.word	0x200010e0

080043ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80043ec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80043ee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80043f2:	f7fc fa0c 	bl	800080e <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80043f6:	2803      	cmp	r0, #3
 80043f8:	bf96      	itet	ls
 80043fa:	4b02      	ldrls	r3, [pc, #8]	; (8004404 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80043fc:	2002      	movhi	r0, #2
 80043fe:	5c18      	ldrbls	r0, [r3, r0]
}
 8004400:	bd08      	pop	{r3, pc}
 8004402:	bf00      	nop
 8004404:	08005eaa 	.word	0x08005eaa

08004408 <USBD_LL_OpenEP>:
{
 8004408:	b510      	push	{r4, lr}
 800440a:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800440c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8004410:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004412:	4623      	mov	r3, r4
 8004414:	f7fc fe66 	bl	80010e4 <HAL_PCD_EP_Open>
  switch (hal_status)
 8004418:	2803      	cmp	r0, #3
 800441a:	bf96      	itet	ls
 800441c:	4b01      	ldrls	r3, [pc, #4]	; (8004424 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800441e:	2002      	movhi	r0, #2
 8004420:	5c18      	ldrbls	r0, [r3, r0]
}
 8004422:	bd10      	pop	{r4, pc}
 8004424:	08005eaa 	.word	0x08005eaa

08004428 <USBD_LL_CloseEP>:
{
 8004428:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800442a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800442e:	f7fc fe8b 	bl	8001148 <HAL_PCD_EP_Close>
  switch (hal_status)
 8004432:	2803      	cmp	r0, #3
 8004434:	bf96      	itet	ls
 8004436:	4b02      	ldrls	r3, [pc, #8]	; (8004440 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004438:	2002      	movhi	r0, #2
 800443a:	5c18      	ldrbls	r0, [r3, r0]
}
 800443c:	bd08      	pop	{r3, pc}
 800443e:	bf00      	nop
 8004440:	08005eaa 	.word	0x08005eaa

08004444 <USBD_LL_StallEP>:
{
 8004444:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004446:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800444a:	f7fc fedf 	bl	800120c <HAL_PCD_EP_SetStall>
  switch (hal_status)
 800444e:	2803      	cmp	r0, #3
 8004450:	bf96      	itet	ls
 8004452:	4b02      	ldrls	r3, [pc, #8]	; (800445c <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004454:	2002      	movhi	r0, #2
 8004456:	5c18      	ldrbls	r0, [r3, r0]
}
 8004458:	bd08      	pop	{r3, pc}
 800445a:	bf00      	nop
 800445c:	08005eaa 	.word	0x08005eaa

08004460 <USBD_LL_ClearStallEP>:
{
 8004460:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004462:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004466:	f7fc ff05 	bl	8001274 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800446a:	2803      	cmp	r0, #3
 800446c:	bf96      	itet	ls
 800446e:	4b02      	ldrls	r3, [pc, #8]	; (8004478 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004470:	2002      	movhi	r0, #2
 8004472:	5c18      	ldrbls	r0, [r3, r0]
}
 8004474:	bd08      	pop	{r3, pc}
 8004476:	bf00      	nop
 8004478:	08005eaa 	.word	0x08005eaa

0800447c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800447c:	2328      	movs	r3, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 800447e:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004482:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004486:	bf1b      	ittet	ne
 8004488:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800448c:	fb01 3103 	mlane	r1, r1, r3, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004490:	fb03 2101 	mlaeq	r1, r3, r1, r2
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004494:	1889      	addne	r1, r1, r2
 8004496:	bf14      	ite	ne
 8004498:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800449a:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 800449e:	4770      	bx	lr

080044a0 <USBD_LL_SetUSBAddress>:
{
 80044a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80044a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80044a6:	f7fc f9cb 	bl	8000840 <HAL_PCD_SetAddress>
  switch (hal_status)
 80044aa:	2803      	cmp	r0, #3
 80044ac:	bf96      	itet	ls
 80044ae:	4b02      	ldrls	r3, [pc, #8]	; (80044b8 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80044b0:	2002      	movhi	r0, #2
 80044b2:	5c18      	ldrbls	r0, [r3, r0]
}
 80044b4:	bd08      	pop	{r3, pc}
 80044b6:	bf00      	nop
 80044b8:	08005eaa 	.word	0x08005eaa

080044bc <USBD_LL_Transmit>:
{
 80044bc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80044be:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80044c2:	f7fc fe89 	bl	80011d8 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80044c6:	2803      	cmp	r0, #3
 80044c8:	bf96      	itet	ls
 80044ca:	4b02      	ldrls	r3, [pc, #8]	; (80044d4 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80044cc:	2002      	movhi	r0, #2
 80044ce:	5c18      	ldrbls	r0, [r3, r0]
}
 80044d0:	bd08      	pop	{r3, pc}
 80044d2:	bf00      	nop
 80044d4:	08005eaa 	.word	0x08005eaa

080044d8 <USBD_LL_PrepareReceive>:
{
 80044d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80044da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80044de:	f7fc fe5c 	bl	800119a <HAL_PCD_EP_Receive>
  switch (hal_status)
 80044e2:	2803      	cmp	r0, #3
 80044e4:	bf96      	itet	ls
 80044e6:	4b02      	ldrls	r3, [pc, #8]	; (80044f0 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80044e8:	2002      	movhi	r0, #2
 80044ea:	5c18      	ldrbls	r0, [r3, r0]
}
 80044ec:	bd08      	pop	{r3, pc}
 80044ee:	bf00      	nop
 80044f0:	08005eaa 	.word	0x08005eaa

080044f4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80044f4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80044f8:	f7fc be66 	b.w	80011c8 <HAL_PCD_EP_GetRxCount>

080044fc <USBD_static_malloc>:
}
 80044fc:	4800      	ldr	r0, [pc, #0]	; (8004500 <USBD_static_malloc+0x4>)
 80044fe:	4770      	bx	lr
 8004500:	2000030c 	.word	0x2000030c

08004504 <USBD_static_free>:
}
 8004504:	4770      	bx	lr

08004506 <HAL_PCDEx_SetConnectionState>:
}
 8004506:	4770      	bx	lr

08004508 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004508:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800450a:	4801      	ldr	r0, [pc, #4]	; (8004510 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800450c:	800b      	strh	r3, [r1, #0]
}
 800450e:	4770      	bx	lr
 8004510:	20000160 	.word	0x20000160

08004514 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004514:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004516:	4801      	ldr	r0, [pc, #4]	; (800451c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004518:	800b      	strh	r3, [r1, #0]
}
 800451a:	4770      	bx	lr
 800451c:	20000174 	.word	0x20000174

08004520 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8004520:	2300      	movs	r3, #0
 8004522:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8004524:	461e      	mov	r6, r3
 8004526:	1c4d      	adds	r5, r1, #1
    if (((value >> 28)) < 0xA)
 8004528:	0f04      	lsrs	r4, r0, #28
 800452a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800452e:	bf34      	ite	cc
 8004530:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004532:	3437      	addcs	r4, #55	; 0x37
 8004534:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8004538:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 800453c:	3301      	adds	r3, #1
  for (idx = 0; idx < len; idx++)
 800453e:	b2dc      	uxtb	r4, r3
 8004540:	42a2      	cmp	r2, r4
    value = value << 4;
 8004542:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8004546:	d8ef      	bhi.n	8004528 <IntToUnicode+0x8>
  }
}
 8004548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800454c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800454c:	231a      	movs	r3, #26
{
 800454e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004550:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <USBD_FS_SerialStrDescriptor+0x2c>)
 8004554:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004556:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8004558:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800455a:	18c0      	adds	r0, r0, r3
 800455c:	d00a      	beq.n	8004574 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004560:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004562:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004564:	4906      	ldr	r1, [pc, #24]	; (8004580 <USBD_FS_SerialStrDescriptor+0x34>)
 8004566:	f7ff ffdb 	bl	8004520 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800456a:	2204      	movs	r2, #4
 800456c:	4620      	mov	r0, r4
 800456e:	4905      	ldr	r1, [pc, #20]	; (8004584 <USBD_FS_SerialStrDescriptor+0x38>)
 8004570:	f7ff ffd6 	bl	8004520 <IntToUnicode>
}
 8004574:	4804      	ldr	r0, [pc, #16]	; (8004588 <USBD_FS_SerialStrDescriptor+0x3c>)
 8004576:	bd10      	pop	{r4, pc}
 8004578:	1ffff7e8 	.word	0x1ffff7e8
 800457c:	1ffff7ec 	.word	0x1ffff7ec
 8004580:	2000017a 	.word	0x2000017a
 8004584:	2000018a 	.word	0x2000018a
 8004588:	20000178 	.word	0x20000178

0800458c <USBD_FS_ManufacturerStrDescriptor>:
{
 800458c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800458e:	4c04      	ldr	r4, [pc, #16]	; (80045a0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8004590:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004592:	4804      	ldr	r0, [pc, #16]	; (80045a4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004594:	4621      	mov	r1, r4
 8004596:	f7fe fff0 	bl	800357a <USBD_GetString>
}
 800459a:	4620      	mov	r0, r4
 800459c:	bd10      	pop	{r4, pc}
 800459e:	bf00      	nop
 80045a0:	200013cc 	.word	0x200013cc
 80045a4:	08005eae 	.word	0x08005eae

080045a8 <USBD_FS_ProductStrDescriptor>:
{
 80045a8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80045aa:	4c04      	ldr	r4, [pc, #16]	; (80045bc <USBD_FS_ProductStrDescriptor+0x14>)
{
 80045ac:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80045ae:	4804      	ldr	r0, [pc, #16]	; (80045c0 <USBD_FS_ProductStrDescriptor+0x18>)
 80045b0:	4621      	mov	r1, r4
 80045b2:	f7fe ffe2 	bl	800357a <USBD_GetString>
}
 80045b6:	4620      	mov	r0, r4
 80045b8:	bd10      	pop	{r4, pc}
 80045ba:	bf00      	nop
 80045bc:	200013cc 	.word	0x200013cc
 80045c0:	08005ec1 	.word	0x08005ec1

080045c4 <USBD_FS_ConfigStrDescriptor>:
{
 80045c4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80045c6:	4c04      	ldr	r4, [pc, #16]	; (80045d8 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80045c8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80045ca:	4804      	ldr	r0, [pc, #16]	; (80045dc <USBD_FS_ConfigStrDescriptor+0x18>)
 80045cc:	4621      	mov	r1, r4
 80045ce:	f7fe ffd4 	bl	800357a <USBD_GetString>
}
 80045d2:	4620      	mov	r0, r4
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	bf00      	nop
 80045d8:	200013cc 	.word	0x200013cc
 80045dc:	08005ed7 	.word	0x08005ed7

080045e0 <USBD_FS_InterfaceStrDescriptor>:
{
 80045e0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80045e2:	4c04      	ldr	r4, [pc, #16]	; (80045f4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80045e4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80045e6:	4804      	ldr	r0, [pc, #16]	; (80045f8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80045e8:	4621      	mov	r1, r4
 80045ea:	f7fe ffc6 	bl	800357a <USBD_GetString>
}
 80045ee:	4620      	mov	r0, r4
 80045f0:	bd10      	pop	{r4, pc}
 80045f2:	bf00      	nop
 80045f4:	200013cc 	.word	0x200013cc
 80045f8:	08005ee2 	.word	0x08005ee2

080045fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80045fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80045fe:	e003      	b.n	8004608 <LoopCopyDataInit>

08004600 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004602:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004604:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004606:	3104      	adds	r1, #4

08004608 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004608:	480a      	ldr	r0, [pc, #40]	; (8004634 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800460c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800460e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004610:	d3f6      	bcc.n	8004600 <CopyDataInit>
  ldr r2, =_sbss
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004614:	e002      	b.n	800461c <LoopFillZerobss>

08004616 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004616:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004618:	f842 3b04 	str.w	r3, [r2], #4

0800461c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800461c:	4b08      	ldr	r3, [pc, #32]	; (8004640 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800461e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004620:	d3f9      	bcc.n	8004616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004622:	f7ff fc8d 	bl	8003f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004626:	f000 f819 	bl	800465c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800462a:	f7ff faf9 	bl	8003c20 <main>
  bx lr
 800462e:	4770      	bx	lr
  ldr r3, =_sidata
 8004630:	08006148 	.word	0x08006148
  ldr r0, =_sdata
 8004634:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004638:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 800463c:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8004640:	200015dc 	.word	0x200015dc

08004644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004644:	e7fe      	b.n	8004644 <ADC1_2_IRQHandler>

08004646 <atoi>:
 8004646:	220a      	movs	r2, #10
 8004648:	2100      	movs	r1, #0
 800464a:	f000 b9cb 	b.w	80049e4 <strtol>
	...

08004650 <__errno>:
 8004650:	4b01      	ldr	r3, [pc, #4]	; (8004658 <__errno+0x8>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000194 	.word	0x20000194

0800465c <__libc_init_array>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	2600      	movs	r6, #0
 8004660:	4d0c      	ldr	r5, [pc, #48]	; (8004694 <__libc_init_array+0x38>)
 8004662:	4c0d      	ldr	r4, [pc, #52]	; (8004698 <__libc_init_array+0x3c>)
 8004664:	1b64      	subs	r4, r4, r5
 8004666:	10a4      	asrs	r4, r4, #2
 8004668:	42a6      	cmp	r6, r4
 800466a:	d109      	bne.n	8004680 <__libc_init_array+0x24>
 800466c:	f001 fb42 	bl	8005cf4 <_init>
 8004670:	2600      	movs	r6, #0
 8004672:	4d0a      	ldr	r5, [pc, #40]	; (800469c <__libc_init_array+0x40>)
 8004674:	4c0a      	ldr	r4, [pc, #40]	; (80046a0 <__libc_init_array+0x44>)
 8004676:	1b64      	subs	r4, r4, r5
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	42a6      	cmp	r6, r4
 800467c:	d105      	bne.n	800468a <__libc_init_array+0x2e>
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	f855 3b04 	ldr.w	r3, [r5], #4
 8004684:	4798      	blx	r3
 8004686:	3601      	adds	r6, #1
 8004688:	e7ee      	b.n	8004668 <__libc_init_array+0xc>
 800468a:	f855 3b04 	ldr.w	r3, [r5], #4
 800468e:	4798      	blx	r3
 8004690:	3601      	adds	r6, #1
 8004692:	e7f2      	b.n	800467a <__libc_init_array+0x1e>
 8004694:	08006140 	.word	0x08006140
 8004698:	08006140 	.word	0x08006140
 800469c:	08006140 	.word	0x08006140
 80046a0:	08006144 	.word	0x08006144

080046a4 <memset>:
 80046a4:	4603      	mov	r3, r0
 80046a6:	4402      	add	r2, r0
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d100      	bne.n	80046ae <memset+0xa>
 80046ac:	4770      	bx	lr
 80046ae:	f803 1b01 	strb.w	r1, [r3], #1
 80046b2:	e7f9      	b.n	80046a8 <memset+0x4>

080046b4 <iprintf>:
 80046b4:	b40f      	push	{r0, r1, r2, r3}
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <iprintf+0x2c>)
 80046b8:	b513      	push	{r0, r1, r4, lr}
 80046ba:	681c      	ldr	r4, [r3, #0]
 80046bc:	b124      	cbz	r4, 80046c8 <iprintf+0x14>
 80046be:	69a3      	ldr	r3, [r4, #24]
 80046c0:	b913      	cbnz	r3, 80046c8 <iprintf+0x14>
 80046c2:	4620      	mov	r0, r4
 80046c4:	f000 fb90 	bl	8004de8 <__sinit>
 80046c8:	ab05      	add	r3, sp, #20
 80046ca:	4620      	mov	r0, r4
 80046cc:	9a04      	ldr	r2, [sp, #16]
 80046ce:	68a1      	ldr	r1, [r4, #8]
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	f000 fed1 	bl	8005478 <_vfiprintf_r>
 80046d6:	b002      	add	sp, #8
 80046d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046dc:	b004      	add	sp, #16
 80046de:	4770      	bx	lr
 80046e0:	20000194 	.word	0x20000194

080046e4 <_puts_r>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	460e      	mov	r6, r1
 80046e8:	4605      	mov	r5, r0
 80046ea:	b118      	cbz	r0, 80046f4 <_puts_r+0x10>
 80046ec:	6983      	ldr	r3, [r0, #24]
 80046ee:	b90b      	cbnz	r3, 80046f4 <_puts_r+0x10>
 80046f0:	f000 fb7a 	bl	8004de8 <__sinit>
 80046f4:	69ab      	ldr	r3, [r5, #24]
 80046f6:	68ac      	ldr	r4, [r5, #8]
 80046f8:	b913      	cbnz	r3, 8004700 <_puts_r+0x1c>
 80046fa:	4628      	mov	r0, r5
 80046fc:	f000 fb74 	bl	8004de8 <__sinit>
 8004700:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <_puts_r+0xd0>)
 8004702:	429c      	cmp	r4, r3
 8004704:	d120      	bne.n	8004748 <_puts_r+0x64>
 8004706:	686c      	ldr	r4, [r5, #4]
 8004708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800470a:	07db      	lsls	r3, r3, #31
 800470c:	d405      	bmi.n	800471a <_puts_r+0x36>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	0598      	lsls	r0, r3, #22
 8004712:	d402      	bmi.n	800471a <_puts_r+0x36>
 8004714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004716:	f000 fc17 	bl	8004f48 <__retarget_lock_acquire_recursive>
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	0719      	lsls	r1, r3, #28
 800471e:	d51d      	bpl.n	800475c <_puts_r+0x78>
 8004720:	6923      	ldr	r3, [r4, #16]
 8004722:	b1db      	cbz	r3, 800475c <_puts_r+0x78>
 8004724:	3e01      	subs	r6, #1
 8004726:	68a3      	ldr	r3, [r4, #8]
 8004728:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800472c:	3b01      	subs	r3, #1
 800472e:	60a3      	str	r3, [r4, #8]
 8004730:	bb39      	cbnz	r1, 8004782 <_puts_r+0x9e>
 8004732:	2b00      	cmp	r3, #0
 8004734:	da38      	bge.n	80047a8 <_puts_r+0xc4>
 8004736:	4622      	mov	r2, r4
 8004738:	210a      	movs	r1, #10
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f95c 	bl	80049f8 <__swbuf_r>
 8004740:	3001      	adds	r0, #1
 8004742:	d011      	beq.n	8004768 <_puts_r+0x84>
 8004744:	250a      	movs	r5, #10
 8004746:	e011      	b.n	800476c <_puts_r+0x88>
 8004748:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <_puts_r+0xd4>)
 800474a:	429c      	cmp	r4, r3
 800474c:	d101      	bne.n	8004752 <_puts_r+0x6e>
 800474e:	68ac      	ldr	r4, [r5, #8]
 8004750:	e7da      	b.n	8004708 <_puts_r+0x24>
 8004752:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <_puts_r+0xd8>)
 8004754:	429c      	cmp	r4, r3
 8004756:	bf08      	it	eq
 8004758:	68ec      	ldreq	r4, [r5, #12]
 800475a:	e7d5      	b.n	8004708 <_puts_r+0x24>
 800475c:	4621      	mov	r1, r4
 800475e:	4628      	mov	r0, r5
 8004760:	f000 f99c 	bl	8004a9c <__swsetup_r>
 8004764:	2800      	cmp	r0, #0
 8004766:	d0dd      	beq.n	8004724 <_puts_r+0x40>
 8004768:	f04f 35ff 	mov.w	r5, #4294967295
 800476c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800476e:	07da      	lsls	r2, r3, #31
 8004770:	d405      	bmi.n	800477e <_puts_r+0x9a>
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	059b      	lsls	r3, r3, #22
 8004776:	d402      	bmi.n	800477e <_puts_r+0x9a>
 8004778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800477a:	f000 fbe6 	bl	8004f4a <__retarget_lock_release_recursive>
 800477e:	4628      	mov	r0, r5
 8004780:	bd70      	pop	{r4, r5, r6, pc}
 8004782:	2b00      	cmp	r3, #0
 8004784:	da04      	bge.n	8004790 <_puts_r+0xac>
 8004786:	69a2      	ldr	r2, [r4, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	dc06      	bgt.n	800479a <_puts_r+0xb6>
 800478c:	290a      	cmp	r1, #10
 800478e:	d004      	beq.n	800479a <_puts_r+0xb6>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	6022      	str	r2, [r4, #0]
 8004796:	7019      	strb	r1, [r3, #0]
 8004798:	e7c5      	b.n	8004726 <_puts_r+0x42>
 800479a:	4622      	mov	r2, r4
 800479c:	4628      	mov	r0, r5
 800479e:	f000 f92b 	bl	80049f8 <__swbuf_r>
 80047a2:	3001      	adds	r0, #1
 80047a4:	d1bf      	bne.n	8004726 <_puts_r+0x42>
 80047a6:	e7df      	b.n	8004768 <_puts_r+0x84>
 80047a8:	250a      	movs	r5, #10
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	6022      	str	r2, [r4, #0]
 80047b0:	701d      	strb	r5, [r3, #0]
 80047b2:	e7db      	b.n	800476c <_puts_r+0x88>
 80047b4:	080060cc 	.word	0x080060cc
 80047b8:	080060ec 	.word	0x080060ec
 80047bc:	080060ac 	.word	0x080060ac

080047c0 <puts>:
 80047c0:	4b02      	ldr	r3, [pc, #8]	; (80047cc <puts+0xc>)
 80047c2:	4601      	mov	r1, r0
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	f7ff bf8d 	b.w	80046e4 <_puts_r>
 80047ca:	bf00      	nop
 80047cc:	20000194 	.word	0x20000194

080047d0 <siprintf>:
 80047d0:	b40e      	push	{r1, r2, r3}
 80047d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047d6:	b500      	push	{lr}
 80047d8:	b09c      	sub	sp, #112	; 0x70
 80047da:	ab1d      	add	r3, sp, #116	; 0x74
 80047dc:	9002      	str	r0, [sp, #8]
 80047de:	9006      	str	r0, [sp, #24]
 80047e0:	9107      	str	r1, [sp, #28]
 80047e2:	9104      	str	r1, [sp, #16]
 80047e4:	4808      	ldr	r0, [pc, #32]	; (8004808 <siprintf+0x38>)
 80047e6:	4909      	ldr	r1, [pc, #36]	; (800480c <siprintf+0x3c>)
 80047e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ec:	9105      	str	r1, [sp, #20]
 80047ee:	6800      	ldr	r0, [r0, #0]
 80047f0:	a902      	add	r1, sp, #8
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	f000 fd18 	bl	8005228 <_svfiprintf_r>
 80047f8:	2200      	movs	r2, #0
 80047fa:	9b02      	ldr	r3, [sp, #8]
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	b01c      	add	sp, #112	; 0x70
 8004800:	f85d eb04 	ldr.w	lr, [sp], #4
 8004804:	b003      	add	sp, #12
 8004806:	4770      	bx	lr
 8004808:	20000194 	.word	0x20000194
 800480c:	ffff0208 	.word	0xffff0208

08004810 <strcpy>:
 8004810:	4603      	mov	r3, r0
 8004812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004816:	f803 2b01 	strb.w	r2, [r3], #1
 800481a:	2a00      	cmp	r2, #0
 800481c:	d1f9      	bne.n	8004812 <strcpy+0x2>
 800481e:	4770      	bx	lr

08004820 <strtok>:
 8004820:	4b16      	ldr	r3, [pc, #88]	; (800487c <strtok+0x5c>)
 8004822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004826:	681f      	ldr	r7, [r3, #0]
 8004828:	4605      	mov	r5, r0
 800482a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800482c:	460e      	mov	r6, r1
 800482e:	b9ec      	cbnz	r4, 800486c <strtok+0x4c>
 8004830:	2050      	movs	r0, #80	; 0x50
 8004832:	f000 fbef 	bl	8005014 <malloc>
 8004836:	4602      	mov	r2, r0
 8004838:	65b8      	str	r0, [r7, #88]	; 0x58
 800483a:	b920      	cbnz	r0, 8004846 <strtok+0x26>
 800483c:	2157      	movs	r1, #87	; 0x57
 800483e:	4b10      	ldr	r3, [pc, #64]	; (8004880 <strtok+0x60>)
 8004840:	4810      	ldr	r0, [pc, #64]	; (8004884 <strtok+0x64>)
 8004842:	f000 f999 	bl	8004b78 <__assert_func>
 8004846:	e9c0 4400 	strd	r4, r4, [r0]
 800484a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800484e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004852:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004856:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800485a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800485e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004862:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004866:	6184      	str	r4, [r0, #24]
 8004868:	7704      	strb	r4, [r0, #28]
 800486a:	6244      	str	r4, [r0, #36]	; 0x24
 800486c:	4631      	mov	r1, r6
 800486e:	4628      	mov	r0, r5
 8004870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004872:	2301      	movs	r3, #1
 8004874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004878:	f000 b806 	b.w	8004888 <__strtok_r>
 800487c:	20000194 	.word	0x20000194
 8004880:	08005ef4 	.word	0x08005ef4
 8004884:	08005f0b 	.word	0x08005f0b

08004888 <__strtok_r>:
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488a:	b908      	cbnz	r0, 8004890 <__strtok_r+0x8>
 800488c:	6810      	ldr	r0, [r2, #0]
 800488e:	b188      	cbz	r0, 80048b4 <__strtok_r+0x2c>
 8004890:	4604      	mov	r4, r0
 8004892:	460f      	mov	r7, r1
 8004894:	4620      	mov	r0, r4
 8004896:	f814 5b01 	ldrb.w	r5, [r4], #1
 800489a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800489e:	b91e      	cbnz	r6, 80048a8 <__strtok_r+0x20>
 80048a0:	b965      	cbnz	r5, 80048bc <__strtok_r+0x34>
 80048a2:	4628      	mov	r0, r5
 80048a4:	6015      	str	r5, [r2, #0]
 80048a6:	e005      	b.n	80048b4 <__strtok_r+0x2c>
 80048a8:	42b5      	cmp	r5, r6
 80048aa:	d1f6      	bne.n	800489a <__strtok_r+0x12>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <__strtok_r+0xa>
 80048b0:	6014      	str	r4, [r2, #0]
 80048b2:	7003      	strb	r3, [r0, #0]
 80048b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b6:	461c      	mov	r4, r3
 80048b8:	e00c      	b.n	80048d4 <__strtok_r+0x4c>
 80048ba:	b915      	cbnz	r5, 80048c2 <__strtok_r+0x3a>
 80048bc:	460e      	mov	r6, r1
 80048be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80048c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80048c6:	42ab      	cmp	r3, r5
 80048c8:	d1f7      	bne.n	80048ba <__strtok_r+0x32>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f3      	beq.n	80048b6 <__strtok_r+0x2e>
 80048ce:	2300      	movs	r3, #0
 80048d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80048d4:	6014      	str	r4, [r2, #0]
 80048d6:	e7ed      	b.n	80048b4 <__strtok_r+0x2c>

080048d8 <_strtol_l.isra.0>:
 80048d8:	2b01      	cmp	r3, #1
 80048da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048de:	4686      	mov	lr, r0
 80048e0:	d001      	beq.n	80048e6 <_strtol_l.isra.0+0xe>
 80048e2:	2b24      	cmp	r3, #36	; 0x24
 80048e4:	d906      	bls.n	80048f4 <_strtol_l.isra.0+0x1c>
 80048e6:	f7ff feb3 	bl	8004650 <__errno>
 80048ea:	2316      	movs	r3, #22
 80048ec:	6003      	str	r3, [r0, #0]
 80048ee:	2000      	movs	r0, #0
 80048f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f4:	468c      	mov	ip, r1
 80048f6:	4e3a      	ldr	r6, [pc, #232]	; (80049e0 <_strtol_l.isra.0+0x108>)
 80048f8:	4660      	mov	r0, ip
 80048fa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80048fe:	5da5      	ldrb	r5, [r4, r6]
 8004900:	f015 0508 	ands.w	r5, r5, #8
 8004904:	d1f8      	bne.n	80048f8 <_strtol_l.isra.0+0x20>
 8004906:	2c2d      	cmp	r4, #45	; 0x2d
 8004908:	d133      	bne.n	8004972 <_strtol_l.isra.0+0x9a>
 800490a:	f04f 0801 	mov.w	r8, #1
 800490e:	f89c 4000 	ldrb.w	r4, [ip]
 8004912:	f100 0c02 	add.w	ip, r0, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d05d      	beq.n	80049d6 <_strtol_l.isra.0+0xfe>
 800491a:	2b10      	cmp	r3, #16
 800491c:	d10c      	bne.n	8004938 <_strtol_l.isra.0+0x60>
 800491e:	2c30      	cmp	r4, #48	; 0x30
 8004920:	d10a      	bne.n	8004938 <_strtol_l.isra.0+0x60>
 8004922:	f89c 0000 	ldrb.w	r0, [ip]
 8004926:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800492a:	2858      	cmp	r0, #88	; 0x58
 800492c:	d14e      	bne.n	80049cc <_strtol_l.isra.0+0xf4>
 800492e:	2310      	movs	r3, #16
 8004930:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004934:	f10c 0c02 	add.w	ip, ip, #2
 8004938:	2500      	movs	r5, #0
 800493a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800493e:	3f01      	subs	r7, #1
 8004940:	fbb7 f9f3 	udiv	r9, r7, r3
 8004944:	4628      	mov	r0, r5
 8004946:	fb03 7a19 	mls	sl, r3, r9, r7
 800494a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800494e:	2e09      	cmp	r6, #9
 8004950:	d818      	bhi.n	8004984 <_strtol_l.isra.0+0xac>
 8004952:	4634      	mov	r4, r6
 8004954:	42a3      	cmp	r3, r4
 8004956:	dd24      	ble.n	80049a2 <_strtol_l.isra.0+0xca>
 8004958:	2d00      	cmp	r5, #0
 800495a:	db1f      	blt.n	800499c <_strtol_l.isra.0+0xc4>
 800495c:	4581      	cmp	r9, r0
 800495e:	d31d      	bcc.n	800499c <_strtol_l.isra.0+0xc4>
 8004960:	d101      	bne.n	8004966 <_strtol_l.isra.0+0x8e>
 8004962:	45a2      	cmp	sl, r4
 8004964:	db1a      	blt.n	800499c <_strtol_l.isra.0+0xc4>
 8004966:	2501      	movs	r5, #1
 8004968:	fb00 4003 	mla	r0, r0, r3, r4
 800496c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004970:	e7eb      	b.n	800494a <_strtol_l.isra.0+0x72>
 8004972:	2c2b      	cmp	r4, #43	; 0x2b
 8004974:	bf08      	it	eq
 8004976:	f89c 4000 	ldrbeq.w	r4, [ip]
 800497a:	46a8      	mov	r8, r5
 800497c:	bf08      	it	eq
 800497e:	f100 0c02 	addeq.w	ip, r0, #2
 8004982:	e7c8      	b.n	8004916 <_strtol_l.isra.0+0x3e>
 8004984:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004988:	2e19      	cmp	r6, #25
 800498a:	d801      	bhi.n	8004990 <_strtol_l.isra.0+0xb8>
 800498c:	3c37      	subs	r4, #55	; 0x37
 800498e:	e7e1      	b.n	8004954 <_strtol_l.isra.0+0x7c>
 8004990:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004994:	2e19      	cmp	r6, #25
 8004996:	d804      	bhi.n	80049a2 <_strtol_l.isra.0+0xca>
 8004998:	3c57      	subs	r4, #87	; 0x57
 800499a:	e7db      	b.n	8004954 <_strtol_l.isra.0+0x7c>
 800499c:	f04f 35ff 	mov.w	r5, #4294967295
 80049a0:	e7e4      	b.n	800496c <_strtol_l.isra.0+0x94>
 80049a2:	2d00      	cmp	r5, #0
 80049a4:	da08      	bge.n	80049b8 <_strtol_l.isra.0+0xe0>
 80049a6:	2322      	movs	r3, #34	; 0x22
 80049a8:	4638      	mov	r0, r7
 80049aa:	f8ce 3000 	str.w	r3, [lr]
 80049ae:	2a00      	cmp	r2, #0
 80049b0:	d09e      	beq.n	80048f0 <_strtol_l.isra.0+0x18>
 80049b2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80049b6:	e007      	b.n	80049c8 <_strtol_l.isra.0+0xf0>
 80049b8:	f1b8 0f00 	cmp.w	r8, #0
 80049bc:	d000      	beq.n	80049c0 <_strtol_l.isra.0+0xe8>
 80049be:	4240      	negs	r0, r0
 80049c0:	2a00      	cmp	r2, #0
 80049c2:	d095      	beq.n	80048f0 <_strtol_l.isra.0+0x18>
 80049c4:	2d00      	cmp	r5, #0
 80049c6:	d1f4      	bne.n	80049b2 <_strtol_l.isra.0+0xda>
 80049c8:	6011      	str	r1, [r2, #0]
 80049ca:	e791      	b.n	80048f0 <_strtol_l.isra.0+0x18>
 80049cc:	2430      	movs	r4, #48	; 0x30
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1b2      	bne.n	8004938 <_strtol_l.isra.0+0x60>
 80049d2:	2308      	movs	r3, #8
 80049d4:	e7b0      	b.n	8004938 <_strtol_l.isra.0+0x60>
 80049d6:	2c30      	cmp	r4, #48	; 0x30
 80049d8:	d0a3      	beq.n	8004922 <_strtol_l.isra.0+0x4a>
 80049da:	230a      	movs	r3, #10
 80049dc:	e7ac      	b.n	8004938 <_strtol_l.isra.0+0x60>
 80049de:	bf00      	nop
 80049e0:	08005fa9 	.word	0x08005fa9

080049e4 <strtol>:
 80049e4:	4613      	mov	r3, r2
 80049e6:	460a      	mov	r2, r1
 80049e8:	4601      	mov	r1, r0
 80049ea:	4802      	ldr	r0, [pc, #8]	; (80049f4 <strtol+0x10>)
 80049ec:	6800      	ldr	r0, [r0, #0]
 80049ee:	f7ff bf73 	b.w	80048d8 <_strtol_l.isra.0>
 80049f2:	bf00      	nop
 80049f4:	20000194 	.word	0x20000194

080049f8 <__swbuf_r>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	460e      	mov	r6, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	4605      	mov	r5, r0
 8004a00:	b118      	cbz	r0, 8004a0a <__swbuf_r+0x12>
 8004a02:	6983      	ldr	r3, [r0, #24]
 8004a04:	b90b      	cbnz	r3, 8004a0a <__swbuf_r+0x12>
 8004a06:	f000 f9ef 	bl	8004de8 <__sinit>
 8004a0a:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <__swbuf_r+0x98>)
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	d12b      	bne.n	8004a68 <__swbuf_r+0x70>
 8004a10:	686c      	ldr	r4, [r5, #4]
 8004a12:	69a3      	ldr	r3, [r4, #24]
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	071a      	lsls	r2, r3, #28
 8004a1a:	d52f      	bpl.n	8004a7c <__swbuf_r+0x84>
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	b36b      	cbz	r3, 8004a7c <__swbuf_r+0x84>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	6820      	ldr	r0, [r4, #0]
 8004a24:	b2f6      	uxtb	r6, r6
 8004a26:	1ac0      	subs	r0, r0, r3
 8004a28:	6963      	ldr	r3, [r4, #20]
 8004a2a:	4637      	mov	r7, r6
 8004a2c:	4283      	cmp	r3, r0
 8004a2e:	dc04      	bgt.n	8004a3a <__swbuf_r+0x42>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 f944 	bl	8004cc0 <_fflush_r>
 8004a38:	bb30      	cbnz	r0, 8004a88 <__swbuf_r+0x90>
 8004a3a:	68a3      	ldr	r3, [r4, #8]
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	60a3      	str	r3, [r4, #8]
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	6022      	str	r2, [r4, #0]
 8004a48:	701e      	strb	r6, [r3, #0]
 8004a4a:	6963      	ldr	r3, [r4, #20]
 8004a4c:	4283      	cmp	r3, r0
 8004a4e:	d004      	beq.n	8004a5a <__swbuf_r+0x62>
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	07db      	lsls	r3, r3, #31
 8004a54:	d506      	bpl.n	8004a64 <__swbuf_r+0x6c>
 8004a56:	2e0a      	cmp	r6, #10
 8004a58:	d104      	bne.n	8004a64 <__swbuf_r+0x6c>
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f000 f92f 	bl	8004cc0 <_fflush_r>
 8004a62:	b988      	cbnz	r0, 8004a88 <__swbuf_r+0x90>
 8004a64:	4638      	mov	r0, r7
 8004a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <__swbuf_r+0x9c>)
 8004a6a:	429c      	cmp	r4, r3
 8004a6c:	d101      	bne.n	8004a72 <__swbuf_r+0x7a>
 8004a6e:	68ac      	ldr	r4, [r5, #8]
 8004a70:	e7cf      	b.n	8004a12 <__swbuf_r+0x1a>
 8004a72:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <__swbuf_r+0xa0>)
 8004a74:	429c      	cmp	r4, r3
 8004a76:	bf08      	it	eq
 8004a78:	68ec      	ldreq	r4, [r5, #12]
 8004a7a:	e7ca      	b.n	8004a12 <__swbuf_r+0x1a>
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f000 f80c 	bl	8004a9c <__swsetup_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d0cb      	beq.n	8004a20 <__swbuf_r+0x28>
 8004a88:	f04f 37ff 	mov.w	r7, #4294967295
 8004a8c:	e7ea      	b.n	8004a64 <__swbuf_r+0x6c>
 8004a8e:	bf00      	nop
 8004a90:	080060cc 	.word	0x080060cc
 8004a94:	080060ec 	.word	0x080060ec
 8004a98:	080060ac 	.word	0x080060ac

08004a9c <__swsetup_r>:
 8004a9c:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <__swsetup_r+0xcc>)
 8004a9e:	b570      	push	{r4, r5, r6, lr}
 8004aa0:	681d      	ldr	r5, [r3, #0]
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	b125      	cbz	r5, 8004ab2 <__swsetup_r+0x16>
 8004aa8:	69ab      	ldr	r3, [r5, #24]
 8004aaa:	b913      	cbnz	r3, 8004ab2 <__swsetup_r+0x16>
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 f99b 	bl	8004de8 <__sinit>
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	; (8004b6c <__swsetup_r+0xd0>)
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	d10f      	bne.n	8004ad8 <__swsetup_r+0x3c>
 8004ab8:	686c      	ldr	r4, [r5, #4]
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ac0:	0719      	lsls	r1, r3, #28
 8004ac2:	d42c      	bmi.n	8004b1e <__swsetup_r+0x82>
 8004ac4:	06dd      	lsls	r5, r3, #27
 8004ac6:	d411      	bmi.n	8004aec <__swsetup_r+0x50>
 8004ac8:	2309      	movs	r3, #9
 8004aca:	6033      	str	r3, [r6, #0]
 8004acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad4:	81a3      	strh	r3, [r4, #12]
 8004ad6:	e03e      	b.n	8004b56 <__swsetup_r+0xba>
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <__swsetup_r+0xd4>)
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d101      	bne.n	8004ae2 <__swsetup_r+0x46>
 8004ade:	68ac      	ldr	r4, [r5, #8]
 8004ae0:	e7eb      	b.n	8004aba <__swsetup_r+0x1e>
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <__swsetup_r+0xd8>)
 8004ae4:	429c      	cmp	r4, r3
 8004ae6:	bf08      	it	eq
 8004ae8:	68ec      	ldreq	r4, [r5, #12]
 8004aea:	e7e6      	b.n	8004aba <__swsetup_r+0x1e>
 8004aec:	0758      	lsls	r0, r3, #29
 8004aee:	d512      	bpl.n	8004b16 <__swsetup_r+0x7a>
 8004af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af2:	b141      	cbz	r1, 8004b06 <__swsetup_r+0x6a>
 8004af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004af8:	4299      	cmp	r1, r3
 8004afa:	d002      	beq.n	8004b02 <__swsetup_r+0x66>
 8004afc:	4630      	mov	r0, r6
 8004afe:	f000 fa91 	bl	8005024 <_free_r>
 8004b02:	2300      	movs	r3, #0
 8004b04:	6363      	str	r3, [r4, #52]	; 0x34
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b0c:	81a3      	strh	r3, [r4, #12]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6063      	str	r3, [r4, #4]
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	f043 0308 	orr.w	r3, r3, #8
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	b94b      	cbnz	r3, 8004b36 <__swsetup_r+0x9a>
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d003      	beq.n	8004b36 <__swsetup_r+0x9a>
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 fa2f 	bl	8004f94 <__smakebuf_r>
 8004b36:	89a0      	ldrh	r0, [r4, #12]
 8004b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b3c:	f010 0301 	ands.w	r3, r0, #1
 8004b40:	d00a      	beq.n	8004b58 <__swsetup_r+0xbc>
 8004b42:	2300      	movs	r3, #0
 8004b44:	60a3      	str	r3, [r4, #8]
 8004b46:	6963      	ldr	r3, [r4, #20]
 8004b48:	425b      	negs	r3, r3
 8004b4a:	61a3      	str	r3, [r4, #24]
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	b943      	cbnz	r3, 8004b62 <__swsetup_r+0xc6>
 8004b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b54:	d1ba      	bne.n	8004acc <__swsetup_r+0x30>
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	0781      	lsls	r1, r0, #30
 8004b5a:	bf58      	it	pl
 8004b5c:	6963      	ldrpl	r3, [r4, #20]
 8004b5e:	60a3      	str	r3, [r4, #8]
 8004b60:	e7f4      	b.n	8004b4c <__swsetup_r+0xb0>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e7f7      	b.n	8004b56 <__swsetup_r+0xba>
 8004b66:	bf00      	nop
 8004b68:	20000194 	.word	0x20000194
 8004b6c:	080060cc 	.word	0x080060cc
 8004b70:	080060ec 	.word	0x080060ec
 8004b74:	080060ac 	.word	0x080060ac

08004b78 <__assert_func>:
 8004b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b7a:	4614      	mov	r4, r2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <__assert_func+0x2c>)
 8004b80:	4605      	mov	r5, r0
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68d8      	ldr	r0, [r3, #12]
 8004b86:	b14c      	cbz	r4, 8004b9c <__assert_func+0x24>
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <__assert_func+0x30>)
 8004b8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b8e:	9100      	str	r1, [sp, #0]
 8004b90:	462b      	mov	r3, r5
 8004b92:	4906      	ldr	r1, [pc, #24]	; (8004bac <__assert_func+0x34>)
 8004b94:	f000 f9a6 	bl	8004ee4 <fiprintf>
 8004b98:	f000 ff9a 	bl	8005ad0 <abort>
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <__assert_func+0x38>)
 8004b9e:	461c      	mov	r4, r3
 8004ba0:	e7f3      	b.n	8004b8a <__assert_func+0x12>
 8004ba2:	bf00      	nop
 8004ba4:	20000194 	.word	0x20000194
 8004ba8:	08005f6c 	.word	0x08005f6c
 8004bac:	08005f79 	.word	0x08005f79
 8004bb0:	08005e5c 	.word	0x08005e5c

08004bb4 <__sflush_r>:
 8004bb4:	898a      	ldrh	r2, [r1, #12]
 8004bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bba:	4605      	mov	r5, r0
 8004bbc:	0710      	lsls	r0, r2, #28
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	d458      	bmi.n	8004c74 <__sflush_r+0xc0>
 8004bc2:	684b      	ldr	r3, [r1, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	dc05      	bgt.n	8004bd4 <__sflush_r+0x20>
 8004bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	dc02      	bgt.n	8004bd4 <__sflush_r+0x20>
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bd6:	2e00      	cmp	r6, #0
 8004bd8:	d0f9      	beq.n	8004bce <__sflush_r+0x1a>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004be0:	682f      	ldr	r7, [r5, #0]
 8004be2:	602b      	str	r3, [r5, #0]
 8004be4:	d032      	beq.n	8004c4c <__sflush_r+0x98>
 8004be6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	075a      	lsls	r2, r3, #29
 8004bec:	d505      	bpl.n	8004bfa <__sflush_r+0x46>
 8004bee:	6863      	ldr	r3, [r4, #4]
 8004bf0:	1ac0      	subs	r0, r0, r3
 8004bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bf4:	b10b      	cbz	r3, 8004bfa <__sflush_r+0x46>
 8004bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bf8:	1ac0      	subs	r0, r0, r3
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c00:	4628      	mov	r0, r5
 8004c02:	6a21      	ldr	r1, [r4, #32]
 8004c04:	47b0      	blx	r6
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	d106      	bne.n	8004c1a <__sflush_r+0x66>
 8004c0c:	6829      	ldr	r1, [r5, #0]
 8004c0e:	291d      	cmp	r1, #29
 8004c10:	d82c      	bhi.n	8004c6c <__sflush_r+0xb8>
 8004c12:	4a2a      	ldr	r2, [pc, #168]	; (8004cbc <__sflush_r+0x108>)
 8004c14:	40ca      	lsrs	r2, r1
 8004c16:	07d6      	lsls	r6, r2, #31
 8004c18:	d528      	bpl.n	8004c6c <__sflush_r+0xb8>
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	6062      	str	r2, [r4, #4]
 8004c1e:	6922      	ldr	r2, [r4, #16]
 8004c20:	04d9      	lsls	r1, r3, #19
 8004c22:	6022      	str	r2, [r4, #0]
 8004c24:	d504      	bpl.n	8004c30 <__sflush_r+0x7c>
 8004c26:	1c42      	adds	r2, r0, #1
 8004c28:	d101      	bne.n	8004c2e <__sflush_r+0x7a>
 8004c2a:	682b      	ldr	r3, [r5, #0]
 8004c2c:	b903      	cbnz	r3, 8004c30 <__sflush_r+0x7c>
 8004c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c32:	602f      	str	r7, [r5, #0]
 8004c34:	2900      	cmp	r1, #0
 8004c36:	d0ca      	beq.n	8004bce <__sflush_r+0x1a>
 8004c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	d002      	beq.n	8004c46 <__sflush_r+0x92>
 8004c40:	4628      	mov	r0, r5
 8004c42:	f000 f9ef 	bl	8005024 <_free_r>
 8004c46:	2000      	movs	r0, #0
 8004c48:	6360      	str	r0, [r4, #52]	; 0x34
 8004c4a:	e7c1      	b.n	8004bd0 <__sflush_r+0x1c>
 8004c4c:	6a21      	ldr	r1, [r4, #32]
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b0      	blx	r6
 8004c54:	1c41      	adds	r1, r0, #1
 8004c56:	d1c7      	bne.n	8004be8 <__sflush_r+0x34>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0c4      	beq.n	8004be8 <__sflush_r+0x34>
 8004c5e:	2b1d      	cmp	r3, #29
 8004c60:	d001      	beq.n	8004c66 <__sflush_r+0xb2>
 8004c62:	2b16      	cmp	r3, #22
 8004c64:	d101      	bne.n	8004c6a <__sflush_r+0xb6>
 8004c66:	602f      	str	r7, [r5, #0]
 8004c68:	e7b1      	b.n	8004bce <__sflush_r+0x1a>
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	e7ad      	b.n	8004bd0 <__sflush_r+0x1c>
 8004c74:	690f      	ldr	r7, [r1, #16]
 8004c76:	2f00      	cmp	r7, #0
 8004c78:	d0a9      	beq.n	8004bce <__sflush_r+0x1a>
 8004c7a:	0793      	lsls	r3, r2, #30
 8004c7c:	bf18      	it	ne
 8004c7e:	2300      	movne	r3, #0
 8004c80:	680e      	ldr	r6, [r1, #0]
 8004c82:	bf08      	it	eq
 8004c84:	694b      	ldreq	r3, [r1, #20]
 8004c86:	eba6 0807 	sub.w	r8, r6, r7
 8004c8a:	600f      	str	r7, [r1, #0]
 8004c8c:	608b      	str	r3, [r1, #8]
 8004c8e:	f1b8 0f00 	cmp.w	r8, #0
 8004c92:	dd9c      	ble.n	8004bce <__sflush_r+0x1a>
 8004c94:	4643      	mov	r3, r8
 8004c96:	463a      	mov	r2, r7
 8004c98:	4628      	mov	r0, r5
 8004c9a:	6a21      	ldr	r1, [r4, #32]
 8004c9c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c9e:	47b0      	blx	r6
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	dc06      	bgt.n	8004cb2 <__sflush_r+0xfe>
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8004caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	e78e      	b.n	8004bd0 <__sflush_r+0x1c>
 8004cb2:	4407      	add	r7, r0
 8004cb4:	eba8 0800 	sub.w	r8, r8, r0
 8004cb8:	e7e9      	b.n	8004c8e <__sflush_r+0xda>
 8004cba:	bf00      	nop
 8004cbc:	20400001 	.word	0x20400001

08004cc0 <_fflush_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	690b      	ldr	r3, [r1, #16]
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	b913      	cbnz	r3, 8004cd0 <_fflush_r+0x10>
 8004cca:	2500      	movs	r5, #0
 8004ccc:	4628      	mov	r0, r5
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	b118      	cbz	r0, 8004cda <_fflush_r+0x1a>
 8004cd2:	6983      	ldr	r3, [r0, #24]
 8004cd4:	b90b      	cbnz	r3, 8004cda <_fflush_r+0x1a>
 8004cd6:	f000 f887 	bl	8004de8 <__sinit>
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <_fflush_r+0x6c>)
 8004cdc:	429c      	cmp	r4, r3
 8004cde:	d11b      	bne.n	8004d18 <_fflush_r+0x58>
 8004ce0:	686c      	ldr	r4, [r5, #4]
 8004ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0ef      	beq.n	8004cca <_fflush_r+0xa>
 8004cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cec:	07d0      	lsls	r0, r2, #31
 8004cee:	d404      	bmi.n	8004cfa <_fflush_r+0x3a>
 8004cf0:	0599      	lsls	r1, r3, #22
 8004cf2:	d402      	bmi.n	8004cfa <_fflush_r+0x3a>
 8004cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf6:	f000 f927 	bl	8004f48 <__retarget_lock_acquire_recursive>
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	f7ff ff59 	bl	8004bb4 <__sflush_r>
 8004d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d04:	4605      	mov	r5, r0
 8004d06:	07da      	lsls	r2, r3, #31
 8004d08:	d4e0      	bmi.n	8004ccc <_fflush_r+0xc>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	059b      	lsls	r3, r3, #22
 8004d0e:	d4dd      	bmi.n	8004ccc <_fflush_r+0xc>
 8004d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d12:	f000 f91a 	bl	8004f4a <__retarget_lock_release_recursive>
 8004d16:	e7d9      	b.n	8004ccc <_fflush_r+0xc>
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <_fflush_r+0x70>)
 8004d1a:	429c      	cmp	r4, r3
 8004d1c:	d101      	bne.n	8004d22 <_fflush_r+0x62>
 8004d1e:	68ac      	ldr	r4, [r5, #8]
 8004d20:	e7df      	b.n	8004ce2 <_fflush_r+0x22>
 8004d22:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <_fflush_r+0x74>)
 8004d24:	429c      	cmp	r4, r3
 8004d26:	bf08      	it	eq
 8004d28:	68ec      	ldreq	r4, [r5, #12]
 8004d2a:	e7da      	b.n	8004ce2 <_fflush_r+0x22>
 8004d2c:	080060cc 	.word	0x080060cc
 8004d30:	080060ec 	.word	0x080060ec
 8004d34:	080060ac 	.word	0x080060ac

08004d38 <std>:
 8004d38:	2300      	movs	r3, #0
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d46:	6083      	str	r3, [r0, #8]
 8004d48:	8181      	strh	r1, [r0, #12]
 8004d4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d4c:	81c2      	strh	r2, [r0, #14]
 8004d4e:	6183      	str	r3, [r0, #24]
 8004d50:	4619      	mov	r1, r3
 8004d52:	2208      	movs	r2, #8
 8004d54:	305c      	adds	r0, #92	; 0x5c
 8004d56:	f7ff fca5 	bl	80046a4 <memset>
 8004d5a:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <std+0x38>)
 8004d5c:	6224      	str	r4, [r4, #32]
 8004d5e:	6263      	str	r3, [r4, #36]	; 0x24
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <std+0x3c>)
 8004d62:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <std+0x40>)
 8004d66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <std+0x44>)
 8004d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	bf00      	nop
 8004d70:	08005a25 	.word	0x08005a25
 8004d74:	08005a47 	.word	0x08005a47
 8004d78:	08005a7f 	.word	0x08005a7f
 8004d7c:	08005aa3 	.word	0x08005aa3

08004d80 <_cleanup_r>:
 8004d80:	4901      	ldr	r1, [pc, #4]	; (8004d88 <_cleanup_r+0x8>)
 8004d82:	f000 b8c1 	b.w	8004f08 <_fwalk_reent>
 8004d86:	bf00      	nop
 8004d88:	08004cc1 	.word	0x08004cc1

08004d8c <__sfmoreglue>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	2568      	movs	r5, #104	; 0x68
 8004d90:	1e4a      	subs	r2, r1, #1
 8004d92:	4355      	muls	r5, r2
 8004d94:	460e      	mov	r6, r1
 8004d96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d9a:	f000 f98f 	bl	80050bc <_malloc_r>
 8004d9e:	4604      	mov	r4, r0
 8004da0:	b140      	cbz	r0, 8004db4 <__sfmoreglue+0x28>
 8004da2:	2100      	movs	r1, #0
 8004da4:	e9c0 1600 	strd	r1, r6, [r0]
 8004da8:	300c      	adds	r0, #12
 8004daa:	60a0      	str	r0, [r4, #8]
 8004dac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004db0:	f7ff fc78 	bl	80046a4 <memset>
 8004db4:	4620      	mov	r0, r4
 8004db6:	bd70      	pop	{r4, r5, r6, pc}

08004db8 <__sfp_lock_acquire>:
 8004db8:	4801      	ldr	r0, [pc, #4]	; (8004dc0 <__sfp_lock_acquire+0x8>)
 8004dba:	f000 b8c5 	b.w	8004f48 <__retarget_lock_acquire_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	200015d4 	.word	0x200015d4

08004dc4 <__sfp_lock_release>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	; (8004dcc <__sfp_lock_release+0x8>)
 8004dc6:	f000 b8c0 	b.w	8004f4a <__retarget_lock_release_recursive>
 8004dca:	bf00      	nop
 8004dcc:	200015d4 	.word	0x200015d4

08004dd0 <__sinit_lock_acquire>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	; (8004dd8 <__sinit_lock_acquire+0x8>)
 8004dd2:	f000 b8b9 	b.w	8004f48 <__retarget_lock_acquire_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	200015cf 	.word	0x200015cf

08004ddc <__sinit_lock_release>:
 8004ddc:	4801      	ldr	r0, [pc, #4]	; (8004de4 <__sinit_lock_release+0x8>)
 8004dde:	f000 b8b4 	b.w	8004f4a <__retarget_lock_release_recursive>
 8004de2:	bf00      	nop
 8004de4:	200015cf 	.word	0x200015cf

08004de8 <__sinit>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	4604      	mov	r4, r0
 8004dec:	f7ff fff0 	bl	8004dd0 <__sinit_lock_acquire>
 8004df0:	69a3      	ldr	r3, [r4, #24]
 8004df2:	b11b      	cbz	r3, 8004dfc <__sinit+0x14>
 8004df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df8:	f7ff bff0 	b.w	8004ddc <__sinit_lock_release>
 8004dfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e00:	6523      	str	r3, [r4, #80]	; 0x50
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <__sinit+0x68>)
 8004e04:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <__sinit+0x6c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e0a:	42a3      	cmp	r3, r4
 8004e0c:	bf08      	it	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	4620      	mov	r0, r4
 8004e12:	bf08      	it	eq
 8004e14:	61a3      	streq	r3, [r4, #24]
 8004e16:	f000 f81f 	bl	8004e58 <__sfp>
 8004e1a:	6060      	str	r0, [r4, #4]
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f000 f81b 	bl	8004e58 <__sfp>
 8004e22:	60a0      	str	r0, [r4, #8]
 8004e24:	4620      	mov	r0, r4
 8004e26:	f000 f817 	bl	8004e58 <__sfp>
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	60e0      	str	r0, [r4, #12]
 8004e30:	6860      	ldr	r0, [r4, #4]
 8004e32:	f7ff ff81 	bl	8004d38 <std>
 8004e36:	2201      	movs	r2, #1
 8004e38:	2109      	movs	r1, #9
 8004e3a:	68a0      	ldr	r0, [r4, #8]
 8004e3c:	f7ff ff7c 	bl	8004d38 <std>
 8004e40:	2202      	movs	r2, #2
 8004e42:	2112      	movs	r1, #18
 8004e44:	68e0      	ldr	r0, [r4, #12]
 8004e46:	f7ff ff77 	bl	8004d38 <std>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	61a3      	str	r3, [r4, #24]
 8004e4e:	e7d1      	b.n	8004df4 <__sinit+0xc>
 8004e50:	08005ef0 	.word	0x08005ef0
 8004e54:	08004d81 	.word	0x08004d81

08004e58 <__sfp>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	4607      	mov	r7, r0
 8004e5c:	f7ff ffac 	bl	8004db8 <__sfp_lock_acquire>
 8004e60:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <__sfp+0x84>)
 8004e62:	681e      	ldr	r6, [r3, #0]
 8004e64:	69b3      	ldr	r3, [r6, #24]
 8004e66:	b913      	cbnz	r3, 8004e6e <__sfp+0x16>
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f7ff ffbd 	bl	8004de8 <__sinit>
 8004e6e:	3648      	adds	r6, #72	; 0x48
 8004e70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	d503      	bpl.n	8004e80 <__sfp+0x28>
 8004e78:	6833      	ldr	r3, [r6, #0]
 8004e7a:	b30b      	cbz	r3, 8004ec0 <__sfp+0x68>
 8004e7c:	6836      	ldr	r6, [r6, #0]
 8004e7e:	e7f7      	b.n	8004e70 <__sfp+0x18>
 8004e80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e84:	b9d5      	cbnz	r5, 8004ebc <__sfp+0x64>
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <__sfp+0x88>)
 8004e88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e8c:	60e3      	str	r3, [r4, #12]
 8004e8e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e90:	f000 f859 	bl	8004f46 <__retarget_lock_init_recursive>
 8004e94:	f7ff ff96 	bl	8004dc4 <__sfp_lock_release>
 8004e98:	2208      	movs	r2, #8
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004ea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ea4:	6025      	str	r5, [r4, #0]
 8004ea6:	61a5      	str	r5, [r4, #24]
 8004ea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004eac:	f7ff fbfa 	bl	80046a4 <memset>
 8004eb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004eb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004eb8:	4620      	mov	r0, r4
 8004eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ebc:	3468      	adds	r4, #104	; 0x68
 8004ebe:	e7d9      	b.n	8004e74 <__sfp+0x1c>
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	f7ff ff62 	bl	8004d8c <__sfmoreglue>
 8004ec8:	4604      	mov	r4, r0
 8004eca:	6030      	str	r0, [r6, #0]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d1d5      	bne.n	8004e7c <__sfp+0x24>
 8004ed0:	f7ff ff78 	bl	8004dc4 <__sfp_lock_release>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	e7ee      	b.n	8004eb8 <__sfp+0x60>
 8004eda:	bf00      	nop
 8004edc:	08005ef0 	.word	0x08005ef0
 8004ee0:	ffff0001 	.word	0xffff0001

08004ee4 <fiprintf>:
 8004ee4:	b40e      	push	{r1, r2, r3}
 8004ee6:	b503      	push	{r0, r1, lr}
 8004ee8:	4601      	mov	r1, r0
 8004eea:	ab03      	add	r3, sp, #12
 8004eec:	4805      	ldr	r0, [pc, #20]	; (8004f04 <fiprintf+0x20>)
 8004eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ef2:	6800      	ldr	r0, [r0, #0]
 8004ef4:	9301      	str	r3, [sp, #4]
 8004ef6:	f000 fabf 	bl	8005478 <_vfiprintf_r>
 8004efa:	b002      	add	sp, #8
 8004efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f00:	b003      	add	sp, #12
 8004f02:	4770      	bx	lr
 8004f04:	20000194 	.word	0x20000194

08004f08 <_fwalk_reent>:
 8004f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	4688      	mov	r8, r1
 8004f10:	2700      	movs	r7, #0
 8004f12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f1a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f1e:	d505      	bpl.n	8004f2c <_fwalk_reent+0x24>
 8004f20:	6824      	ldr	r4, [r4, #0]
 8004f22:	2c00      	cmp	r4, #0
 8004f24:	d1f7      	bne.n	8004f16 <_fwalk_reent+0xe>
 8004f26:	4638      	mov	r0, r7
 8004f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f2c:	89ab      	ldrh	r3, [r5, #12]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d907      	bls.n	8004f42 <_fwalk_reent+0x3a>
 8004f32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f36:	3301      	adds	r3, #1
 8004f38:	d003      	beq.n	8004f42 <_fwalk_reent+0x3a>
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	47c0      	blx	r8
 8004f40:	4307      	orrs	r7, r0
 8004f42:	3568      	adds	r5, #104	; 0x68
 8004f44:	e7e9      	b.n	8004f1a <_fwalk_reent+0x12>

08004f46 <__retarget_lock_init_recursive>:
 8004f46:	4770      	bx	lr

08004f48 <__retarget_lock_acquire_recursive>:
 8004f48:	4770      	bx	lr

08004f4a <__retarget_lock_release_recursive>:
 8004f4a:	4770      	bx	lr

08004f4c <__swhatbuf_r>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	460e      	mov	r6, r1
 8004f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f54:	4614      	mov	r4, r2
 8004f56:	2900      	cmp	r1, #0
 8004f58:	461d      	mov	r5, r3
 8004f5a:	b096      	sub	sp, #88	; 0x58
 8004f5c:	da07      	bge.n	8004f6e <__swhatbuf_r+0x22>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	602b      	str	r3, [r5, #0]
 8004f62:	89b3      	ldrh	r3, [r6, #12]
 8004f64:	061a      	lsls	r2, r3, #24
 8004f66:	d410      	bmi.n	8004f8a <__swhatbuf_r+0x3e>
 8004f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f6c:	e00e      	b.n	8004f8c <__swhatbuf_r+0x40>
 8004f6e:	466a      	mov	r2, sp
 8004f70:	f000 fdc6 	bl	8005b00 <_fstat_r>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	dbf2      	blt.n	8004f5e <__swhatbuf_r+0x12>
 8004f78:	9a01      	ldr	r2, [sp, #4]
 8004f7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f82:	425a      	negs	r2, r3
 8004f84:	415a      	adcs	r2, r3
 8004f86:	602a      	str	r2, [r5, #0]
 8004f88:	e7ee      	b.n	8004f68 <__swhatbuf_r+0x1c>
 8004f8a:	2340      	movs	r3, #64	; 0x40
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	b016      	add	sp, #88	; 0x58
 8004f92:	bd70      	pop	{r4, r5, r6, pc}

08004f94 <__smakebuf_r>:
 8004f94:	898b      	ldrh	r3, [r1, #12]
 8004f96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f98:	079d      	lsls	r5, r3, #30
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	d507      	bpl.n	8004fb0 <__smakebuf_r+0x1c>
 8004fa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	6123      	str	r3, [r4, #16]
 8004fa8:	2301      	movs	r3, #1
 8004faa:	6163      	str	r3, [r4, #20]
 8004fac:	b002      	add	sp, #8
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	466a      	mov	r2, sp
 8004fb2:	ab01      	add	r3, sp, #4
 8004fb4:	f7ff ffca 	bl	8004f4c <__swhatbuf_r>
 8004fb8:	9900      	ldr	r1, [sp, #0]
 8004fba:	4605      	mov	r5, r0
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f000 f87d 	bl	80050bc <_malloc_r>
 8004fc2:	b948      	cbnz	r0, 8004fd8 <__smakebuf_r+0x44>
 8004fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc8:	059a      	lsls	r2, r3, #22
 8004fca:	d4ef      	bmi.n	8004fac <__smakebuf_r+0x18>
 8004fcc:	f023 0303 	bic.w	r3, r3, #3
 8004fd0:	f043 0302 	orr.w	r3, r3, #2
 8004fd4:	81a3      	strh	r3, [r4, #12]
 8004fd6:	e7e3      	b.n	8004fa0 <__smakebuf_r+0xc>
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <__smakebuf_r+0x7c>)
 8004fda:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	6020      	str	r0, [r4, #0]
 8004fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe4:	81a3      	strh	r3, [r4, #12]
 8004fe6:	9b00      	ldr	r3, [sp, #0]
 8004fe8:	6120      	str	r0, [r4, #16]
 8004fea:	6163      	str	r3, [r4, #20]
 8004fec:	9b01      	ldr	r3, [sp, #4]
 8004fee:	b15b      	cbz	r3, 8005008 <__smakebuf_r+0x74>
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ff6:	f000 fd95 	bl	8005b24 <_isatty_r>
 8004ffa:	b128      	cbz	r0, 8005008 <__smakebuf_r+0x74>
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	f023 0303 	bic.w	r3, r3, #3
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	89a0      	ldrh	r0, [r4, #12]
 800500a:	4305      	orrs	r5, r0
 800500c:	81a5      	strh	r5, [r4, #12]
 800500e:	e7cd      	b.n	8004fac <__smakebuf_r+0x18>
 8005010:	08004d81 	.word	0x08004d81

08005014 <malloc>:
 8005014:	4b02      	ldr	r3, [pc, #8]	; (8005020 <malloc+0xc>)
 8005016:	4601      	mov	r1, r0
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	f000 b84f 	b.w	80050bc <_malloc_r>
 800501e:	bf00      	nop
 8005020:	20000194 	.word	0x20000194

08005024 <_free_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	4605      	mov	r5, r0
 8005028:	2900      	cmp	r1, #0
 800502a:	d043      	beq.n	80050b4 <_free_r+0x90>
 800502c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005030:	1f0c      	subs	r4, r1, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	bfb8      	it	lt
 8005036:	18e4      	addlt	r4, r4, r3
 8005038:	f000 fdcc 	bl	8005bd4 <__malloc_lock>
 800503c:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <_free_r+0x94>)
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	4610      	mov	r0, r2
 8005042:	b933      	cbnz	r3, 8005052 <_free_r+0x2e>
 8005044:	6063      	str	r3, [r4, #4]
 8005046:	6014      	str	r4, [r2, #0]
 8005048:	4628      	mov	r0, r5
 800504a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800504e:	f000 bdc7 	b.w	8005be0 <__malloc_unlock>
 8005052:	42a3      	cmp	r3, r4
 8005054:	d90a      	bls.n	800506c <_free_r+0x48>
 8005056:	6821      	ldr	r1, [r4, #0]
 8005058:	1862      	adds	r2, r4, r1
 800505a:	4293      	cmp	r3, r2
 800505c:	bf01      	itttt	eq
 800505e:	681a      	ldreq	r2, [r3, #0]
 8005060:	685b      	ldreq	r3, [r3, #4]
 8005062:	1852      	addeq	r2, r2, r1
 8005064:	6022      	streq	r2, [r4, #0]
 8005066:	6063      	str	r3, [r4, #4]
 8005068:	6004      	str	r4, [r0, #0]
 800506a:	e7ed      	b.n	8005048 <_free_r+0x24>
 800506c:	461a      	mov	r2, r3
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	b10b      	cbz	r3, 8005076 <_free_r+0x52>
 8005072:	42a3      	cmp	r3, r4
 8005074:	d9fa      	bls.n	800506c <_free_r+0x48>
 8005076:	6811      	ldr	r1, [r2, #0]
 8005078:	1850      	adds	r0, r2, r1
 800507a:	42a0      	cmp	r0, r4
 800507c:	d10b      	bne.n	8005096 <_free_r+0x72>
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	4401      	add	r1, r0
 8005082:	1850      	adds	r0, r2, r1
 8005084:	4283      	cmp	r3, r0
 8005086:	6011      	str	r1, [r2, #0]
 8005088:	d1de      	bne.n	8005048 <_free_r+0x24>
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4401      	add	r1, r0
 8005090:	6011      	str	r1, [r2, #0]
 8005092:	6053      	str	r3, [r2, #4]
 8005094:	e7d8      	b.n	8005048 <_free_r+0x24>
 8005096:	d902      	bls.n	800509e <_free_r+0x7a>
 8005098:	230c      	movs	r3, #12
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	e7d4      	b.n	8005048 <_free_r+0x24>
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	1821      	adds	r1, r4, r0
 80050a2:	428b      	cmp	r3, r1
 80050a4:	bf01      	itttt	eq
 80050a6:	6819      	ldreq	r1, [r3, #0]
 80050a8:	685b      	ldreq	r3, [r3, #4]
 80050aa:	1809      	addeq	r1, r1, r0
 80050ac:	6021      	streq	r1, [r4, #0]
 80050ae:	6063      	str	r3, [r4, #4]
 80050b0:	6054      	str	r4, [r2, #4]
 80050b2:	e7c9      	b.n	8005048 <_free_r+0x24>
 80050b4:	bd38      	pop	{r3, r4, r5, pc}
 80050b6:	bf00      	nop
 80050b8:	2000052c 	.word	0x2000052c

080050bc <_malloc_r>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	1ccd      	adds	r5, r1, #3
 80050c0:	f025 0503 	bic.w	r5, r5, #3
 80050c4:	3508      	adds	r5, #8
 80050c6:	2d0c      	cmp	r5, #12
 80050c8:	bf38      	it	cc
 80050ca:	250c      	movcc	r5, #12
 80050cc:	2d00      	cmp	r5, #0
 80050ce:	4606      	mov	r6, r0
 80050d0:	db01      	blt.n	80050d6 <_malloc_r+0x1a>
 80050d2:	42a9      	cmp	r1, r5
 80050d4:	d903      	bls.n	80050de <_malloc_r+0x22>
 80050d6:	230c      	movs	r3, #12
 80050d8:	6033      	str	r3, [r6, #0]
 80050da:	2000      	movs	r0, #0
 80050dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050de:	f000 fd79 	bl	8005bd4 <__malloc_lock>
 80050e2:	4921      	ldr	r1, [pc, #132]	; (8005168 <_malloc_r+0xac>)
 80050e4:	680a      	ldr	r2, [r1, #0]
 80050e6:	4614      	mov	r4, r2
 80050e8:	b99c      	cbnz	r4, 8005112 <_malloc_r+0x56>
 80050ea:	4f20      	ldr	r7, [pc, #128]	; (800516c <_malloc_r+0xb0>)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	b923      	cbnz	r3, 80050fa <_malloc_r+0x3e>
 80050f0:	4621      	mov	r1, r4
 80050f2:	4630      	mov	r0, r6
 80050f4:	f000 fc86 	bl	8005a04 <_sbrk_r>
 80050f8:	6038      	str	r0, [r7, #0]
 80050fa:	4629      	mov	r1, r5
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 fc81 	bl	8005a04 <_sbrk_r>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	d123      	bne.n	800514e <_malloc_r+0x92>
 8005106:	230c      	movs	r3, #12
 8005108:	4630      	mov	r0, r6
 800510a:	6033      	str	r3, [r6, #0]
 800510c:	f000 fd68 	bl	8005be0 <__malloc_unlock>
 8005110:	e7e3      	b.n	80050da <_malloc_r+0x1e>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	1b5b      	subs	r3, r3, r5
 8005116:	d417      	bmi.n	8005148 <_malloc_r+0x8c>
 8005118:	2b0b      	cmp	r3, #11
 800511a:	d903      	bls.n	8005124 <_malloc_r+0x68>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	441c      	add	r4, r3
 8005120:	6025      	str	r5, [r4, #0]
 8005122:	e004      	b.n	800512e <_malloc_r+0x72>
 8005124:	6863      	ldr	r3, [r4, #4]
 8005126:	42a2      	cmp	r2, r4
 8005128:	bf0c      	ite	eq
 800512a:	600b      	streq	r3, [r1, #0]
 800512c:	6053      	strne	r3, [r2, #4]
 800512e:	4630      	mov	r0, r6
 8005130:	f000 fd56 	bl	8005be0 <__malloc_unlock>
 8005134:	f104 000b 	add.w	r0, r4, #11
 8005138:	1d23      	adds	r3, r4, #4
 800513a:	f020 0007 	bic.w	r0, r0, #7
 800513e:	1ac2      	subs	r2, r0, r3
 8005140:	d0cc      	beq.n	80050dc <_malloc_r+0x20>
 8005142:	1a1b      	subs	r3, r3, r0
 8005144:	50a3      	str	r3, [r4, r2]
 8005146:	e7c9      	b.n	80050dc <_malloc_r+0x20>
 8005148:	4622      	mov	r2, r4
 800514a:	6864      	ldr	r4, [r4, #4]
 800514c:	e7cc      	b.n	80050e8 <_malloc_r+0x2c>
 800514e:	1cc4      	adds	r4, r0, #3
 8005150:	f024 0403 	bic.w	r4, r4, #3
 8005154:	42a0      	cmp	r0, r4
 8005156:	d0e3      	beq.n	8005120 <_malloc_r+0x64>
 8005158:	1a21      	subs	r1, r4, r0
 800515a:	4630      	mov	r0, r6
 800515c:	f000 fc52 	bl	8005a04 <_sbrk_r>
 8005160:	3001      	adds	r0, #1
 8005162:	d1dd      	bne.n	8005120 <_malloc_r+0x64>
 8005164:	e7cf      	b.n	8005106 <_malloc_r+0x4a>
 8005166:	bf00      	nop
 8005168:	2000052c 	.word	0x2000052c
 800516c:	20000530 	.word	0x20000530

08005170 <__ssputs_r>:
 8005170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005174:	688e      	ldr	r6, [r1, #8]
 8005176:	4682      	mov	sl, r0
 8005178:	429e      	cmp	r6, r3
 800517a:	460c      	mov	r4, r1
 800517c:	4690      	mov	r8, r2
 800517e:	461f      	mov	r7, r3
 8005180:	d838      	bhi.n	80051f4 <__ssputs_r+0x84>
 8005182:	898a      	ldrh	r2, [r1, #12]
 8005184:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005188:	d032      	beq.n	80051f0 <__ssputs_r+0x80>
 800518a:	6825      	ldr	r5, [r4, #0]
 800518c:	6909      	ldr	r1, [r1, #16]
 800518e:	3301      	adds	r3, #1
 8005190:	eba5 0901 	sub.w	r9, r5, r1
 8005194:	6965      	ldr	r5, [r4, #20]
 8005196:	444b      	add	r3, r9
 8005198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800519c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051a0:	106d      	asrs	r5, r5, #1
 80051a2:	429d      	cmp	r5, r3
 80051a4:	bf38      	it	cc
 80051a6:	461d      	movcc	r5, r3
 80051a8:	0553      	lsls	r3, r2, #21
 80051aa:	d531      	bpl.n	8005210 <__ssputs_r+0xa0>
 80051ac:	4629      	mov	r1, r5
 80051ae:	f7ff ff85 	bl	80050bc <_malloc_r>
 80051b2:	4606      	mov	r6, r0
 80051b4:	b950      	cbnz	r0, 80051cc <__ssputs_r+0x5c>
 80051b6:	230c      	movs	r3, #12
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	f8ca 3000 	str.w	r3, [sl]
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c6:	81a3      	strh	r3, [r4, #12]
 80051c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051cc:	464a      	mov	r2, r9
 80051ce:	6921      	ldr	r1, [r4, #16]
 80051d0:	f000 fcd8 	bl	8005b84 <memcpy>
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	6126      	str	r6, [r4, #16]
 80051e2:	444e      	add	r6, r9
 80051e4:	6026      	str	r6, [r4, #0]
 80051e6:	463e      	mov	r6, r7
 80051e8:	6165      	str	r5, [r4, #20]
 80051ea:	eba5 0509 	sub.w	r5, r5, r9
 80051ee:	60a5      	str	r5, [r4, #8]
 80051f0:	42be      	cmp	r6, r7
 80051f2:	d900      	bls.n	80051f6 <__ssputs_r+0x86>
 80051f4:	463e      	mov	r6, r7
 80051f6:	4632      	mov	r2, r6
 80051f8:	4641      	mov	r1, r8
 80051fa:	6820      	ldr	r0, [r4, #0]
 80051fc:	f000 fcd0 	bl	8005ba0 <memmove>
 8005200:	68a3      	ldr	r3, [r4, #8]
 8005202:	6822      	ldr	r2, [r4, #0]
 8005204:	1b9b      	subs	r3, r3, r6
 8005206:	4432      	add	r2, r6
 8005208:	2000      	movs	r0, #0
 800520a:	60a3      	str	r3, [r4, #8]
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	e7db      	b.n	80051c8 <__ssputs_r+0x58>
 8005210:	462a      	mov	r2, r5
 8005212:	f000 fceb 	bl	8005bec <_realloc_r>
 8005216:	4606      	mov	r6, r0
 8005218:	2800      	cmp	r0, #0
 800521a:	d1e1      	bne.n	80051e0 <__ssputs_r+0x70>
 800521c:	4650      	mov	r0, sl
 800521e:	6921      	ldr	r1, [r4, #16]
 8005220:	f7ff ff00 	bl	8005024 <_free_r>
 8005224:	e7c7      	b.n	80051b6 <__ssputs_r+0x46>
	...

08005228 <_svfiprintf_r>:
 8005228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522c:	4698      	mov	r8, r3
 800522e:	898b      	ldrh	r3, [r1, #12]
 8005230:	4607      	mov	r7, r0
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	460d      	mov	r5, r1
 8005236:	4614      	mov	r4, r2
 8005238:	b09d      	sub	sp, #116	; 0x74
 800523a:	d50e      	bpl.n	800525a <_svfiprintf_r+0x32>
 800523c:	690b      	ldr	r3, [r1, #16]
 800523e:	b963      	cbnz	r3, 800525a <_svfiprintf_r+0x32>
 8005240:	2140      	movs	r1, #64	; 0x40
 8005242:	f7ff ff3b 	bl	80050bc <_malloc_r>
 8005246:	6028      	str	r0, [r5, #0]
 8005248:	6128      	str	r0, [r5, #16]
 800524a:	b920      	cbnz	r0, 8005256 <_svfiprintf_r+0x2e>
 800524c:	230c      	movs	r3, #12
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	e0d1      	b.n	80053fa <_svfiprintf_r+0x1d2>
 8005256:	2340      	movs	r3, #64	; 0x40
 8005258:	616b      	str	r3, [r5, #20]
 800525a:	2300      	movs	r3, #0
 800525c:	9309      	str	r3, [sp, #36]	; 0x24
 800525e:	2320      	movs	r3, #32
 8005260:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005264:	2330      	movs	r3, #48	; 0x30
 8005266:	f04f 0901 	mov.w	r9, #1
 800526a:	f8cd 800c 	str.w	r8, [sp, #12]
 800526e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005414 <_svfiprintf_r+0x1ec>
 8005272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005276:	4623      	mov	r3, r4
 8005278:	469a      	mov	sl, r3
 800527a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800527e:	b10a      	cbz	r2, 8005284 <_svfiprintf_r+0x5c>
 8005280:	2a25      	cmp	r2, #37	; 0x25
 8005282:	d1f9      	bne.n	8005278 <_svfiprintf_r+0x50>
 8005284:	ebba 0b04 	subs.w	fp, sl, r4
 8005288:	d00b      	beq.n	80052a2 <_svfiprintf_r+0x7a>
 800528a:	465b      	mov	r3, fp
 800528c:	4622      	mov	r2, r4
 800528e:	4629      	mov	r1, r5
 8005290:	4638      	mov	r0, r7
 8005292:	f7ff ff6d 	bl	8005170 <__ssputs_r>
 8005296:	3001      	adds	r0, #1
 8005298:	f000 80aa 	beq.w	80053f0 <_svfiprintf_r+0x1c8>
 800529c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800529e:	445a      	add	r2, fp
 80052a0:	9209      	str	r2, [sp, #36]	; 0x24
 80052a2:	f89a 3000 	ldrb.w	r3, [sl]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80a2 	beq.w	80053f0 <_svfiprintf_r+0x1c8>
 80052ac:	2300      	movs	r3, #0
 80052ae:	f04f 32ff 	mov.w	r2, #4294967295
 80052b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052b6:	f10a 0a01 	add.w	sl, sl, #1
 80052ba:	9304      	str	r3, [sp, #16]
 80052bc:	9307      	str	r3, [sp, #28]
 80052be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052c2:	931a      	str	r3, [sp, #104]	; 0x68
 80052c4:	4654      	mov	r4, sl
 80052c6:	2205      	movs	r2, #5
 80052c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052cc:	4851      	ldr	r0, [pc, #324]	; (8005414 <_svfiprintf_r+0x1ec>)
 80052ce:	f000 fc4b 	bl	8005b68 <memchr>
 80052d2:	9a04      	ldr	r2, [sp, #16]
 80052d4:	b9d8      	cbnz	r0, 800530e <_svfiprintf_r+0xe6>
 80052d6:	06d0      	lsls	r0, r2, #27
 80052d8:	bf44      	itt	mi
 80052da:	2320      	movmi	r3, #32
 80052dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052e0:	0711      	lsls	r1, r2, #28
 80052e2:	bf44      	itt	mi
 80052e4:	232b      	movmi	r3, #43	; 0x2b
 80052e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ea:	f89a 3000 	ldrb.w	r3, [sl]
 80052ee:	2b2a      	cmp	r3, #42	; 0x2a
 80052f0:	d015      	beq.n	800531e <_svfiprintf_r+0xf6>
 80052f2:	4654      	mov	r4, sl
 80052f4:	2000      	movs	r0, #0
 80052f6:	f04f 0c0a 	mov.w	ip, #10
 80052fa:	9a07      	ldr	r2, [sp, #28]
 80052fc:	4621      	mov	r1, r4
 80052fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005302:	3b30      	subs	r3, #48	; 0x30
 8005304:	2b09      	cmp	r3, #9
 8005306:	d94e      	bls.n	80053a6 <_svfiprintf_r+0x17e>
 8005308:	b1b0      	cbz	r0, 8005338 <_svfiprintf_r+0x110>
 800530a:	9207      	str	r2, [sp, #28]
 800530c:	e014      	b.n	8005338 <_svfiprintf_r+0x110>
 800530e:	eba0 0308 	sub.w	r3, r0, r8
 8005312:	fa09 f303 	lsl.w	r3, r9, r3
 8005316:	4313      	orrs	r3, r2
 8005318:	46a2      	mov	sl, r4
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	e7d2      	b.n	80052c4 <_svfiprintf_r+0x9c>
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	1d19      	adds	r1, r3, #4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	9103      	str	r1, [sp, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	bfbb      	ittet	lt
 800532a:	425b      	neglt	r3, r3
 800532c:	f042 0202 	orrlt.w	r2, r2, #2
 8005330:	9307      	strge	r3, [sp, #28]
 8005332:	9307      	strlt	r3, [sp, #28]
 8005334:	bfb8      	it	lt
 8005336:	9204      	strlt	r2, [sp, #16]
 8005338:	7823      	ldrb	r3, [r4, #0]
 800533a:	2b2e      	cmp	r3, #46	; 0x2e
 800533c:	d10c      	bne.n	8005358 <_svfiprintf_r+0x130>
 800533e:	7863      	ldrb	r3, [r4, #1]
 8005340:	2b2a      	cmp	r3, #42	; 0x2a
 8005342:	d135      	bne.n	80053b0 <_svfiprintf_r+0x188>
 8005344:	9b03      	ldr	r3, [sp, #12]
 8005346:	3402      	adds	r4, #2
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	9203      	str	r2, [sp, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	bfb8      	it	lt
 8005352:	f04f 33ff 	movlt.w	r3, #4294967295
 8005356:	9305      	str	r3, [sp, #20]
 8005358:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005424 <_svfiprintf_r+0x1fc>
 800535c:	2203      	movs	r2, #3
 800535e:	4650      	mov	r0, sl
 8005360:	7821      	ldrb	r1, [r4, #0]
 8005362:	f000 fc01 	bl	8005b68 <memchr>
 8005366:	b140      	cbz	r0, 800537a <_svfiprintf_r+0x152>
 8005368:	2340      	movs	r3, #64	; 0x40
 800536a:	eba0 000a 	sub.w	r0, r0, sl
 800536e:	fa03 f000 	lsl.w	r0, r3, r0
 8005372:	9b04      	ldr	r3, [sp, #16]
 8005374:	3401      	adds	r4, #1
 8005376:	4303      	orrs	r3, r0
 8005378:	9304      	str	r3, [sp, #16]
 800537a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800537e:	2206      	movs	r2, #6
 8005380:	4825      	ldr	r0, [pc, #148]	; (8005418 <_svfiprintf_r+0x1f0>)
 8005382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005386:	f000 fbef 	bl	8005b68 <memchr>
 800538a:	2800      	cmp	r0, #0
 800538c:	d038      	beq.n	8005400 <_svfiprintf_r+0x1d8>
 800538e:	4b23      	ldr	r3, [pc, #140]	; (800541c <_svfiprintf_r+0x1f4>)
 8005390:	bb1b      	cbnz	r3, 80053da <_svfiprintf_r+0x1b2>
 8005392:	9b03      	ldr	r3, [sp, #12]
 8005394:	3307      	adds	r3, #7
 8005396:	f023 0307 	bic.w	r3, r3, #7
 800539a:	3308      	adds	r3, #8
 800539c:	9303      	str	r3, [sp, #12]
 800539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a0:	4433      	add	r3, r6
 80053a2:	9309      	str	r3, [sp, #36]	; 0x24
 80053a4:	e767      	b.n	8005276 <_svfiprintf_r+0x4e>
 80053a6:	460c      	mov	r4, r1
 80053a8:	2001      	movs	r0, #1
 80053aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80053ae:	e7a5      	b.n	80052fc <_svfiprintf_r+0xd4>
 80053b0:	2300      	movs	r3, #0
 80053b2:	f04f 0c0a 	mov.w	ip, #10
 80053b6:	4619      	mov	r1, r3
 80053b8:	3401      	adds	r4, #1
 80053ba:	9305      	str	r3, [sp, #20]
 80053bc:	4620      	mov	r0, r4
 80053be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053c2:	3a30      	subs	r2, #48	; 0x30
 80053c4:	2a09      	cmp	r2, #9
 80053c6:	d903      	bls.n	80053d0 <_svfiprintf_r+0x1a8>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0c5      	beq.n	8005358 <_svfiprintf_r+0x130>
 80053cc:	9105      	str	r1, [sp, #20]
 80053ce:	e7c3      	b.n	8005358 <_svfiprintf_r+0x130>
 80053d0:	4604      	mov	r4, r0
 80053d2:	2301      	movs	r3, #1
 80053d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80053d8:	e7f0      	b.n	80053bc <_svfiprintf_r+0x194>
 80053da:	ab03      	add	r3, sp, #12
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	462a      	mov	r2, r5
 80053e0:	4638      	mov	r0, r7
 80053e2:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <_svfiprintf_r+0x1f8>)
 80053e4:	a904      	add	r1, sp, #16
 80053e6:	f3af 8000 	nop.w
 80053ea:	1c42      	adds	r2, r0, #1
 80053ec:	4606      	mov	r6, r0
 80053ee:	d1d6      	bne.n	800539e <_svfiprintf_r+0x176>
 80053f0:	89ab      	ldrh	r3, [r5, #12]
 80053f2:	065b      	lsls	r3, r3, #25
 80053f4:	f53f af2c 	bmi.w	8005250 <_svfiprintf_r+0x28>
 80053f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053fa:	b01d      	add	sp, #116	; 0x74
 80053fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005400:	ab03      	add	r3, sp, #12
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	462a      	mov	r2, r5
 8005406:	4638      	mov	r0, r7
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <_svfiprintf_r+0x1f8>)
 800540a:	a904      	add	r1, sp, #16
 800540c:	f000 f9d4 	bl	80057b8 <_printf_i>
 8005410:	e7eb      	b.n	80053ea <_svfiprintf_r+0x1c2>
 8005412:	bf00      	nop
 8005414:	0800610c 	.word	0x0800610c
 8005418:	08006116 	.word	0x08006116
 800541c:	00000000 	.word	0x00000000
 8005420:	08005171 	.word	0x08005171
 8005424:	08006112 	.word	0x08006112

08005428 <__sfputc_r>:
 8005428:	6893      	ldr	r3, [r2, #8]
 800542a:	b410      	push	{r4}
 800542c:	3b01      	subs	r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	6093      	str	r3, [r2, #8]
 8005432:	da07      	bge.n	8005444 <__sfputc_r+0x1c>
 8005434:	6994      	ldr	r4, [r2, #24]
 8005436:	42a3      	cmp	r3, r4
 8005438:	db01      	blt.n	800543e <__sfputc_r+0x16>
 800543a:	290a      	cmp	r1, #10
 800543c:	d102      	bne.n	8005444 <__sfputc_r+0x1c>
 800543e:	bc10      	pop	{r4}
 8005440:	f7ff bada 	b.w	80049f8 <__swbuf_r>
 8005444:	6813      	ldr	r3, [r2, #0]
 8005446:	1c58      	adds	r0, r3, #1
 8005448:	6010      	str	r0, [r2, #0]
 800544a:	7019      	strb	r1, [r3, #0]
 800544c:	4608      	mov	r0, r1
 800544e:	bc10      	pop	{r4}
 8005450:	4770      	bx	lr

08005452 <__sfputs_r>:
 8005452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005454:	4606      	mov	r6, r0
 8005456:	460f      	mov	r7, r1
 8005458:	4614      	mov	r4, r2
 800545a:	18d5      	adds	r5, r2, r3
 800545c:	42ac      	cmp	r4, r5
 800545e:	d101      	bne.n	8005464 <__sfputs_r+0x12>
 8005460:	2000      	movs	r0, #0
 8005462:	e007      	b.n	8005474 <__sfputs_r+0x22>
 8005464:	463a      	mov	r2, r7
 8005466:	4630      	mov	r0, r6
 8005468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800546c:	f7ff ffdc 	bl	8005428 <__sfputc_r>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d1f3      	bne.n	800545c <__sfputs_r+0xa>
 8005474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005478 <_vfiprintf_r>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	460d      	mov	r5, r1
 800547e:	4614      	mov	r4, r2
 8005480:	4698      	mov	r8, r3
 8005482:	4606      	mov	r6, r0
 8005484:	b09d      	sub	sp, #116	; 0x74
 8005486:	b118      	cbz	r0, 8005490 <_vfiprintf_r+0x18>
 8005488:	6983      	ldr	r3, [r0, #24]
 800548a:	b90b      	cbnz	r3, 8005490 <_vfiprintf_r+0x18>
 800548c:	f7ff fcac 	bl	8004de8 <__sinit>
 8005490:	4b89      	ldr	r3, [pc, #548]	; (80056b8 <_vfiprintf_r+0x240>)
 8005492:	429d      	cmp	r5, r3
 8005494:	d11b      	bne.n	80054ce <_vfiprintf_r+0x56>
 8005496:	6875      	ldr	r5, [r6, #4]
 8005498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800549a:	07d9      	lsls	r1, r3, #31
 800549c:	d405      	bmi.n	80054aa <_vfiprintf_r+0x32>
 800549e:	89ab      	ldrh	r3, [r5, #12]
 80054a0:	059a      	lsls	r2, r3, #22
 80054a2:	d402      	bmi.n	80054aa <_vfiprintf_r+0x32>
 80054a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054a6:	f7ff fd4f 	bl	8004f48 <__retarget_lock_acquire_recursive>
 80054aa:	89ab      	ldrh	r3, [r5, #12]
 80054ac:	071b      	lsls	r3, r3, #28
 80054ae:	d501      	bpl.n	80054b4 <_vfiprintf_r+0x3c>
 80054b0:	692b      	ldr	r3, [r5, #16]
 80054b2:	b9eb      	cbnz	r3, 80054f0 <_vfiprintf_r+0x78>
 80054b4:	4629      	mov	r1, r5
 80054b6:	4630      	mov	r0, r6
 80054b8:	f7ff faf0 	bl	8004a9c <__swsetup_r>
 80054bc:	b1c0      	cbz	r0, 80054f0 <_vfiprintf_r+0x78>
 80054be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054c0:	07dc      	lsls	r4, r3, #31
 80054c2:	d50e      	bpl.n	80054e2 <_vfiprintf_r+0x6a>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	b01d      	add	sp, #116	; 0x74
 80054ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ce:	4b7b      	ldr	r3, [pc, #492]	; (80056bc <_vfiprintf_r+0x244>)
 80054d0:	429d      	cmp	r5, r3
 80054d2:	d101      	bne.n	80054d8 <_vfiprintf_r+0x60>
 80054d4:	68b5      	ldr	r5, [r6, #8]
 80054d6:	e7df      	b.n	8005498 <_vfiprintf_r+0x20>
 80054d8:	4b79      	ldr	r3, [pc, #484]	; (80056c0 <_vfiprintf_r+0x248>)
 80054da:	429d      	cmp	r5, r3
 80054dc:	bf08      	it	eq
 80054de:	68f5      	ldreq	r5, [r6, #12]
 80054e0:	e7da      	b.n	8005498 <_vfiprintf_r+0x20>
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	0598      	lsls	r0, r3, #22
 80054e6:	d4ed      	bmi.n	80054c4 <_vfiprintf_r+0x4c>
 80054e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ea:	f7ff fd2e 	bl	8004f4a <__retarget_lock_release_recursive>
 80054ee:	e7e9      	b.n	80054c4 <_vfiprintf_r+0x4c>
 80054f0:	2300      	movs	r3, #0
 80054f2:	9309      	str	r3, [sp, #36]	; 0x24
 80054f4:	2320      	movs	r3, #32
 80054f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054fa:	2330      	movs	r3, #48	; 0x30
 80054fc:	f04f 0901 	mov.w	r9, #1
 8005500:	f8cd 800c 	str.w	r8, [sp, #12]
 8005504:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80056c4 <_vfiprintf_r+0x24c>
 8005508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800550c:	4623      	mov	r3, r4
 800550e:	469a      	mov	sl, r3
 8005510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005514:	b10a      	cbz	r2, 800551a <_vfiprintf_r+0xa2>
 8005516:	2a25      	cmp	r2, #37	; 0x25
 8005518:	d1f9      	bne.n	800550e <_vfiprintf_r+0x96>
 800551a:	ebba 0b04 	subs.w	fp, sl, r4
 800551e:	d00b      	beq.n	8005538 <_vfiprintf_r+0xc0>
 8005520:	465b      	mov	r3, fp
 8005522:	4622      	mov	r2, r4
 8005524:	4629      	mov	r1, r5
 8005526:	4630      	mov	r0, r6
 8005528:	f7ff ff93 	bl	8005452 <__sfputs_r>
 800552c:	3001      	adds	r0, #1
 800552e:	f000 80aa 	beq.w	8005686 <_vfiprintf_r+0x20e>
 8005532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005534:	445a      	add	r2, fp
 8005536:	9209      	str	r2, [sp, #36]	; 0x24
 8005538:	f89a 3000 	ldrb.w	r3, [sl]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 80a2 	beq.w	8005686 <_vfiprintf_r+0x20e>
 8005542:	2300      	movs	r3, #0
 8005544:	f04f 32ff 	mov.w	r2, #4294967295
 8005548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800554c:	f10a 0a01 	add.w	sl, sl, #1
 8005550:	9304      	str	r3, [sp, #16]
 8005552:	9307      	str	r3, [sp, #28]
 8005554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005558:	931a      	str	r3, [sp, #104]	; 0x68
 800555a:	4654      	mov	r4, sl
 800555c:	2205      	movs	r2, #5
 800555e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005562:	4858      	ldr	r0, [pc, #352]	; (80056c4 <_vfiprintf_r+0x24c>)
 8005564:	f000 fb00 	bl	8005b68 <memchr>
 8005568:	9a04      	ldr	r2, [sp, #16]
 800556a:	b9d8      	cbnz	r0, 80055a4 <_vfiprintf_r+0x12c>
 800556c:	06d1      	lsls	r1, r2, #27
 800556e:	bf44      	itt	mi
 8005570:	2320      	movmi	r3, #32
 8005572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005576:	0713      	lsls	r3, r2, #28
 8005578:	bf44      	itt	mi
 800557a:	232b      	movmi	r3, #43	; 0x2b
 800557c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005580:	f89a 3000 	ldrb.w	r3, [sl]
 8005584:	2b2a      	cmp	r3, #42	; 0x2a
 8005586:	d015      	beq.n	80055b4 <_vfiprintf_r+0x13c>
 8005588:	4654      	mov	r4, sl
 800558a:	2000      	movs	r0, #0
 800558c:	f04f 0c0a 	mov.w	ip, #10
 8005590:	9a07      	ldr	r2, [sp, #28]
 8005592:	4621      	mov	r1, r4
 8005594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005598:	3b30      	subs	r3, #48	; 0x30
 800559a:	2b09      	cmp	r3, #9
 800559c:	d94e      	bls.n	800563c <_vfiprintf_r+0x1c4>
 800559e:	b1b0      	cbz	r0, 80055ce <_vfiprintf_r+0x156>
 80055a0:	9207      	str	r2, [sp, #28]
 80055a2:	e014      	b.n	80055ce <_vfiprintf_r+0x156>
 80055a4:	eba0 0308 	sub.w	r3, r0, r8
 80055a8:	fa09 f303 	lsl.w	r3, r9, r3
 80055ac:	4313      	orrs	r3, r2
 80055ae:	46a2      	mov	sl, r4
 80055b0:	9304      	str	r3, [sp, #16]
 80055b2:	e7d2      	b.n	800555a <_vfiprintf_r+0xe2>
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	1d19      	adds	r1, r3, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	9103      	str	r1, [sp, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bfbb      	ittet	lt
 80055c0:	425b      	neglt	r3, r3
 80055c2:	f042 0202 	orrlt.w	r2, r2, #2
 80055c6:	9307      	strge	r3, [sp, #28]
 80055c8:	9307      	strlt	r3, [sp, #28]
 80055ca:	bfb8      	it	lt
 80055cc:	9204      	strlt	r2, [sp, #16]
 80055ce:	7823      	ldrb	r3, [r4, #0]
 80055d0:	2b2e      	cmp	r3, #46	; 0x2e
 80055d2:	d10c      	bne.n	80055ee <_vfiprintf_r+0x176>
 80055d4:	7863      	ldrb	r3, [r4, #1]
 80055d6:	2b2a      	cmp	r3, #42	; 0x2a
 80055d8:	d135      	bne.n	8005646 <_vfiprintf_r+0x1ce>
 80055da:	9b03      	ldr	r3, [sp, #12]
 80055dc:	3402      	adds	r4, #2
 80055de:	1d1a      	adds	r2, r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	9203      	str	r2, [sp, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bfb8      	it	lt
 80055e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80055ec:	9305      	str	r3, [sp, #20]
 80055ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056d4 <_vfiprintf_r+0x25c>
 80055f2:	2203      	movs	r2, #3
 80055f4:	4650      	mov	r0, sl
 80055f6:	7821      	ldrb	r1, [r4, #0]
 80055f8:	f000 fab6 	bl	8005b68 <memchr>
 80055fc:	b140      	cbz	r0, 8005610 <_vfiprintf_r+0x198>
 80055fe:	2340      	movs	r3, #64	; 0x40
 8005600:	eba0 000a 	sub.w	r0, r0, sl
 8005604:	fa03 f000 	lsl.w	r0, r3, r0
 8005608:	9b04      	ldr	r3, [sp, #16]
 800560a:	3401      	adds	r4, #1
 800560c:	4303      	orrs	r3, r0
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005614:	2206      	movs	r2, #6
 8005616:	482c      	ldr	r0, [pc, #176]	; (80056c8 <_vfiprintf_r+0x250>)
 8005618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800561c:	f000 faa4 	bl	8005b68 <memchr>
 8005620:	2800      	cmp	r0, #0
 8005622:	d03f      	beq.n	80056a4 <_vfiprintf_r+0x22c>
 8005624:	4b29      	ldr	r3, [pc, #164]	; (80056cc <_vfiprintf_r+0x254>)
 8005626:	bb1b      	cbnz	r3, 8005670 <_vfiprintf_r+0x1f8>
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	3307      	adds	r3, #7
 800562c:	f023 0307 	bic.w	r3, r3, #7
 8005630:	3308      	adds	r3, #8
 8005632:	9303      	str	r3, [sp, #12]
 8005634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005636:	443b      	add	r3, r7
 8005638:	9309      	str	r3, [sp, #36]	; 0x24
 800563a:	e767      	b.n	800550c <_vfiprintf_r+0x94>
 800563c:	460c      	mov	r4, r1
 800563e:	2001      	movs	r0, #1
 8005640:	fb0c 3202 	mla	r2, ip, r2, r3
 8005644:	e7a5      	b.n	8005592 <_vfiprintf_r+0x11a>
 8005646:	2300      	movs	r3, #0
 8005648:	f04f 0c0a 	mov.w	ip, #10
 800564c:	4619      	mov	r1, r3
 800564e:	3401      	adds	r4, #1
 8005650:	9305      	str	r3, [sp, #20]
 8005652:	4620      	mov	r0, r4
 8005654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005658:	3a30      	subs	r2, #48	; 0x30
 800565a:	2a09      	cmp	r2, #9
 800565c:	d903      	bls.n	8005666 <_vfiprintf_r+0x1ee>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0c5      	beq.n	80055ee <_vfiprintf_r+0x176>
 8005662:	9105      	str	r1, [sp, #20]
 8005664:	e7c3      	b.n	80055ee <_vfiprintf_r+0x176>
 8005666:	4604      	mov	r4, r0
 8005668:	2301      	movs	r3, #1
 800566a:	fb0c 2101 	mla	r1, ip, r1, r2
 800566e:	e7f0      	b.n	8005652 <_vfiprintf_r+0x1da>
 8005670:	ab03      	add	r3, sp, #12
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	462a      	mov	r2, r5
 8005676:	4630      	mov	r0, r6
 8005678:	4b15      	ldr	r3, [pc, #84]	; (80056d0 <_vfiprintf_r+0x258>)
 800567a:	a904      	add	r1, sp, #16
 800567c:	f3af 8000 	nop.w
 8005680:	4607      	mov	r7, r0
 8005682:	1c78      	adds	r0, r7, #1
 8005684:	d1d6      	bne.n	8005634 <_vfiprintf_r+0x1bc>
 8005686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005688:	07d9      	lsls	r1, r3, #31
 800568a:	d405      	bmi.n	8005698 <_vfiprintf_r+0x220>
 800568c:	89ab      	ldrh	r3, [r5, #12]
 800568e:	059a      	lsls	r2, r3, #22
 8005690:	d402      	bmi.n	8005698 <_vfiprintf_r+0x220>
 8005692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005694:	f7ff fc59 	bl	8004f4a <__retarget_lock_release_recursive>
 8005698:	89ab      	ldrh	r3, [r5, #12]
 800569a:	065b      	lsls	r3, r3, #25
 800569c:	f53f af12 	bmi.w	80054c4 <_vfiprintf_r+0x4c>
 80056a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056a2:	e711      	b.n	80054c8 <_vfiprintf_r+0x50>
 80056a4:	ab03      	add	r3, sp, #12
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	462a      	mov	r2, r5
 80056aa:	4630      	mov	r0, r6
 80056ac:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <_vfiprintf_r+0x258>)
 80056ae:	a904      	add	r1, sp, #16
 80056b0:	f000 f882 	bl	80057b8 <_printf_i>
 80056b4:	e7e4      	b.n	8005680 <_vfiprintf_r+0x208>
 80056b6:	bf00      	nop
 80056b8:	080060cc 	.word	0x080060cc
 80056bc:	080060ec 	.word	0x080060ec
 80056c0:	080060ac 	.word	0x080060ac
 80056c4:	0800610c 	.word	0x0800610c
 80056c8:	08006116 	.word	0x08006116
 80056cc:	00000000 	.word	0x00000000
 80056d0:	08005453 	.word	0x08005453
 80056d4:	08006112 	.word	0x08006112

080056d8 <_printf_common>:
 80056d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056dc:	4616      	mov	r6, r2
 80056de:	4699      	mov	r9, r3
 80056e0:	688a      	ldr	r2, [r1, #8]
 80056e2:	690b      	ldr	r3, [r1, #16]
 80056e4:	4607      	mov	r7, r0
 80056e6:	4293      	cmp	r3, r2
 80056e8:	bfb8      	it	lt
 80056ea:	4613      	movlt	r3, r2
 80056ec:	6033      	str	r3, [r6, #0]
 80056ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056f2:	460c      	mov	r4, r1
 80056f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056f8:	b10a      	cbz	r2, 80056fe <_printf_common+0x26>
 80056fa:	3301      	adds	r3, #1
 80056fc:	6033      	str	r3, [r6, #0]
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	0699      	lsls	r1, r3, #26
 8005702:	bf42      	ittt	mi
 8005704:	6833      	ldrmi	r3, [r6, #0]
 8005706:	3302      	addmi	r3, #2
 8005708:	6033      	strmi	r3, [r6, #0]
 800570a:	6825      	ldr	r5, [r4, #0]
 800570c:	f015 0506 	ands.w	r5, r5, #6
 8005710:	d106      	bne.n	8005720 <_printf_common+0x48>
 8005712:	f104 0a19 	add.w	sl, r4, #25
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	6832      	ldr	r2, [r6, #0]
 800571a:	1a9b      	subs	r3, r3, r2
 800571c:	42ab      	cmp	r3, r5
 800571e:	dc28      	bgt.n	8005772 <_printf_common+0x9a>
 8005720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005724:	1e13      	subs	r3, r2, #0
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	bf18      	it	ne
 800572a:	2301      	movne	r3, #1
 800572c:	0692      	lsls	r2, r2, #26
 800572e:	d42d      	bmi.n	800578c <_printf_common+0xb4>
 8005730:	4649      	mov	r1, r9
 8005732:	4638      	mov	r0, r7
 8005734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005738:	47c0      	blx	r8
 800573a:	3001      	adds	r0, #1
 800573c:	d020      	beq.n	8005780 <_printf_common+0xa8>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	68e5      	ldr	r5, [r4, #12]
 8005742:	f003 0306 	and.w	r3, r3, #6
 8005746:	2b04      	cmp	r3, #4
 8005748:	bf18      	it	ne
 800574a:	2500      	movne	r5, #0
 800574c:	6832      	ldr	r2, [r6, #0]
 800574e:	f04f 0600 	mov.w	r6, #0
 8005752:	68a3      	ldr	r3, [r4, #8]
 8005754:	bf08      	it	eq
 8005756:	1aad      	subeq	r5, r5, r2
 8005758:	6922      	ldr	r2, [r4, #16]
 800575a:	bf08      	it	eq
 800575c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005760:	4293      	cmp	r3, r2
 8005762:	bfc4      	itt	gt
 8005764:	1a9b      	subgt	r3, r3, r2
 8005766:	18ed      	addgt	r5, r5, r3
 8005768:	341a      	adds	r4, #26
 800576a:	42b5      	cmp	r5, r6
 800576c:	d11a      	bne.n	80057a4 <_printf_common+0xcc>
 800576e:	2000      	movs	r0, #0
 8005770:	e008      	b.n	8005784 <_printf_common+0xac>
 8005772:	2301      	movs	r3, #1
 8005774:	4652      	mov	r2, sl
 8005776:	4649      	mov	r1, r9
 8005778:	4638      	mov	r0, r7
 800577a:	47c0      	blx	r8
 800577c:	3001      	adds	r0, #1
 800577e:	d103      	bne.n	8005788 <_printf_common+0xb0>
 8005780:	f04f 30ff 	mov.w	r0, #4294967295
 8005784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005788:	3501      	adds	r5, #1
 800578a:	e7c4      	b.n	8005716 <_printf_common+0x3e>
 800578c:	2030      	movs	r0, #48	; 0x30
 800578e:	18e1      	adds	r1, r4, r3
 8005790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800579a:	4422      	add	r2, r4
 800579c:	3302      	adds	r3, #2
 800579e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057a2:	e7c5      	b.n	8005730 <_printf_common+0x58>
 80057a4:	2301      	movs	r3, #1
 80057a6:	4622      	mov	r2, r4
 80057a8:	4649      	mov	r1, r9
 80057aa:	4638      	mov	r0, r7
 80057ac:	47c0      	blx	r8
 80057ae:	3001      	adds	r0, #1
 80057b0:	d0e6      	beq.n	8005780 <_printf_common+0xa8>
 80057b2:	3601      	adds	r6, #1
 80057b4:	e7d9      	b.n	800576a <_printf_common+0x92>
	...

080057b8 <_printf_i>:
 80057b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	460c      	mov	r4, r1
 80057be:	7e27      	ldrb	r7, [r4, #24]
 80057c0:	4691      	mov	r9, r2
 80057c2:	2f78      	cmp	r7, #120	; 0x78
 80057c4:	4680      	mov	r8, r0
 80057c6:	469a      	mov	sl, r3
 80057c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057ce:	d807      	bhi.n	80057e0 <_printf_i+0x28>
 80057d0:	2f62      	cmp	r7, #98	; 0x62
 80057d2:	d80a      	bhi.n	80057ea <_printf_i+0x32>
 80057d4:	2f00      	cmp	r7, #0
 80057d6:	f000 80d9 	beq.w	800598c <_printf_i+0x1d4>
 80057da:	2f58      	cmp	r7, #88	; 0x58
 80057dc:	f000 80a4 	beq.w	8005928 <_printf_i+0x170>
 80057e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057e8:	e03a      	b.n	8005860 <_printf_i+0xa8>
 80057ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ee:	2b15      	cmp	r3, #21
 80057f0:	d8f6      	bhi.n	80057e0 <_printf_i+0x28>
 80057f2:	a001      	add	r0, pc, #4	; (adr r0, 80057f8 <_printf_i+0x40>)
 80057f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80057f8:	08005851 	.word	0x08005851
 80057fc:	08005865 	.word	0x08005865
 8005800:	080057e1 	.word	0x080057e1
 8005804:	080057e1 	.word	0x080057e1
 8005808:	080057e1 	.word	0x080057e1
 800580c:	080057e1 	.word	0x080057e1
 8005810:	08005865 	.word	0x08005865
 8005814:	080057e1 	.word	0x080057e1
 8005818:	080057e1 	.word	0x080057e1
 800581c:	080057e1 	.word	0x080057e1
 8005820:	080057e1 	.word	0x080057e1
 8005824:	08005973 	.word	0x08005973
 8005828:	08005895 	.word	0x08005895
 800582c:	08005955 	.word	0x08005955
 8005830:	080057e1 	.word	0x080057e1
 8005834:	080057e1 	.word	0x080057e1
 8005838:	08005995 	.word	0x08005995
 800583c:	080057e1 	.word	0x080057e1
 8005840:	08005895 	.word	0x08005895
 8005844:	080057e1 	.word	0x080057e1
 8005848:	080057e1 	.word	0x080057e1
 800584c:	0800595d 	.word	0x0800595d
 8005850:	680b      	ldr	r3, [r1, #0]
 8005852:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005856:	1d1a      	adds	r2, r3, #4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	600a      	str	r2, [r1, #0]
 800585c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005860:	2301      	movs	r3, #1
 8005862:	e0a4      	b.n	80059ae <_printf_i+0x1f6>
 8005864:	6825      	ldr	r5, [r4, #0]
 8005866:	6808      	ldr	r0, [r1, #0]
 8005868:	062e      	lsls	r6, r5, #24
 800586a:	f100 0304 	add.w	r3, r0, #4
 800586e:	d50a      	bpl.n	8005886 <_printf_i+0xce>
 8005870:	6805      	ldr	r5, [r0, #0]
 8005872:	600b      	str	r3, [r1, #0]
 8005874:	2d00      	cmp	r5, #0
 8005876:	da03      	bge.n	8005880 <_printf_i+0xc8>
 8005878:	232d      	movs	r3, #45	; 0x2d
 800587a:	426d      	negs	r5, r5
 800587c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005880:	230a      	movs	r3, #10
 8005882:	485e      	ldr	r0, [pc, #376]	; (80059fc <_printf_i+0x244>)
 8005884:	e019      	b.n	80058ba <_printf_i+0x102>
 8005886:	f015 0f40 	tst.w	r5, #64	; 0x40
 800588a:	6805      	ldr	r5, [r0, #0]
 800588c:	600b      	str	r3, [r1, #0]
 800588e:	bf18      	it	ne
 8005890:	b22d      	sxthne	r5, r5
 8005892:	e7ef      	b.n	8005874 <_printf_i+0xbc>
 8005894:	680b      	ldr	r3, [r1, #0]
 8005896:	6825      	ldr	r5, [r4, #0]
 8005898:	1d18      	adds	r0, r3, #4
 800589a:	6008      	str	r0, [r1, #0]
 800589c:	0628      	lsls	r0, r5, #24
 800589e:	d501      	bpl.n	80058a4 <_printf_i+0xec>
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	e002      	b.n	80058aa <_printf_i+0xf2>
 80058a4:	0669      	lsls	r1, r5, #25
 80058a6:	d5fb      	bpl.n	80058a0 <_printf_i+0xe8>
 80058a8:	881d      	ldrh	r5, [r3, #0]
 80058aa:	2f6f      	cmp	r7, #111	; 0x6f
 80058ac:	bf0c      	ite	eq
 80058ae:	2308      	moveq	r3, #8
 80058b0:	230a      	movne	r3, #10
 80058b2:	4852      	ldr	r0, [pc, #328]	; (80059fc <_printf_i+0x244>)
 80058b4:	2100      	movs	r1, #0
 80058b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058ba:	6866      	ldr	r6, [r4, #4]
 80058bc:	2e00      	cmp	r6, #0
 80058be:	bfa8      	it	ge
 80058c0:	6821      	ldrge	r1, [r4, #0]
 80058c2:	60a6      	str	r6, [r4, #8]
 80058c4:	bfa4      	itt	ge
 80058c6:	f021 0104 	bicge.w	r1, r1, #4
 80058ca:	6021      	strge	r1, [r4, #0]
 80058cc:	b90d      	cbnz	r5, 80058d2 <_printf_i+0x11a>
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	d04d      	beq.n	800596e <_printf_i+0x1b6>
 80058d2:	4616      	mov	r6, r2
 80058d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80058d8:	fb03 5711 	mls	r7, r3, r1, r5
 80058dc:	5dc7      	ldrb	r7, [r0, r7]
 80058de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058e2:	462f      	mov	r7, r5
 80058e4:	42bb      	cmp	r3, r7
 80058e6:	460d      	mov	r5, r1
 80058e8:	d9f4      	bls.n	80058d4 <_printf_i+0x11c>
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d10b      	bne.n	8005906 <_printf_i+0x14e>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	07df      	lsls	r7, r3, #31
 80058f2:	d508      	bpl.n	8005906 <_printf_i+0x14e>
 80058f4:	6923      	ldr	r3, [r4, #16]
 80058f6:	6861      	ldr	r1, [r4, #4]
 80058f8:	4299      	cmp	r1, r3
 80058fa:	bfde      	ittt	le
 80058fc:	2330      	movle	r3, #48	; 0x30
 80058fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005902:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005906:	1b92      	subs	r2, r2, r6
 8005908:	6122      	str	r2, [r4, #16]
 800590a:	464b      	mov	r3, r9
 800590c:	4621      	mov	r1, r4
 800590e:	4640      	mov	r0, r8
 8005910:	f8cd a000 	str.w	sl, [sp]
 8005914:	aa03      	add	r2, sp, #12
 8005916:	f7ff fedf 	bl	80056d8 <_printf_common>
 800591a:	3001      	adds	r0, #1
 800591c:	d14c      	bne.n	80059b8 <_printf_i+0x200>
 800591e:	f04f 30ff 	mov.w	r0, #4294967295
 8005922:	b004      	add	sp, #16
 8005924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005928:	4834      	ldr	r0, [pc, #208]	; (80059fc <_printf_i+0x244>)
 800592a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800592e:	680e      	ldr	r6, [r1, #0]
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	f856 5b04 	ldr.w	r5, [r6], #4
 8005936:	061f      	lsls	r7, r3, #24
 8005938:	600e      	str	r6, [r1, #0]
 800593a:	d514      	bpl.n	8005966 <_printf_i+0x1ae>
 800593c:	07d9      	lsls	r1, r3, #31
 800593e:	bf44      	itt	mi
 8005940:	f043 0320 	orrmi.w	r3, r3, #32
 8005944:	6023      	strmi	r3, [r4, #0]
 8005946:	b91d      	cbnz	r5, 8005950 <_printf_i+0x198>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	f023 0320 	bic.w	r3, r3, #32
 800594e:	6023      	str	r3, [r4, #0]
 8005950:	2310      	movs	r3, #16
 8005952:	e7af      	b.n	80058b4 <_printf_i+0xfc>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	f043 0320 	orr.w	r3, r3, #32
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	2378      	movs	r3, #120	; 0x78
 800595e:	4828      	ldr	r0, [pc, #160]	; (8005a00 <_printf_i+0x248>)
 8005960:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005964:	e7e3      	b.n	800592e <_printf_i+0x176>
 8005966:	065e      	lsls	r6, r3, #25
 8005968:	bf48      	it	mi
 800596a:	b2ad      	uxthmi	r5, r5
 800596c:	e7e6      	b.n	800593c <_printf_i+0x184>
 800596e:	4616      	mov	r6, r2
 8005970:	e7bb      	b.n	80058ea <_printf_i+0x132>
 8005972:	680b      	ldr	r3, [r1, #0]
 8005974:	6826      	ldr	r6, [r4, #0]
 8005976:	1d1d      	adds	r5, r3, #4
 8005978:	6960      	ldr	r0, [r4, #20]
 800597a:	600d      	str	r5, [r1, #0]
 800597c:	0635      	lsls	r5, r6, #24
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	d501      	bpl.n	8005986 <_printf_i+0x1ce>
 8005982:	6018      	str	r0, [r3, #0]
 8005984:	e002      	b.n	800598c <_printf_i+0x1d4>
 8005986:	0671      	lsls	r1, r6, #25
 8005988:	d5fb      	bpl.n	8005982 <_printf_i+0x1ca>
 800598a:	8018      	strh	r0, [r3, #0]
 800598c:	2300      	movs	r3, #0
 800598e:	4616      	mov	r6, r2
 8005990:	6123      	str	r3, [r4, #16]
 8005992:	e7ba      	b.n	800590a <_printf_i+0x152>
 8005994:	680b      	ldr	r3, [r1, #0]
 8005996:	1d1a      	adds	r2, r3, #4
 8005998:	600a      	str	r2, [r1, #0]
 800599a:	681e      	ldr	r6, [r3, #0]
 800599c:	2100      	movs	r1, #0
 800599e:	4630      	mov	r0, r6
 80059a0:	6862      	ldr	r2, [r4, #4]
 80059a2:	f000 f8e1 	bl	8005b68 <memchr>
 80059a6:	b108      	cbz	r0, 80059ac <_printf_i+0x1f4>
 80059a8:	1b80      	subs	r0, r0, r6
 80059aa:	6060      	str	r0, [r4, #4]
 80059ac:	6863      	ldr	r3, [r4, #4]
 80059ae:	6123      	str	r3, [r4, #16]
 80059b0:	2300      	movs	r3, #0
 80059b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b6:	e7a8      	b.n	800590a <_printf_i+0x152>
 80059b8:	4632      	mov	r2, r6
 80059ba:	4649      	mov	r1, r9
 80059bc:	4640      	mov	r0, r8
 80059be:	6923      	ldr	r3, [r4, #16]
 80059c0:	47d0      	blx	sl
 80059c2:	3001      	adds	r0, #1
 80059c4:	d0ab      	beq.n	800591e <_printf_i+0x166>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	079b      	lsls	r3, r3, #30
 80059ca:	d413      	bmi.n	80059f4 <_printf_i+0x23c>
 80059cc:	68e0      	ldr	r0, [r4, #12]
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	4298      	cmp	r0, r3
 80059d2:	bfb8      	it	lt
 80059d4:	4618      	movlt	r0, r3
 80059d6:	e7a4      	b.n	8005922 <_printf_i+0x16a>
 80059d8:	2301      	movs	r3, #1
 80059da:	4632      	mov	r2, r6
 80059dc:	4649      	mov	r1, r9
 80059de:	4640      	mov	r0, r8
 80059e0:	47d0      	blx	sl
 80059e2:	3001      	adds	r0, #1
 80059e4:	d09b      	beq.n	800591e <_printf_i+0x166>
 80059e6:	3501      	adds	r5, #1
 80059e8:	68e3      	ldr	r3, [r4, #12]
 80059ea:	9903      	ldr	r1, [sp, #12]
 80059ec:	1a5b      	subs	r3, r3, r1
 80059ee:	42ab      	cmp	r3, r5
 80059f0:	dcf2      	bgt.n	80059d8 <_printf_i+0x220>
 80059f2:	e7eb      	b.n	80059cc <_printf_i+0x214>
 80059f4:	2500      	movs	r5, #0
 80059f6:	f104 0619 	add.w	r6, r4, #25
 80059fa:	e7f5      	b.n	80059e8 <_printf_i+0x230>
 80059fc:	0800611d 	.word	0x0800611d
 8005a00:	0800612e 	.word	0x0800612e

08005a04 <_sbrk_r>:
 8005a04:	b538      	push	{r3, r4, r5, lr}
 8005a06:	2300      	movs	r3, #0
 8005a08:	4d05      	ldr	r5, [pc, #20]	; (8005a20 <_sbrk_r+0x1c>)
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	602b      	str	r3, [r5, #0]
 8005a10:	f7fe fa70 	bl	8003ef4 <_sbrk>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_sbrk_r+0x1a>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_sbrk_r+0x1a>
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	200015d8 	.word	0x200015d8

08005a24 <__sread>:
 8005a24:	b510      	push	{r4, lr}
 8005a26:	460c      	mov	r4, r1
 8005a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2c:	f000 f904 	bl	8005c38 <_read_r>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	bfab      	itete	ge
 8005a34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a36:	89a3      	ldrhlt	r3, [r4, #12]
 8005a38:	181b      	addge	r3, r3, r0
 8005a3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a3e:	bfac      	ite	ge
 8005a40:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a42:	81a3      	strhlt	r3, [r4, #12]
 8005a44:	bd10      	pop	{r4, pc}

08005a46 <__swrite>:
 8005a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4a:	461f      	mov	r7, r3
 8005a4c:	898b      	ldrh	r3, [r1, #12]
 8005a4e:	4605      	mov	r5, r0
 8005a50:	05db      	lsls	r3, r3, #23
 8005a52:	460c      	mov	r4, r1
 8005a54:	4616      	mov	r6, r2
 8005a56:	d505      	bpl.n	8005a64 <__swrite+0x1e>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a60:	f000 f870 	bl	8005b44 <_lseek_r>
 8005a64:	89a3      	ldrh	r3, [r4, #12]
 8005a66:	4632      	mov	r2, r6
 8005a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a6c:	81a3      	strh	r3, [r4, #12]
 8005a6e:	4628      	mov	r0, r5
 8005a70:	463b      	mov	r3, r7
 8005a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7a:	f000 b817 	b.w	8005aac <_write_r>

08005a7e <__sseek>:
 8005a7e:	b510      	push	{r4, lr}
 8005a80:	460c      	mov	r4, r1
 8005a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a86:	f000 f85d 	bl	8005b44 <_lseek_r>
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	bf15      	itete	ne
 8005a90:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a9a:	81a3      	strheq	r3, [r4, #12]
 8005a9c:	bf18      	it	ne
 8005a9e:	81a3      	strhne	r3, [r4, #12]
 8005aa0:	bd10      	pop	{r4, pc}

08005aa2 <__sclose>:
 8005aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa6:	f000 b81b 	b.w	8005ae0 <_close_r>
	...

08005aac <_write_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	4d05      	ldr	r5, [pc, #20]	; (8005acc <_write_r+0x20>)
 8005ab8:	602a      	str	r2, [r5, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f7fd fe6c 	bl	8003798 <_write>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_write_r+0x1e>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_write_r+0x1e>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	200015d8 	.word	0x200015d8

08005ad0 <abort>:
 8005ad0:	2006      	movs	r0, #6
 8005ad2:	b508      	push	{r3, lr}
 8005ad4:	f000 f8ea 	bl	8005cac <raise>
 8005ad8:	2001      	movs	r0, #1
 8005ada:	f7fe f9f7 	bl	8003ecc <_exit>
	...

08005ae0 <_close_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4d05      	ldr	r5, [pc, #20]	; (8005afc <_close_r+0x1c>)
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	602b      	str	r3, [r5, #0]
 8005aec:	f7fe fa1c 	bl	8003f28 <_close>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_close_r+0x1a>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_close_r+0x1a>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	200015d8 	.word	0x200015d8

08005b00 <_fstat_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	2300      	movs	r3, #0
 8005b04:	4d06      	ldr	r5, [pc, #24]	; (8005b20 <_fstat_r+0x20>)
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	602b      	str	r3, [r5, #0]
 8005b0e:	f7fe fa0e 	bl	8003f2e <_fstat>
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	d102      	bne.n	8005b1c <_fstat_r+0x1c>
 8005b16:	682b      	ldr	r3, [r5, #0]
 8005b18:	b103      	cbz	r3, 8005b1c <_fstat_r+0x1c>
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	bd38      	pop	{r3, r4, r5, pc}
 8005b1e:	bf00      	nop
 8005b20:	200015d8 	.word	0x200015d8

08005b24 <_isatty_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	2300      	movs	r3, #0
 8005b28:	4d05      	ldr	r5, [pc, #20]	; (8005b40 <_isatty_r+0x1c>)
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	602b      	str	r3, [r5, #0]
 8005b30:	f7fe fa02 	bl	8003f38 <_isatty>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d102      	bne.n	8005b3e <_isatty_r+0x1a>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	b103      	cbz	r3, 8005b3e <_isatty_r+0x1a>
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
 8005b40:	200015d8 	.word	0x200015d8

08005b44 <_lseek_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	4d05      	ldr	r5, [pc, #20]	; (8005b64 <_lseek_r+0x20>)
 8005b50:	602a      	str	r2, [r5, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	f7fe f9f2 	bl	8003f3c <_lseek>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_lseek_r+0x1e>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_lseek_r+0x1e>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	200015d8 	.word	0x200015d8

08005b68 <memchr>:
 8005b68:	4603      	mov	r3, r0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	b2c9      	uxtb	r1, r1
 8005b6e:	4402      	add	r2, r0
 8005b70:	4293      	cmp	r3, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	d101      	bne.n	8005b7a <memchr+0x12>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e003      	b.n	8005b82 <memchr+0x1a>
 8005b7a:	7804      	ldrb	r4, [r0, #0]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	428c      	cmp	r4, r1
 8005b80:	d1f6      	bne.n	8005b70 <memchr+0x8>
 8005b82:	bd10      	pop	{r4, pc}

08005b84 <memcpy>:
 8005b84:	440a      	add	r2, r1
 8005b86:	4291      	cmp	r1, r2
 8005b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b8c:	d100      	bne.n	8005b90 <memcpy+0xc>
 8005b8e:	4770      	bx	lr
 8005b90:	b510      	push	{r4, lr}
 8005b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b96:	4291      	cmp	r1, r2
 8005b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b9c:	d1f9      	bne.n	8005b92 <memcpy+0xe>
 8005b9e:	bd10      	pop	{r4, pc}

08005ba0 <memmove>:
 8005ba0:	4288      	cmp	r0, r1
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	eb01 0402 	add.w	r4, r1, r2
 8005ba8:	d902      	bls.n	8005bb0 <memmove+0x10>
 8005baa:	4284      	cmp	r4, r0
 8005bac:	4623      	mov	r3, r4
 8005bae:	d807      	bhi.n	8005bc0 <memmove+0x20>
 8005bb0:	1e43      	subs	r3, r0, #1
 8005bb2:	42a1      	cmp	r1, r4
 8005bb4:	d008      	beq.n	8005bc8 <memmove+0x28>
 8005bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bbe:	e7f8      	b.n	8005bb2 <memmove+0x12>
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	4402      	add	r2, r0
 8005bc4:	428a      	cmp	r2, r1
 8005bc6:	d100      	bne.n	8005bca <memmove+0x2a>
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bd2:	e7f7      	b.n	8005bc4 <memmove+0x24>

08005bd4 <__malloc_lock>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	; (8005bdc <__malloc_lock+0x8>)
 8005bd6:	f7ff b9b7 	b.w	8004f48 <__retarget_lock_acquire_recursive>
 8005bda:	bf00      	nop
 8005bdc:	200015d0 	.word	0x200015d0

08005be0 <__malloc_unlock>:
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <__malloc_unlock+0x8>)
 8005be2:	f7ff b9b2 	b.w	8004f4a <__retarget_lock_release_recursive>
 8005be6:	bf00      	nop
 8005be8:	200015d0 	.word	0x200015d0

08005bec <_realloc_r>:
 8005bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bee:	4607      	mov	r7, r0
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	460e      	mov	r6, r1
 8005bf4:	b921      	cbnz	r1, 8005c00 <_realloc_r+0x14>
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bfc:	f7ff ba5e 	b.w	80050bc <_malloc_r>
 8005c00:	b922      	cbnz	r2, 8005c0c <_realloc_r+0x20>
 8005c02:	f7ff fa0f 	bl	8005024 <_free_r>
 8005c06:	4625      	mov	r5, r4
 8005c08:	4628      	mov	r0, r5
 8005c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c0c:	f000 f86a 	bl	8005ce4 <_malloc_usable_size_r>
 8005c10:	42a0      	cmp	r0, r4
 8005c12:	d20f      	bcs.n	8005c34 <_realloc_r+0x48>
 8005c14:	4621      	mov	r1, r4
 8005c16:	4638      	mov	r0, r7
 8005c18:	f7ff fa50 	bl	80050bc <_malloc_r>
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d0f2      	beq.n	8005c08 <_realloc_r+0x1c>
 8005c22:	4631      	mov	r1, r6
 8005c24:	4622      	mov	r2, r4
 8005c26:	f7ff ffad 	bl	8005b84 <memcpy>
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	f7ff f9f9 	bl	8005024 <_free_r>
 8005c32:	e7e9      	b.n	8005c08 <_realloc_r+0x1c>
 8005c34:	4635      	mov	r5, r6
 8005c36:	e7e7      	b.n	8005c08 <_realloc_r+0x1c>

08005c38 <_read_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	4611      	mov	r1, r2
 8005c40:	2200      	movs	r2, #0
 8005c42:	4d05      	ldr	r5, [pc, #20]	; (8005c58 <_read_r+0x20>)
 8005c44:	602a      	str	r2, [r5, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f7fe f946 	bl	8003ed8 <_read>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_read_r+0x1e>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_read_r+0x1e>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	200015d8 	.word	0x200015d8

08005c5c <_raise_r>:
 8005c5c:	291f      	cmp	r1, #31
 8005c5e:	b538      	push	{r3, r4, r5, lr}
 8005c60:	4604      	mov	r4, r0
 8005c62:	460d      	mov	r5, r1
 8005c64:	d904      	bls.n	8005c70 <_raise_r+0x14>
 8005c66:	2316      	movs	r3, #22
 8005c68:	6003      	str	r3, [r0, #0]
 8005c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c72:	b112      	cbz	r2, 8005c7a <_raise_r+0x1e>
 8005c74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c78:	b94b      	cbnz	r3, 8005c8e <_raise_r+0x32>
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f000 f830 	bl	8005ce0 <_getpid_r>
 8005c80:	462a      	mov	r2, r5
 8005c82:	4601      	mov	r1, r0
 8005c84:	4620      	mov	r0, r4
 8005c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c8a:	f000 b817 	b.w	8005cbc <_kill_r>
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d00a      	beq.n	8005ca8 <_raise_r+0x4c>
 8005c92:	1c59      	adds	r1, r3, #1
 8005c94:	d103      	bne.n	8005c9e <_raise_r+0x42>
 8005c96:	2316      	movs	r3, #22
 8005c98:	6003      	str	r3, [r0, #0]
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	e7e7      	b.n	8005c6e <_raise_r+0x12>
 8005c9e:	2400      	movs	r4, #0
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ca6:	4798      	blx	r3
 8005ca8:	2000      	movs	r0, #0
 8005caa:	e7e0      	b.n	8005c6e <_raise_r+0x12>

08005cac <raise>:
 8005cac:	4b02      	ldr	r3, [pc, #8]	; (8005cb8 <raise+0xc>)
 8005cae:	4601      	mov	r1, r0
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	f7ff bfd3 	b.w	8005c5c <_raise_r>
 8005cb6:	bf00      	nop
 8005cb8:	20000194 	.word	0x20000194

08005cbc <_kill_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4d06      	ldr	r5, [pc, #24]	; (8005cdc <_kill_r+0x20>)
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	602b      	str	r3, [r5, #0]
 8005cca:	f7fe f8f7 	bl	8003ebc <_kill>
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	d102      	bne.n	8005cd8 <_kill_r+0x1c>
 8005cd2:	682b      	ldr	r3, [r5, #0]
 8005cd4:	b103      	cbz	r3, 8005cd8 <_kill_r+0x1c>
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	bd38      	pop	{r3, r4, r5, pc}
 8005cda:	bf00      	nop
 8005cdc:	200015d8 	.word	0x200015d8

08005ce0 <_getpid_r>:
 8005ce0:	f7fe b8ea 	b.w	8003eb8 <_getpid>

08005ce4 <_malloc_usable_size_r>:
 8005ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ce8:	1f18      	subs	r0, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	bfbc      	itt	lt
 8005cee:	580b      	ldrlt	r3, [r1, r0]
 8005cf0:	18c0      	addlt	r0, r0, r3
 8005cf2:	4770      	bx	lr

08005cf4 <_init>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr

08005d00 <_fini>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr
